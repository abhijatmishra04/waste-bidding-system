#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Locust metrics worker:
Consumes latency_feed.jsonl and computes metrics using Locust's original RequestStats.
"""

import os, time, json, logging
from logging.handlers import RotatingFileHandler
os.environ.setdefault("LOCUST_NO_MONKEY_PATCH","1")
from locust.env import Environment  # official Locust engine

FEED="logs/latency_feed.jsonl"; OUT="logs/locust_metrics.jsonl"
SNAP_INT=5; OFFSET="logs/locust_feed.offset"

def _rot_logger(path):
    lg=logging.getLogger("locust.metrics"); lg.setLevel(logging.INFO); lg.propagate=False
    if not lg.handlers:
        os.makedirs(os.path.dirname(path),exist_ok=True)
        fh=RotatingFileHandler(path,maxBytes=10*1024*1024,backupCount=3)
        fh.setFormatter(logging.Formatter("%(message)s")); lg.addHandler(fh)
    return lg

def _cp_read(): 
    try: return int(open(OFFSET).read().strip() or "0")
    except: return 0
def _cp_write(o): 
    os.makedirs(os.path.dirname(OFFSET),exist_ok=True)
    open(OFFSET,"w").write(str(o))

def _snapshot(env):
    s=env.stats.total
    snap={
        "ts":time.strftime("%Y-%m-%dT%H:%M:%S",time.gmtime()),
        "locust_num_requests":s.num_requests,
        "locust_num_failures":s.num_failures,
        "locust_success_rate_pct":round(((s.num_requests-s.num_failures)/s.num_requests*100) if s.num_requests else 0,2),
        "locust_avg_latency_ms":round(getattr(s,"avg_response_time",0.0),2),
        "locust_p50_latency_ms":round(s.get_current_response_time_percentile(0.50) or 0.0,2),
        "locust_p95_latency_ms":round(s.get_current_response_time_percentile(0.95) or 0.0,2),
        "current_rps":round(getattr(s,"current_rps",0.0),2)
    }
    for (m,name),entry in env.stats.entries.items():
        if m!="RAI": continue
        snap[f"model::{name}"]={
            "num_requests":entry.num_requests,
            "num_failures":entry.num_failures,
            "avg_ms":round(entry.avg_response_time,2),
            "p50_ms":round(entry.get_current_response_time_percentile(0.50) or 0.0,2),
            "p95_ms":round(entry.get_current_response_time_percentile(0.95) or 0.0,2)
        }
    return snap

def main():
    log=_rot_logger(OUT); env=Environment(user_classes=[])
    off=_cp_read()
    os.makedirs(os.path.dirname(FEED),exist_ok=True)
    f=open(FEED,"a+",encoding="utf-8"); f.seek(off)
    last=time.time()
    try:
        while True:
            line=f.readline()
            if not line: time.sleep(0.25)
            else:
                off=f.tell()
                try:
                    r=json.loads(line)
                    model=str(r.get("model") or "UNKNOWN"); ok=bool(r.get("ok"))
                    lat=int(r.get("latency_ms") or 0)
                    e=env.stats.get("RAI",model)
                    if ok:
                        e.log_request("RAI",model,lat,0); env.stats.total.log_request("RAI",model,lat,0)
                    else:
                        e.num_failures+=1; env.stats.total.num_failures+=1
                        e.log_error(RuntimeError(r.get("error") or "error"))
                except: pass
            if time.time()-last>=SNAP_INT:
                last=time.time(); log.info(json.dumps(_snapshot(env))); _cp_write(off)
    except KeyboardInterrupt:
        _cp_write(off); f.close()

if __name__=="__main__": main()
