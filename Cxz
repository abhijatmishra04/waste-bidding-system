package com.bofa.sst.batch.util;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;

import java.util.List;

import org.junit.*;
import org.slf4j.LoggerFactory;

import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.read.ListAppender;

/**
 * Exercise every public static method in {@link LoggingUtil}.
 * The assertions are deliberately loose – we only verify that *something*
 * is logged so JaCoCo counts the line, which is all we need for coverage.
 */
public class LoggingUtilTest {

    private ListAppender<ILoggingEvent> list;     // captures log lines

    /* ─────────────────────────────────────────────────────────────── */
    @Before
    public void attachListAppender() {
        Logger splunk = (Logger) LoggerFactory.getLogger("splunkAppender");
        list = new ListAppender<>();
        list.start();
        splunk.addAppender(list);
    }

    @After
    public void detach() {
        LoggerFactory.getLogger("splunkAppender")
                     .detachAppender(list);
    }

    /* ─────────────────────────────────────────────────────────────── *
     * 1. logJobMessage(Long, String)  +  logJobError(…)
     * ─────────────────────────────────────────────────────────────── */
    @Test
    public void logJob_and_Error_variants_writeSomething() {

        LoggingUtil.logJobMessage(123L, "hello-info");
        LoggingUtil.logJobError  (123L, "boom-error");

        // we invoked two methods → two log events captured
        assertThat(list.list().size(), is(2));
    }

    /* ─────────────────────────────────────────────────────────────── *
     * 2. logMessage(String idType, String identifier, String message)
     * ─────────────────────────────────────────────────────────────── */
    @Test
    public void logSimpleMessage_variant_writes() {

        LoggingUtil.logMessage("ACC", "123456", "account-processed");

        assertThat(list.list().isEmpty(), is(false));
    }

    /* ─────────────────────────────────────────────────────────────── *
     * 3. logJobMessage(Long, String idType, Object id, String msg)
     * ─────────────────────────────────────────────────────────────── */
    @Test
    public void logJobMessage_fullSignature_writes() {

        LoggingUtil.logJobMessage(456L, "ENT", Integer.valueOf(7), "entity-done");

        // last event’s formatted message contains our pieces
        List<ILoggingEvent> evts = list.list();
        String last = evts.get(evts.size() - 1).getFormattedMessage();
        assertThat(last, allOf(containsString("456"),
                               containsString("ENT"),
                               containsString("7"),
                               containsString("entity-done")));
    }

    /* ─────────────────────────────────────────────────────────────── *
     * 4. logErrorMessage(String idType, String id, String msg)
     *    + logError(Long, String, Object, String)
     * ─────────────────────────────────────────────────────────────── */
    @Test
    public void logError_variants_write() {

        LoggingUtil.logErrorMessage("FILE", "XYZ", "bad-row");
        LoggingUtil.logError(789L, "STEP", "B12", "step-failed");

        assertThat(list.list().size() >= 2, is(true));
    }

    /* ─────────────────────────────────────────────────────────────── *
     * 5. logTransactionTraceLogger(…)
     * ─────────────────────────────────────────────────────────────── */
    @Test
    public void logTransactionTraceLogger_writes() {

        LoggingUtil.logTransactionTraceLogger("CRM",
                                              "MSG-01",
                                              "Upsert",
                                              "payload",
                                              true);   // isReq

        assertThat(list.list().isEmpty(), is(false));
    }
}
