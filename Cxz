
// ──────────────────────────────────────────────────────────────────────────────
// com/bofa/sst/batch/partition/CustaggFilePartitioner.java
// ──────────────────────────────────────────────────────────────────────────────
package com.bofa.sst.batch.partition;

import com.bofa.sst.batch.common.CustaggBatchConstants;
import com.bofa.sst.batch.common.CustaggBatchException;
import lombok.extern.log4j.Log4j2;
import org.apache.commons.io.FileUtils;
import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

@Log4j2
@Component
public class CustaggFilePartitioner implements Partitioner {

    @Value("${custag.input.file.path}")
    private String directoryPath;

    @Value("#{jobParameters['FilePrefixReferData']}")
    private String filePrefixReferData;

    @Override
    public Map<String,ExecutionContext> partition(int gridSize) {
        try {
            File dir = new File(directoryPath);
            File dataFile = FileUtils.listFiles(dir, null, false).stream()
                .filter(f -> f.getName().startsWith(filePrefixReferData))
                .findFirst()
                .orElseThrow(() ->
                    new CustaggBatchException("Refer-data file not found in " + directoryPath));

            long totalRecords = dataFile.length() / CustaggBatchConstants.RECORD_SIZE;
            long basePerPart  = totalRecords / gridSize;
            long remainder    = totalRecords % gridSize;

            Map<String,ExecutionContext> result = new HashMap<>(gridSize);
            long from = 1L;

            for (int i = 0; i < gridSize; i++) {
                long partSize = basePerPart + (i < remainder ? 1 : 0);
                long to       = partSize == 0 ? 0 : from + partSize - 1;

                ExecutionContext ctx = new ExecutionContext();
                ctx.putString("dataFile",      dataFile.getAbsolutePath());
                ctx.putLong("fromLine",        from);
                ctx.putLong("toLine",          to);
                ctx.putLong("numberOfRecords", partSize);

                result.put("partition" + i, ctx);
                log.debug("Partition {} ⇒ records {}–{} (count={})",
                          i, from, to, partSize);

                from = to + 1;
            }

            log.info("Partitioning complete: {} total records into {} partitions",
                     totalRecords, gridSize);
            return result;

        } catch (Exception e) {
            throw new CustaggBatchException("Error during file partitioning", e);
        }
    }
}
