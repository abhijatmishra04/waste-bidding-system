#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
RAI Gateway smoke test (tries multiple cfg formats automatically)
- Fills a temp config with your PAT-style fields
- Tries headerless, [gateway], and [DEFAULT] formats
- Calls chat.create(model=...) and prints the reply
"""

import sys, tempfile, textwrap, os

# ====== FILL THESE (TEST ONLY — DO NOT COMMIT REAL CREDS) ====================
HOST                = "https://<your-rai-host>"     # e.g., https://api-uat.statestr.com/
AUTH_TYPE           = "pat"
RAI_CLIENT_ID       = "<your_rai_client_id>"
EAM_CONSUMER_KEY    = "<your_eam_consumer_key>"
EAM_CONSUMER_SECRET = "<your_eam_consumer_secret>"
API_VERSION         = "1.0"
CLOUD_PROVIDER      = "azure"

MODEL_NAME          = "azure-openai.gpt-4o"         # a server-managed route name
USER_PROMPT         = "ping"
# ============================================================================

def _content_to_text(content):
    if isinstance(content, str):
        return content
    if isinstance(content, list) and content and isinstance(content[0], dict):
        return content[0].get("text", str(content[0]))
    return str(content)

def _write_cfg(text: str) -> str:
    tf = tempfile.NamedTemporaryFile(delete=False, suffix=".cfg")
    tf.write(text.encode("utf-8"))
    tf.flush(); tf.close()
    return tf.name

def _cfg_headerless():
    # No section header (some SDK builds expect exactly this)
    return textwrap.dedent(f"""\
    host={HOST}
    auth_type={AUTH_TYPE}
    rai_client_id={RAI_CLIENT_ID}
    eam_consumer_key={EAM_CONSUMER_KEY}
    eam_consumer_secret={EAM_CONSUMER_SECRET}
    api_version={API_VERSION}
    cloud_provider={CLOUD_PROVIDER}
    """)

def _cfg_gateway_section():
    # INI with [gateway] section (other builds expect a section)
    # NOTE: if any value contains ';' or '#', they are comment markers in INI.
    return textwrap.dedent(f"""\
    [gateway]
    host={HOST}
    auth_type={AUTH_TYPE}
    rai_client_id={RAI_CLIENT_ID}
    eam_consumer_key={EAM_CONSUMER_KEY}
    eam_consumer_secret={EAM_CONSUMER_SECRET}
    api_version={API_VERSION}
    cloud_provider={CLOUD_PROVIDER}
    """)

def _cfg_default_section():
    # Some configs are read from the DEFAULT section
    return textwrap.dedent(f"""\
    [DEFAULT]
    host={HOST}
    auth_type={AUTH_TYPE}
    rai_client_id={RAI_CLIENT_ID}
    eam_consumer_key={EAM_CONSUMER_KEY}
    eam_consumer_secret={EAM_CONSUMER_SECRET}
    api_version={API_VERSION}
    cloud_provider={CLOUD_PROVIDER}
    """)

def main():
    try:
        from ssrai import SSRAIClient
    except Exception as e:
        print("❌ Could not import ssrai. Install it from your internal index: pip install ssrai")
        print(f"Details: {e}")
        sys.exit(1)

    formats = [
        ("headerless", _cfg_headerless()),
        ("[gateway]", _cfg_gateway_section()),
        ("[DEFAULT]", _cfg_default_section()),
    ]

    last_err = None
    client = None
    cfg_used = None

    for name, body in formats:
        path = _write_cfg(body)
        try:
            client = SSRAIClient(config_file=path)
            cfg_used = name
            break
        except Exception as e:
            last_err = e
            try:
                os.remove(path)
            except Exception:
                pass

    if client is None:
        print(f"❌ Failed to load config in all tested formats. Last error:\n{last_err}")
        print("Tips:")
        print("- Ensure AUTH fields are correct and not empty.")
        print("- If keys contain ';' or '#', prefer the HEADERLESS format.")
        print("- Verify HOST is reachable from this machine/network.")
        sys.exit(1)

    print(f"✅ Loaded config using format: {cfg_used}")

    # Optional: list routes to confirm the model name
    lister = getattr(client.model, "search", None) or getattr(client.model, "list", None)
    try:
        if callable(lister):
            print("Available routes:", lister())
    except Exception:
        pass

    messages = [
        {"role": "system", "content": "Reply with the single token 'pong'."},
        {"role": "user",   "content": [{"type": "text", "text": USER_PROMPT}]},
    ]

    try:
        resp = client.chat.create(
            model=MODEL_NAME,
            messages=messages,
            max_tokens=16,
            temperature=0.0,
            n=1,
        )
        text = _content_to_text(resp["choices"][0]["message"].get("content", ""))

        print("\n=== Gateway reply ===")
        print(text)

        if "pong" in text.lower():
            print("\n✅ RAI model call succeeded.")
            sys.exit(0)
        else:
            print("\n⚠️ Route works but reply isn’t 'pong' (guardrails/policies may modify output).")
            sys.exit(0)

    except Exception as e:
        print(f"❌ Chat call failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
