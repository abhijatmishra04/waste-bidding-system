@Override
@Bean
@StepScope
public FlatFileItemWriter<SdaInputDto> flatFileItemWriter() {
    log.info("SdaItemWriterImpl ::: flatFileItemWriter() ::: Thread Id: {}, Thread name: {}",
        Thread.currentThread().getId(), Thread.currentThread().getName());

    try {
        String threadParam = Thread.currentThread().getId() + "_" +
                             Thread.currentThread().getName() + "_" +
                             new Random().nextInt();

        FlatFileItemWriter<SdaInputDto> itemWriter = new FlatFileItemWriter<>();

        itemWriter.setName("SDA_Request_Writer");
        itemWriter.setResource(new FileSystemResource(outputFlatFilePath + BatchConstants.SDA_INTERIM_FILE + threadParam));

        FormatterLineAggregator<SdaInputDto> formatterAggregator = new FormatterLineAggregator<>();

        BeanWrapperFieldExtractor<SdaInputDto> extractor = new BeanWrapperFieldExtractor<>();
        extractor.setNames(SdaInputDto.outputFields());

        formatterAggregator.setFieldExtractor(extractor);
        formatterAggregator.setFormat(aggregatorFormat);

        itemWriter.setLineAggregator(formatterAggregator);

        log.info("SdaItemWriterImpl ::: flatFileItemWriter() ::: Exit");

        return itemWriter;

    } catch (Exception e) {
        log.error(LoggingUtil.logJobMessage("SdaItemWriterImpl ::: flatFileItemWriter() ::: Failed", e.getMessage()), e);

        // Handle the error gracefully â€” either:
        // 1. Rethrow with a RuntimeException if failure should stop the job:
        throw new RuntimeException("Local exception: Failed to initialize FlatFileItemWriter", e);

        // OR
        // 2. Return null or a no-op writer if you want to continue without writing:
        // return new FlatFileItemWriter<>(); // (Only if valid in your use case)
    }
}
