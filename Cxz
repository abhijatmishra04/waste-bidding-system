# Production-grade Locustfile integrating RAIGatewayClient with thresholds.
#
# Example:
#   locust -f locustfile.py --headless -u 10 -r 2 -t 1m --host https://your-rai-gateway.example.com
#
# Env thresholds (optional):
#   RAI_P95_THRESHOLD_MS=2000
#   RAI_MAX_FAILURE_RATE_PCT=1.0
#
import os
import time
from locust import HttpUser, task, between, events
from typing import Dict, Any
from rai_gateway_client import RAIGatewayClient, RAIError

# ---- Custom Event: rai_failure ----
try:
    from locust.event import EventHook  # Locust >= 2.0 (best effort import)
    events.rai_failure = EventHook()
except Exception:
    class _DummyHook:
        def __init__(self):
            self._handlers = []
        def fire(self, **kw):
            for h in self._handlers:
                h(**kw)
        def add_listener(self, fn):
            self._handlers.append(fn)
    events.rai_failure = _DummyHook()

failure_counter = {"count": 0}

def _on_rai_failure(**kwargs):
    failure_counter["count"] += 1

try:
    events.rai_failure.add_listener(_on_rai_failure)
except Exception:
    pass

class RAIUser(HttpUser):
    wait_time = between(0.2, 1.0)

    def on_start(self):
        base_url = self.environment.host.rstrip("/") if self.environment.host else "http://localhost:8000"
        token_url = os.getenv("RAI_TOKEN_URL")  # e.g., https://apigee.example.com/oauth/token
        client_id = os.getenv("RAI_OAUTH_CLIENT_ID")
        client_secret = os.getenv("RAI_OAUTH_CLIENT_SECRET")
        rai_client_id = os.getenv("RAI_CLIENT_ID", "demo-app")

        def on_failure(payload: Dict[str, Any]):
            try:
                events.rai_failure.fire(**payload)
                events.request_failure.fire(
                    request_type="POST",
                    name="/gateway/chat (utility)",
                    response_time=0,
                    response_length=0,
                    exception=RAIError("Call.Failed", payload.get("error", "unknown error")),
                )
            except Exception:
                pass

        self.client_util = RAIGatewayClient(
            base_url=base_url,
            token_url=token_url,
            client_id=client_id,
            client_secret=client_secret,
            rai_client_id=rai_client_id,
            default_guardrail_profile=os.getenv("RAI_GUARDRAIL_PROFILE", "WITH_GUARDRAIL"),
            max_retries=int(os.getenv("RAI_MAX_RETRIES", "3")),
            backoff_base_seconds=float(os.getenv("RAI_BACKOFF_BASE", "0.5")),
            backoff_max_seconds=float(os.getenv("RAI_BACKOFF_MAX", "8.0")),
            max_total_retry_seconds=float(os.getenv("RAI_MAX_TOTAL_RETRY_S", "30")),
            connect_timeout_seconds=float(os.getenv("RAI_CONNECT_TIMEOUT", "3")),
            read_timeout_seconds=float(os.getenv("RAI_READ_TIMEOUT", "60")),
            metrics_window_size=int(os.getenv("RAI_METRICS_WINDOW", "5000")),
            breaker_fail_threshold=int(os.getenv("RAI_BREAKER_FAIL_THRESHOLD", "10")),
            breaker_half_open_after=float(os.getenv("RAI_BREAKER_HALF_OPEN_AFTER", "30")),
            on_failure=on_failure,
            extra_log_fields={"locust": True},
        )

        self.model = os.getenv("RAI_MODEL", "gpt-4o-mini")

        # Thresholds
        self.p95_threshold_ms = float(os.getenv("RAI_P95_THRESHOLD_MS", "0"))  # 0 means disabled
        self.max_failure_rate_pct = float(os.getenv("RAI_MAX_FAILURE_RATE_PCT", "0"))

    @task
    def chat_task(self):
        messages = [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": "Return a short JSON with a random number."},
        ]
        t0 = time.perf_counter()
        try:
            resp = self.client_util.call_chat(messages=messages, model=self.model)
            dt_ms = (time.perf_counter() - t0) * 1000.0
            events.request_success.fire(
                request_type="POST",
                name="/gateway/chat (utility)",
                response_time=dt_ms,
                response_length=len(str(resp)),
            )
        except Exception as e:
            dt_ms = (time.perf_counter() - t0) * 1000.0
            events.request_failure.fire(
                request_type="POST",
                name="/gateway/chat (utility)",
                response_time=dt_ms,
                response_length=0,
                exception=e,
            )

    def on_stop(self):
        metrics = self.client_util.get_metrics()
        print("\n==== RAI UTILITY METRICS ====")
        print(metrics)
        print("Custom rai_failure count:", failure_counter["count"])
        print("================================\n")

        # Simple threshold gating (print warnings; CI can parse stdout)
        if self.p95_threshold_ms > 0 and metrics.get("p95_latency_ms", 0) > self.p95_threshold_ms:
            print(f"[THRESHOLD] p95 {metrics.get('p95_latency_ms')}ms > {self.p95_threshold_ms}ms")
        if self.max_failure_rate_pct > 0 and (100.0 - metrics.get("success_rate_pct", 100.0)) > self.max_failure_rate_pct:
            print(f"[THRESHOLD] failure_rate {(100.0 - metrics.get('success_rate_pct', 100.0))}% > {self.max_failure_rate_pct}%")
