#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys, tempfile, textwrap

# ====== FILL THESE (TEST ONLY) ==============================================
HOST                = "https://<your-rai-host>"    # e.g., https://api-uat.statestr.com/
AUTH_TYPE           = "pat"
RAI_CLIENT_ID       = "<your_rai_client_id>"
EAM_CONSUMER_KEY    = "<your_eam_consumer_key>"
EAM_CONSUMER_SECRET = "<your_eam_consumer_secret>"
API_VERSION         = "1.0"
CLOUD_PROVIDER      = "azure"

# A route name already registered on the gateway (use one returned by .model.search())
MODEL_NAME          = "azure-openai.gpt-4o"
USER_PROMPT         = "ping"
# ============================================================================

def _write_cfg_ini() -> str:
    """Create a temp INI config with the required section header."""
    cfg_text = textwrap.dedent(f"""\
    [gateway]
    host={HOST}
    auth_type={AUTH_TYPE}
    rai_client_id={RAI_CLIENT_ID}
    eam_consumer_key={EAM_CONSUMER_KEY}
    eam_consumer_secret={EAM_CONSUMER_SECRET}
    api_version={API_VERSION}
    cloud_provider={CLOUD_PROVIDER}
    """)
    tf = tempfile.NamedTemporaryFile(delete=False, suffix=".cfg")
    tf.write(cfg_text.encode("utf-8"))
    tf.flush(); tf.close()
    return tf.name

def _content_to_text(content):
    if isinstance(content, str):
        return content
    if isinstance(content, list) and content and isinstance(content[0], dict):
        return content[0].get("text", str(content[0]))
    return str(content)

def main():
    try:
        cfg_path = _write_cfg_ini()
        from ssrai import SSRAIClient

        cli = SSRAIClient(config_file=cfg_path)

        # Optional: list available routes
        lister = getattr(cli.model, "search", None) or getattr(cli.model, "list", None)
        if callable(lister):
            try:
                print("Available routes from gateway:", lister())
            except Exception:
                pass

        messages = [
            {"role": "system", "content": "Reply with the single token 'pong'."},
            {"role": "user",   "content": [{"type": "text", "text": USER_PROMPT}]},
        ]

        resp = cli.chat.create(
            model=MODEL_NAME,
            messages=messages,
            max_tokens=16,
            temperature=0.0,
            n=1,
        )
        text = _content_to_text(resp["choices"][0]["message"].get("content", ""))

        print("\n=== Gateway reply ===")
        print(text)
        if "pong" in text.lower():
            print("\n✅ RAI model call succeeded."); sys.exit(0)
        else:
            print("\n⚠️ Route works but reply isn’t 'pong' (guardrails may modify output)."); sys.exit(0)

    except Exception as e:
        print(f"❌ Smoke test failed: {e}"); sys.exit(1)

if __name__ == "__main__":
    main()
