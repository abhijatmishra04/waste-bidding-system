1.	Read job parameters
– Get the working folder path and the file-name prefix from the job context.
	2.	Create a run-specific audit file
– Build a unique name such as DeleteBin_<YYYYMMDD_HHMMSS>.txt and open it for writing.
	3.	Write the audit-file header
– Add a single header line that carries the current timestamp and a fixed identifier.
	4.	Identify BINs to purge
– Query the database for every BIN that exists in the BIN table but is missing from today’s input file.
	5.	Log each obsolete BIN
– For every BIN returned by the query, write one detail line into the audit file that lists the key fields (Bank ID, host number, ISU number, product-brand code, etc.).
– Increment a running counter as each line is written.
	6.	Write the audit-file footer
– After the last detail line, add a trailer line in the format T<record-count> to show exactly how many BINs are listed.
	7.	Delete the obsolete rows
– Issue a single batched DELETE statement to remove all BINs identified in Step 4 from the database.
	8.	Record the outcome
– Store the total number of rows deleted in the job’s execution context for later reporting.
	9.	Close and flush the audit file
– Ensure the header, detail lines, and footer are safely written to disk.
	10.	Finish and report
– Log a final “Delete operation completed” message and mark the tasklet as successfully completed.
