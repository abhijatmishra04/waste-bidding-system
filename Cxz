public JdbcPagingItemReader<SdaInputDto> getJdbcPagingItemReader(
        @Value("#{stepExecutionContext['fromLine']}") Integer fromLine,
        @Value("#{stepExecutionContext['toLine']}") Integer toLine) throws Exception {

    log.info("JdbcPagingItemReader :: start");

    JdbcPagingItemReader<SdaInputDto> reader = new JdbcPagingItemReader<>();
    try {
        reader.setDataSource(dataSource);
        reader.setFetchSize(fetchSize);
        reader.setRowMapper(rowMapper());
        reader.setPageSize(pageSize);

        log.info("OraclePagingQueryProvider started");

        OraclePagingQueryProvider provider = new OraclePagingQueryProvider();
        provider.setSelectClause(SQLFactory.SELECT_CLAUSE);
        provider.setFromClause(SQLFactory.FROM_SCHEDULE_M2M_AND_ACCOUNT_M2M);
        provider.setWhereClause(SQLFactory.WHERE_CLAUSE_SEQUENC_NUM + fromLine + SQLFactory.AND_PHRASE + toLine);

        Map<String, Order> orderById = new HashMap<>();
        orderById.put(SQLFactory.ORDER_BY_SEQUENCE_NUM, Order.ASCENDING);
        provider.setSortKeys(orderById);
        reader.setQueryProvider(provider);

        log.info(LoggingUtil.logJobMessage("SDA REQUEST ITEM READER", "reader completed"));
    } catch (Exception e) {
        log.error(LoggingUtil.logJobMessage("SDA REQUEST ITEM READER", "Error initializing reader: " + e.getMessage()), e);

        // Custom local handling logic (e.g., return null or a fallback reader)
        // If reader is critical, you can stop execution:
        throw new RuntimeException("Local exception: Failed to initialize OraclePagingQueryProvider", e);
    }

    return reader;
}
