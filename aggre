@Data
public class RetrievalDTO {

    private String transactionReferenceId; // RETR-STB-TRAN-REF-ID  -> TRAN REF ID
    private String accountNumber;          // RETR-STB-ACCOUNT-NUMBER -> CC-ACCOUNT NUMBER
    private String paymentType;            // RETR-STB-PAYMENT-TYPE -> PAYMENT TYPE
    private String dueDate;                // RETR-STB-DUE-DATE -> DUE DATE
    private Long HangingDays;              // RETR-STB-HANGING-DAYS -> HANGING DAYS
    private String marketId;               // RETR-STB-MARKET-ID -> MARKET ID
    private String createTimestamp;        // RETR-STB-CREATE-TIMESTAMP -> CREATE TIMESTAMP

    // This method returns only the fields present in the screenshot to be mapped to the output file.
    public static String[] outputFields() {
        return new String[] {
            "transactionReferenceId", // Maps to TRAN REF ID in the flat file
            "accountNumber",          // Maps to CC-ACCOUNT NUMBER in the flat file
            "paymentType",            // Maps to PAYMENT TYPE in the flat file
            "dueDate",                // Maps to DUE DATE in the flat file
            "HangingDays",            // Maps to HANGING DAYS in the flat file
            "marketId",               // Maps to MARKET ID in the flat file
            "createTimestamp"         // Maps to CREATE TIMESTAMP in the flat file
        };
    }
}

formatterAggregator.setFormat("%-10s%-20s%-5s%-10s%-10s%-4s%-26s");


@Bean(name = "dayPlusOneWriter")
@StepScope
public FlatFileItemWriter<RetrievalDTO> dayPlusOneWriter() {
    Log.info("dayPlusOneWriter ::: flatFileItemWriter() :: Thread Id: {}, Thread name: {}",
            Thread.currentThread().getId(), Thread.currentThread().getName());

    String threadParam = Thread.currentThread().getId() + "-" + Thread.currentThread().getName() + "-" + new Random().nextInt();

    this.outputFlatFilePath = dynamicConfigPropRepository
            .findPropertyValueByPropertyName("collectionletters.output.flat.file.path");
    this.aggregatorFormat = dynamicConfigPropRepository
            .findPropertyValueByPropertyName("collectionletters.aggregator.format");
    this.flatfileWriterName = dynamicConfigPropRepository
            .findPropertyValueByPropertyName("collectionletters.flatfile.writer.name");

    FlatFileItemWriter<RetrievalDTO> itemWriter = new FlatFileItemWriter<>();

    // Counter to keep track of records
    AtomicInteger recordCount = new AtomicInteger();

    itemWriter.setHeaderCallback(new FlatFileHeaderCallback() {
        @Override
        public void writeHeader(Writer header) throws IOException {
            header.write(SdpRespConstants.HANGING_HEADER1);
            Log.info("dayPlusOneWriter ::: flatFileItemWriter() ::: Headers are set :::" + header);
        }
    });

    itemWriter.setFooterCallback(new FlatFileFooterCallback() {
        @Override
        public void writeFooter(Writer footer) throws IOException {
            // Write the record count in the trailer/footer
            footer.write(SdpRespConstants.SST_REC_ID_TLR + SdpRespConstants.SPACES_172);
            footer.write(String.format("Total Record Count: %d", recordCount.get()));
            Log.info("dayPlusOneWriter ::: flatFileItemWriter() ::: Footers are set :::" + footer);
        }
    });

    itemWriter.setName(flatfileWriterName);
    itemWriter.setResource(new FileSystemResource(outputFlatFilePath + "/" + threadParam + "dayPlusOneWriter.txt"));

    FormatterLineAggregator<RetrievalDTO> formatterAggregator = new FormatterLineAggregator<>();
    BeanWrapperFieldExtractor<RetrievalDTO> extractor = new BeanWrapperFieldExtractor<>();
    extractor.setNames(RetrievalDTO.outputFields());
    formatterAggregator.setFieldExtractor(extractor);
    formatterAggregator.setFormat(aggregatorFormat);
    itemWriter.setLineAggregator(formatterAggregator);

    // Increment record count on each record write
    itemWriter.setAfterWriteListener(new ItemWriteListener<RetrievalDTO>() {
        @Override
        public void afterWrite(List<? extends RetrievalDTO> items) {
            recordCount.addAndGet(items.size());
        }
    });

    Log.info("dayPlusOneWriter ::: flatFileItemWriter() ::: writer Object ::: {}", itemWriter);

    return itemWriter;
}





import lombok.extern.log4j.Log4j2;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.DayOfWeek;
import java.util.concurrent.atomic.AtomicInteger;

@Component
@Log4j2
public class RetrievalDTOProcessor implements ItemProcessor<RetrievalDTO, RetrievalDTO> {

    private static final AtomicInteger recordCounter = new AtomicInteger(0); // Record counter
    private static final String DATE_FORMAT = "yyyyMMdd"; // Assuming dueDate is in this format

    @Override
    public RetrievalDTO process(RetrievalDTO item) throws Exception {
        // Log when a record starts being processed
        log.info("Starting to process record: {}", item.getDetailRecordId());

        // Step 1: Filter records
        if (!"COL".equals(item.getSubChannel()) || Double.parseDouble(item.getStatementBalance()) <= 0.0) {
            log.info("Record with ID {} is being filtered out due to subChannel or statement balance.", item.getDetailRecordId());
            return null; // Skip invalid records
        }

        // Step 2: Calculate the hanging days
        LocalDate dueDate = LocalDate.parse(item.getDueDate(), DateTimeFormatter.ofPattern(DATE_FORMAT));
        LocalDate currentDate = LocalDate.now();
        DayOfWeek dayOfWeek = currentDate.getDayOfWeek();
        long hangingDays;

        if (dayOfWeek == DayOfWeek.SUNDAY) {
            // If today is Sunday, calculate hanging days based on a 6-day difference
            hangingDays = ChronoUnit.DAYS.between(dueDate.minusDays(6), currentDate);
            log.info("Hanging days for record {} calculated as {} (Sunday adjustment).", item.getDetailRecordId(), hangingDays);
        } else {
            // Otherwise, use a 5-day difference
            hangingDays = ChronoUnit.DAYS.between(dueDate.minusDays(5), currentDate);
            log.info("Hanging days for record {} calculated as {} (Weekday adjustment).", item.getDetailRecordId(), hangingDays);
        }

        // Increment the record count for each valid record
        int currentCount = recordCounter.incrementAndGet();
        log.info("Record count after processing record {}: {}", item.getDetailRecordId(), currentCount);

        // Step 3: Map fields to a new DTO
        RetrievalDTO reportDTO = new RetrievalDTO();
        reportDTO.setDetailRecordId(item.getDetailRecordId());
        reportDTO.setHangingDays(hangingDays);
        reportDTO.setPaymentType(item.getPaymentType());
        reportDTO.setAccountNumber(item.getAccountNumber());
        reportDTO.setConfirmationNumber(item.getConfirmationNumber());
        reportDTO.setDueDate(item.getDueDate());
        reportDTO.setMarketId(item.getMarketId());
        reportDTO.setCreateTimestamp(item.getCreateTimestamp());

        // Log that the record has been processed successfully
        log.info("Record {} processed successfully.", item.getDetailRecordId());

        return reportDTO;
    }

    // Method to get the total processed record count
    public static int getTotalRecordCount() {
        return recordCounter.get();
    }
}



import lombok.extern.log4j.Log4j2;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.DayOfWeek;
import java.util.concurrent.atomic.AtomicInteger;

@Component
@Log4j2
public class RetrievalDTOProcessor implements ItemProcessor<RetrievalDTO, RetrievalDTO> {

    private static final AtomicInteger recordCounter = new AtomicInteger(0); // Record counter
    private static final String DATE_FORMAT = "yyyyMMdd"; // Assuming dueDate is in this format

    @Override
    public RetrievalDTO process(RetrievalDTO item) throws Exception {
        // Step 1: Filter records
        if (!"COL".equals(item.getSubChannel()) || Double.parseDouble(item.getStatementBalance()) <= 0.0) {
            log.info("Record with DetailRecordId {} is being filtered out due to subChannel or statement balance.", item.getDetailRecordId());
            return null; // Skip invalid records
        }

        // Increment the record count for each valid record
        int currentCount = recordCounter.incrementAndGet();
        log.info("Processing valid record #{}", currentCount);

        // Step 2: Calculate the hanging days
        LocalDate dueDate = LocalDate.parse(item.getDueDate(), DateTimeFormatter.ofPattern(DATE_FORMAT));
        LocalDate currentDate = LocalDate.now();
        DayOfWeek dayOfWeek = currentDate.getDayOfWeek();
        long hangingDays;

        if (dayOfWeek == DayOfWeek.SUNDAY) {
            // If today is Sunday, calculate hanging days based on a 6-day difference
            hangingDays = ChronoUnit.DAYS.between(dueDate.minusDays(6), currentDate);
            log.info("Hanging days for valid record #{} calculated as {} (Sunday adjustment).", currentCount, hangingDays);
        } else {
            // Otherwise, use a 5-day difference
            hangingDays = ChronoUnit.DAYS.between(dueDate.minusDays(5), currentDate);
            log.info("Hanging days for valid record #{} calculated as {} (Weekday adjustment).", currentCount, hangingDays);
        }

        // Step 3: Map fields to a new DTO
        RetrievalDTO reportDTO = new RetrievalDTO();
        reportDTO.setDetailRecordId("D");  // DetailRecordId is constant "D"
        reportDTO.setHangingDays(hangingDays);
        reportDTO.setPaymentType(item.getPaymentType());
        reportDTO.setAccountNumber(item.getAccountNumber());
        reportDTO.setConfirmationNumber(item.getConfirmationNumber());
        reportDTO.setDueDate(item.getDueDate());
        reportDTO.setMarketId(item.getMarketId());
        reportDTO.setCreateTimestamp(item.getCreateTimestamp());

        // Log that the record has been processed successfully
        log.info("Valid record #{} processed successfully.", currentCount);

        return reportDTO;
    }

    // Method to get the total processed valid record count
    public static int getTotalRecordCount() {
        return recordCounter.get();
    }
}


@Bean(name = "dayPlusOneWriter")
@StepScope
public FlatFileItemWriter<RetrievalDTO> dayPlusOneWriter() {
    Log.info("dayPlusOneWriter ::: flatFileItemWriter() :: Thread Id: {}, Thread name: {}",
            Thread.currentThread().getId(), Thread.currentThread().getName());

    String threadParam = Thread.currentThread().getId() + "-" + Thread.currentThread().getName() + "-" + new Random().nextInt();

    this.outputFlatFilePath = dynamicConfigPropRepository
            .findPropertyValueByPropertyName("collectionletters.output.flat.file.path");
    this.aggregatorFormat = dynamicConfigPropRepository
            .findPropertyValueByPropertyName("collectionletters.aggregator.format");
    this.flatfileWriterName = dynamicConfigPropRepository
            .findPropertyValueByPropertyName("collectionletters.flatfile.writer.name");

    FlatFileItemWriter<RetrievalDTO> itemWriter = new FlatFileItemWriter<>();
    itemWriter.setName(flatfileWriterName);

    String fullFilePath = outputFlatFilePath + "/" + threadParam + "dayPlusOneWriter.txt";
    itemWriter.setResource(new FileSystemResource(fullFilePath));

    // Set the header
    itemWriter.setHeaderCallback(writer -> {
        writer.write("LIST OF CREDIT ASSISTANCE PTUI CC AUTOPAY PAYMENTS THAT ARE...\n");
        writer.write("TRAN REF ID    | CC-ACCOUNT NUMBER     | PAYMENT TYPE | DUE DATE   | HANGING DAYS | MARKET ID | CREATE TIMESTAMP\n");
        writer.write("---------------------------------------------------------------------------------------------------------------\n");
    });

    // Set the footer callback to write the total record count
    itemWriter.setFooterCallback(writer -> {
        int totalRecordCount = RetrievalDTOProcessor.getTotalRecordCount(); // Get the total valid record count from the processor
        writer.write("T TOTAL RECORD COUNT " + String.format("%015d", totalRecordCount) + "\n");
        log.info("Footer added with total valid record count: {}", totalRecordCount);
    });

    // Set the LineAggregator for formatting the records
    FormatterLineAggregator<RetrievalDTO> formatterAggregator = new FormatterLineAggregator<>();
    BeanWrapperFieldExtractor<RetrievalDTO> extractor = new BeanWrapperFieldExtractor<>();
    extractor.setNames(RetrievalDTO.outputFields());
    formatterAggregator.setFieldExtractor(extractor);
    formatterAggregator.setFormat(aggregatorFormat);
    itemWriter.setLineAggregator(formatterAggregator);

    Log.info("dayPlusOneWriter ::: flatFileItemWriter() ::: writer Object ::: {}", itemWriter);

    return itemWriter;
}

  int totalRecordCount = RetrievalDTOProcessor.getTotalRecordCount(); // Get the total valid record count from the processor
        writer.write("T TOTAL RECORD COUNT " + String.format("%015d", totalRecordCount) + "\n");
        log.info("Footer added with total valid record count: {}", totalRecordCount);





import lombok.extern.log4j.Log4j2;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Log4j2
@Component
public class SdpRespJobListener implements JobExecutionListener {

    @Autowired
    protected M2MDynamicConfigPropertiesRepository dynamicConfigPropertiesRepository;

    @Autowired
    private FileWriterService exceptionWriter;

    @Autowired
    private SDPExceptionHandlerService exceptionHandler;

    @Override
    public void beforeJob(JobExecution jobExecution) {
        log.trace("SdpRespJobListener ::: beforeJob ::: Entry");

        // Get ExecutionContext
        ExecutionContext context = jobExecution.getExecutionContext();

        try {
            // Example: Initialize some file properties if needed
            exceptionWriter.initFileProperties();
            exceptionWriter.writeHeader();
        } catch (IOException e) {
            log.error("SdpRespJobListener ::: beforeJob :: Exception in creating exception file", e);
            jobExecution.setExitStatus(new ExitStatus("FAILED", "Exception File Creation Issue"));
        }

        // Fetch and add necessary file paths and names for the aggregation tasklet
        String outputDirectory = dynamicConfigPropertiesRepository
                .findPropertyValueByPropertyName("collectionletters.output.flat.file.path");

        // File names for the files to aggregate
        String dayPlusOneFileName = "dayPlusOneWriter.txt";
        String moreThan7DaysFileName = "moreThan7DaysWriter.txt";
        String moreThan25DaysFileName = "moreThan25DaysWriter.txt";

        // Add properties to the ExecutionContext
        context.putString("outputDirectory", outputDirectory);
        context.putString("dayPlusOneFileName", dayPlusOneFileName);
        context.putString("moreThan7DaysFileName", moreThan7DaysFileName);
        context.putString("moreThan25DaysFileName", moreThan25DaysFileName);

        // Additional context properties as per the existing logic
        String customerType = jobExecution.getJobParameters().getString(SdpRespConstants.JOB_TYPE);
        String bacardiFilePath = dynamicConfigPropertiesRepository
                .findPropertyValueByPropertyName(SdpRespConstants.BACARDI_FILE_DIRECTORY_PATH);
        String requestFilePath = dynamicConfigPropertiesRepository
                .findPropertyValueByPropertyName(SdpRespConstants.SDP_REQUEST_FILE_DIRECTORY_PATH);
        String jobID = jobExecution.getJobId().toString();
        context.putString(SdpRespConstants.JOB_ID, jobID);
        context.putString(SdpRespConstants.BACARDI_RESPONSE_DIRECTORY_PATH, bacardiFilePath);
        context.putString(SdpRespConstants.SDP_REQUEST_DIRECTORY_PATH, requestFilePath);

        // Job-specific logic for file prefixes
        if (SdpRespConstants.CONSUMER.equalsIgnoreCase(customerType)) {
            context.putString(SdpRespConstants.BACARDI_RESPONSE_FILE_PREFIX,
                    dynamicConfigPropertiesRepository.findPropertyValueByPropertyName(SdpRespConstants.BACARDI_CONSUMER_FILE_PREFIX));
            context.putString(SdpRespConstants.SDP_REQUEST_FILE_PREFIX,
                    SdpRespConstants.CONSUMER_SDPREQUEST_FILE_PREFIX);
        } else {
            context.putString(SdpRespConstants.BACARDI_RESPONSE_FILE_PREFIX,
                    dynamicConfigPropertiesRepository.findPropertyValueByPropertyName(SdpRespConstants.BACARDI_SMB_FILE_PREFIX));
            context.putString(SdpRespConstants.SDP_REQUEST_FILE_PREFIX,
                    SdpRespConstants.SMB_SDPREQUEST_FILE_PREFIX);
        }

        log.trace("SdpRespJobListener ::: beforeJob ::: Exit");
    }

    @Override
    public void afterJob(JobExecution jobExecution) {
        log.trace("SdpRespJobListener ::: afterJob ::: Entry");

        // Check job completion status and retrieve execution context details
        if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
            ExecutionContext context = jobExecution.getExecutionContext();
            int readCount = context.getInt(SdpRespConstants.READ_COUNT, 0);
            int writeCount = context.getInt(SdpRespConstants.WRITE_COUNT, 0);
            int skipCount = context.getInt(SdpRespConstants.SKIP_COUNT, 0);

            log.debug("SdpRespJobListener ::: afterJob :: Records Read: {}, Records Skipped: {}, Records Written: {}",
                    readCount, skipCount, writeCount);

            // Archive file logic or unlock file, if needed
            String filePrefix = jobExecution.getExecutionContext().getString(SdpRespConstants.BACARDI_RESPONSE_FILE_PREFIX);
            String directoryPath = jobExecution.getExecutionContext().getString(SdpRespConstants.BACARDI_RESPONSE_DIRECTORY_PATH);
            LocalDate date = LocalDate.now();
            if (date.getDayOfWeek().equals(DayOfWeek.MONDAY)) {
                date = date.minusDays(1);
            }

            FileUtils.unlockFile(directoryPath, filePrefix, SdpRespConstants.LOCK_FILE_EXTENSION, date);
            FileUtils.archiveFile(directoryPath, filePrefix, SdpRespConstants.INPUT_FILE_EXTENSION, date);

        } else {
            // Error handling if the job fails
            log.error("SdpRespJobListener ::: afterJob :: Job failed with status: {}", jobExecution.getStatus());
        }

        log.trace("SdpRespJobListener ::: afterJob ::: Exit");
    }
}




import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.mapping.FieldSetMapper;
import org.springframework.batch.item.file.transform.FixedLengthTokenizer;

public class RetrievalDTOItemReaderTest {

    @InjectMocks
    private RetrievalDTOItemReader retrievalDTOItemReader;

    @Mock
    private Map<Integer, Integer> fieldRanges;

    @Mock
    private String[] fieldNames;

    @Mock
    private String inputFilePath;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        fieldNames = new String[] { "field1", "field2", "field3" };
        inputFilePath = "/dummy/path.txt";
    }

    @Test
    public void testGetFlatFileItemReader() throws Exception {
        // This will invoke the method to ensure it is covered by the test
        FlatFileItemReader<RetrievalDTO> reader = retrievalDTOItemReader.getFlatFileItemReader();
        assertNotNull(reader);  // Minimal assertion just to avoid unused variable warning
    }

    @Test
    public void testLineMapper() throws Exception {
        // Calling the method to ensure it's covered
        DefaultLineMapper<RetrievalDTO> lineMapper = retrievalDTOItemReader.lineMapper();
        assertNotNull(lineMapper);  // Minimal assertion
    }

    @Test
    public void testFieldSetMapper() throws Exception {
        // Call the method to ensure it's covered
        FieldSetMapper<RetrievalDTO> fieldSetMapper = retrievalDTOItemReader.fieldSetMapper();
        assertNotNull(fieldSetMapper);  // Minimal assertion
    }

    @Test
    public void testGetRanges() throws Exception {
        // Call the method to ensure coverage
        Range[] ranges = retrievalDTOItemReader.getRanges();
        assertNotNull(ranges);  // Minimal assertion
    }
}


import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.mapping.FieldSetMapper;
import org.springframework.batch.item.file.transform.FixedLengthTokenizer;
import org.springframework.core.io.FileSystemResource;

public class RetrievalDTOItemReaderTest {

    @InjectMocks
    private RetrievalDTOItemReader retrievalDTOItemReader;

    @Mock
    private Map<Integer, Integer> fieldRanges;

    @Mock
    private String[] fieldNames;

    @Mock
    private String inputFilePath;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(fieldRanges.size()).thenReturn(3);
        when(fieldRanges.entrySet()).thenReturn(createFieldRanges());
        fieldNames = new String[] { "field1", "field2", "field3" };
        inputFilePath = "/some/path/to/file.txt";
    }

    private Map<Integer, Integer> createFieldRanges() {
        Map<Integer, Integer> ranges = new HashMap<>();
        ranges.put(0, 10);
        ranges.put(11, 20);
        ranges.put(21, 30);
        return ranges;
    }

    @Test
    public void testGetFlatFileItemReader() throws Exception {
        FlatFileItemReader<RetrievalDTO> itemReader = retrievalDTOItemReader.getFlatFileItemReader();

        assertNotNull(itemReader);
        assertEquals("RetrievalDTOItemReader", itemReader.getName());
        assertTrue(itemReader.getResource() instanceof FileSystemResource);
        assertEquals(inputFilePath, ((FileSystemResource) itemReader.getResource()).getPath());
    }

    @Test
    public void testLineMapper() throws Exception {
        DefaultLineMapper<RetrievalDTO> lineMapper = retrievalDTOItemReader.lineMapper();

        assertNotNull(lineMapper);
        assertTrue(lineMapper.getLineTokenizer() instanceof FixedLengthTokenizer);

        FixedLengthTokenizer tokenizer = (FixedLengthTokenizer) lineMapper.getLineTokenizer();
        assertArrayEquals(fieldNames, tokenizer.getNames());
        assertEquals(3, tokenizer.getColumns().length);  // assuming 3 columns

        assertTrue(lineMapper.getFieldSetMapper() instanceof FieldSetMapper);
    }

    @Test
    public void testFieldSetMapper() throws Exception {
        FieldSetMapper<RetrievalDTO> fieldSetMapper = retrievalDTOItemReader.fieldSetMapper();

        // Mock FieldSet
        FieldSet fieldSet = mock(FieldSet.class);
        when(fieldSet.readString("detailRecordId")).thenReturn("123");
        when(fieldSet.readString("accountNumber")).thenReturn("456");
        when(fieldSet.readString("referenceKey")).thenReturn("789");

        RetrievalDTO dto = fieldSetMapper.mapFieldSet(fieldSet);

        assertNotNull(dto);
        assertEquals("123", dto.getDetailRecordId());
        assertEquals("456", dto.getAccountNumber());
        assertEquals("789", dto.getReferenceKey());
        // Add assertions for other fields
    }

    @Test
    public void testGetRanges() throws Exception {
        Range[] ranges = retrievalDTOItemReader.getRanges();

        assertNotNull(ranges);
        assertEquals(3, ranges.length);
        assertEquals(0, ranges[0].getMin());
        assertEquals(10, ranges[0].getMax());
        assertEquals(11, ranges[1].getMin());
        assertEquals(20, ranges[1].getMax());
        assertEquals(21, ranges[2].getMin());
        assertEquals(30, ranges[2].getMax());
    }
}



@Test
public void testLineMapper() throws Exception {
    // Cast the returned value from LineMapper to DefaultLineMapper
    DefaultLineMapper<RetrievalDTO> lineMapper = (DefaultLineMapper<RetrievalDTO>) retrievalDTOItemReader.lineMapper();
    
    assertNotNull(lineMapper);
    
    // We need to mock the behavior here, so assume FixedLengthTokenizer is working as expected.
    // Test using the mapper with a sample input instead.
    FixedLengthTokenizer tokenizer = new FixedLengthTokenizer();
    tokenizer.setNames(fieldNames);
    tokenizer.setColumns(getRanges());
    
    // Verify if the tokenizer has been set up correctly
    assertArrayEquals(fieldNames, tokenizer.getIncludedFieldNames()); // Correct method
    assertEquals(3, tokenizer.getIncludedFields().length);  // Correct method for column length
}


 @Test
    public void testGetFlatFileItemReader() throws Exception {
        // Mock the FileSystemResource to avoid relying on the actual file system
        Resource mockResource = new FileSystemResource(inputFilePath);
        FlatFileItemReader<RetrievalDTO> reader = retrievalDTOItemReader.getFlatFileItemReader();

        assertNotNull(reader);
        // You can mock the resource or check if the resource is set correctly
    }


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.batch.item.file.transform.FieldSet;

import com.bofa.ept.sst.batch.dto.RetrievalDTO;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class RetrievalDTOItemReaderTest {

    @InjectMocks
    private RetrievalDTOItemReader retrievalDTOItemReader;

    @Mock
    private FieldSet fieldSet;  // Mock the FieldSet

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        // Mock the FieldSet values for each field
        when(fieldSet.readString("detailRecordId")).thenReturn("1001");
        when(fieldSet.readString("accountNumber")).thenReturn("ACC123");
        when(fieldSet.readString("referenceKey")).thenReturn("REF456");
        when(fieldSet.readString("systemId")).thenReturn("SYS789");
        when(fieldSet.readString("sstKey")).thenReturn("SST001");
        when(fieldSet.readString("confirmationNumber")).thenReturn("CONFIRM987");
        when(fieldSet.readString("transactionReferenceId")).thenReturn("TX123");
        when(fieldSet.readString("paymentType")).thenReturn("CREDIT");
        when(fieldSet.readString("xdays")).thenReturn("30");
        when(fieldSet.readString("dueDate")).thenReturn("2024-01-01");
        when(fieldSet.readString("marketId")).thenReturn("MARKET001");
        when(fieldSet.readString("createTimestamp")).thenReturn("2024-01-01T12:00:00");
        when(fieldSet.readString("subChannel")).thenReturn("SUB001");
        when(fieldSet.readString("statementBalance")).thenReturn("5000.00");
    }

    @Test
    public void testFieldSetMapper() throws Exception {
        // Call the fieldSetMapper method to map the FieldSet to a RetrievalDTO
        RetrievalDTO dto = retrievalDTOItemReader.fieldSetMapper().mapFieldSet(fieldSet);

        // Validate that the DTO has the correct values
        assertNotNull(dto);
        assertEquals("1001", dto.getDetailRecordId());
        assertEquals("ACC123", dto.getAccountNumber());
        assertEquals("REF456", dto.getReferenceKey());
        assertEquals("SYS789", dto.getSystemId());
        assertEquals("SST001", dto.getSstKey());
        assertEquals("CONFIRM987", dto.getConfirmationNumber());
        assertEquals("TX123", dto.getTransactionReferenceId());
        assertEquals("CREDIT", dto.getPaymentType());
        assertEquals("30", dto.getXdays());
        assertEquals("2024-01-01", dto.getDueDate());
        assertEquals("MARKET001", dto.getMarketId());
        assertEquals("2024-01-01T12:00:00", dto.getCreateTimestamp());
        assertEquals("SUB001", dto.getSubChannel());
        assertEquals("5000.00", dto.getStatementBalance());
    }
}


import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class RetrievalDTOItemReaderTest {

    @InjectMocks
    private RetrievalDTOItemReader retrievalDTOItemReader;

    @Mock
    private Resource resource; // Mock the file resource

    @Mock
    private String inputFilePath; // Mock the input file path

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        
        // Set a mock input file path for testing
        inputFilePath = "/dummy/path/to/file.txt";
    }

    @Test
    public void testGetFlatFileItemReader() throws Exception {
        // Call the method to get the FlatFileItemReader instance
        FlatFileItemReader<RetrievalDTO> reader = retrievalDTOItemReader.getFlatFileItemReader();

        // Validate the reader is not null
        assertNotNull(reader);

        // Verify that the correct resource is set on the reader
        Resource actualResource = reader.getResource();
        assertNotNull(actualResource);
        assertTrue(actualResource instanceof FileSystemResource);

        // Check if the correct file path was set on the resource
        assertEquals(inputFilePath, ((FileSystemResource) actualResource).getPath());

        // Verify the name of the reader
        assertEquals("RetrievalDTOItemReader", reader.getName());

        // Verify that the LineMapper is set correctly
        assertNotNull(reader.getLineMapper());
    }
}



import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import com.bofa.ept.sst.batch.dto.RetrievalDTO;
import org.springframework.batch.item.ItemProcessor;

@RunWith(MockitoJUnitRunner.class)
public class RetrievalDTOProcessorTest {

    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyyMMdd");

    @InjectMocks
    private RetrievalDTOProcessor processor;

    @Mock
    private RetrievalDTO item;  // Mocked DTO to simulate input

    @Before
    public void setUp() {
        // Initialize Mockito
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testProcess_filteredOutBySubChannel() throws Exception {
        // Mock subChannel and statementBalance
        when(item.getSubChannel()).thenReturn("NOT_COL");
        when(item.getStatementBalance()).thenReturn("500.00");

        // Call the process method
        RetrievalDTO result = processor.process(item);

        // Since subChannel is not "COL", the result should be null (filtered out)
        assertNull(result);
    }

    @Test
    public void testProcess_filteredOutByStatementBalance() throws Exception {
        // Mock subChannel and statementBalance
        when(item.getSubChannel()).thenReturn("COL");
        when(item.getStatementBalance()).thenReturn("0.0");

        // Call the process method
        RetrievalDTO result = processor.process(item);

        // Since statementBalance is <= 0, the result should be null (filtered out)
        assertNull(result);
    }

    @Test
    public void testProcess_validRecordWeekday() throws Exception {
        // Mock a valid input with subChannel = "COL" and statementBalance > 0
        when(item.getSubChannel()).thenReturn("COL");
        when(item.getStatementBalance()).thenReturn("1000.00");
        when(item.getDueDate()).thenReturn("20240925"); // September 25, 2024 (a Wednesday)
        when(item.getPaymentType()).thenReturn("CREDIT");
        when(item.getAccountNumber()).thenReturn("ACC123");
        when(item.getConfirmationNumber()).thenReturn("CONFIRM456");
        when(item.getMarketId()).thenReturn("MARKET789");
        when(item.getCreateTimestamp()).thenReturn("20240101T120000");

        // Call the process method
        RetrievalDTO result = processor.process(item);

        // Assert that the result is not null (valid record)
        assertNotNull(result);

        // Assert the hanging days are calculated for a weekday
        assertEquals(5, result.getHangingDays());

        // Assert the other values are mapped correctly
        assertEquals("D", result.getDetailRecordId());
        assertEquals("CREDIT", result.getPaymentType());
        assertEquals("ACC123", result.getAccountNumber());
        assertEquals("CONFIRM456", result.getConfirmationNumber());
        assertEquals("20240925", result.getDueDate());
        assertEquals("MARKET789", result.getMarketId());
        assertEquals("20240101T120000", result.getCreateTimestamp());
    }

    @Test
    public void testProcess_validRecordSunday() throws Exception {
        // Mock a valid input with subChannel = "COL" and statementBalance > 0
        when(item.getSubChannel()).thenReturn("COL");
        when(item.getStatementBalance()).thenReturn("1000.00");
        when(item.getDueDate()).thenReturn("20240922"); // September 22, 2024 (a Sunday)
        when(item.getPaymentType()).thenReturn("CREDIT");
        when(item.getAccountNumber()).thenReturn("ACC123");
        when(item.getConfirmationNumber()).thenReturn("CONFIRM456");
        when(item.getMarketId()).thenReturn("MARKET789");
        when(item.getCreateTimestamp()).thenReturn("20240101T120000");

        // Call the process method
        RetrievalDTO result = processor.process(item);

        // Assert that the result is not null (valid record)
        assertNotNull(result);

        // Assert the hanging days are calculated for a Sunday
        assertEquals(6, result.getHangingDays()); // Sunday has an adjustment of 6 days

        // Assert the other values are mapped correctly
        assertEquals("D", result.getDetailRecordId());
        assertEquals("CREDIT", result.getPaymentType());
        assertEquals("ACC123", result.getAccountNumber());
        assertEquals("CONFIRM456", result.getConfirmationNumber());
        assertEquals("20240922", result.getDueDate());
        assertEquals("MARKET789", result.getMarketId());
        assertEquals("20240101T120000", result.getCreateTimestamp());
    }

    @Test
    public void testGetTotalRecordCount() {
        // Process a couple of valid records to increment the counter
        processor.process(item);
        processor.process(item);

        // Check that the record count matches the number of processed records
        assertEquals(2, RetrievalDTOProcessor.getTotalRecordCount());
    }
}

