package com.bofa.sst.batch.core.impl;

import com.bofa.sst.batch.constants.CustaggSQLFactory;
import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CustaggProcessorTest {

    private CustaggProcessor processor;

    @Mock
    private JdbcTemplate jdbcTemplate;

    private HashMap<String, String> entityMap;

    @Before
    public void setUp() {
        entityMap = new HashMap<>();
        entityMap.put("ENTITY1", "MAPPED_ENTITY1");
        entityMap.put("ENTITY2", "MAPPED_ENTITY2");

        processor = new CustaggProcessor(entityMap);
        MockitoAnnotations.initMocks(this);
        ReflectionTestUtils.setField(processor, "jdbcTemplate", jdbcTemplate);
    }

    @Test
    public void testProcess_SuccessfulProcessing() throws Exception {
        CustaggRecordsDTO input = new CustaggRecordsDTO("ENTITY1", "ACC12345", "PROD01");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA),
                eq(String.class),
                any(Object[].class)
        )).thenReturn("SCHED123");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_TRANSFER_EXECUTION_M2M_ID),
                eq(String.class),
                any(Object[].class)
        )).thenReturn("EXEC456");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
                eq(String.class),
                any(Object[].class)
        )).thenReturn("INSTR789");

        CustaggProcessedRecordsDTO result = processor.process(input);

        assertNotNull(result);
        assertEquals("MAPPED_ENTITY1", result.getMappedEntity());
        assertEquals("ENTITY1", result.getNumEntity());
        assertEquals("ACC12345", result.getAccountNumber());
        assertEquals("PROD01", result.getProductCode());
        assertTrue(result.getScheduleIds().contains("SCHED123"));
        assertTrue(result.getTransferExecutionIds().contains("EXEC456"));

        verify(jdbcTemplate, times(1)).queryForObject(anyString(), eq(String.class), any(Object[].class));
        verify(jdbcTemplate, times(1)).update(anyString(), any());
    }

    @Test
    public void testProcess_EmptyEntityMap() throws Exception {
        entityMap.clear();
        CustaggProcessor emptyProcessor = new CustaggProcessor(entityMap);
        CustaggRecordsDTO input = new CustaggRecordsDTO("ENTITY1", "ACC12345", "PROD01");

        try {
            emptyProcessor.process(input);
            fail("Expected IllegalStateException due to empty entity map.");
        } catch (IllegalStateException e) {
            assertEquals("HashMap is empty. Check EntityFileReader.", e.getMessage());
        }
    }

    @Test
    public void testProcess_NoMatchInEntityMap() throws Exception {
        CustaggRecordsDTO input = new CustaggRecordsDTO("NON_EXISTENT_ENTITY", "ACC12345", "PROD01");

        CustaggProcessedRecordsDTO result = processor.process(input);

        assertNull(result);
    }

    @Test
    public void testProcess_FetchScheduleIdFails() throws Exception {
        CustaggRecordsDTO input = new CustaggRecordsDTO("ENTITY1", "ACC12345", "PROD01");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA),
                eq(String.class),
                any(Object[].class)
        )).thenReturn(null);

        CustaggProcessedRecordsDTO result = processor.process(input);

        assertNotNull(result);
        assertTrue(result.getScheduleIds().isEmpty());
    }

    @Test
    public void testProcess_FetchTransferExecutionIdFails() throws Exception {
        CustaggRecordsDTO input = new CustaggRecordsDTO("ENTITY1", "ACC12345", "PROD01");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA),
                eq(String.class),
                any(Object[].class)
        )).thenReturn("SCHED123");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_TRANSFER_EXECUTION_M2M_ID),
                eq(String.class),
                any(Object[].class)
        )).thenReturn(null);

        CustaggProcessedRecordsDTO result = processor.process(input);

        assertNotNull(result);
        assertTrue(result.getTransferExecutionIds().isEmpty());
    }

    @Test
    public void testProcess_FetchTransferInstructionFails() throws Exception {
        CustaggRecordsDTO input = new CustaggRecordsDTO("ENTITY1", "ACC12345", "PROD01");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA),
                eq(String.class),
                any(Object[].class)
        )).thenReturn("SCHED123");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_TRANSFER_EXECUTION_M2M_ID),
                eq(String.class),
                any(Object[].class)
        )).thenReturn("EXEC456");

        when(jdbcTemplate.queryForObject(
                eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
                eq(String.class),
                any(Object[].class)
        )).thenReturn(null);

        CustaggProcessedRecordsDTO result = processor.process(input);

        assertNotNull(result);
        assertTrue(result.getScheduleIds().contains("SCHED123"));
        assertTrue(result.getTransferExecutionIds().contains("EXEC456"));
    }

    @Test
    public void testProcess_NoEntityInFile() throws Exception {
        CustaggRecordsDTO input = new CustaggRecordsDTO("", "ACC12345", "PROD01");

        CustaggProcessedRecordsDTO result = processor.process(input);

        assertNull(result);
    }

    @After
    public void tearDown() {
        // Cleanup if needed
        entityMap.clear();
    }
}
