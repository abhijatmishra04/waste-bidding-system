@RunWith(MockitoJUnitRunner.class)
public class CustaggProcessorTest {

    @InjectMocks
    private CustaggProcessor processor;

    @Mock
    private JdbcTemplate mockJdbcTemplate;

    @Before
    public void setUp() {
        // Setup can be used for initializing shared objects or mocked behavior
    }

    @Test
    public void testFetchScheduleIds_success() {
        String accountNumber = "12345";
        String numEntity = "ENTITY1";
        String productCode = "PRODUCT1";

        List<String> boaScheduleIds = Arrays.asList("BOA1", "BOA2");
        List<String> m2mScheduleIds = Arrays.asList("M2M1", "M2M2");

        Mockito.doReturn(boaScheduleIds)
                .when(processor).fetchScheduleIdUsingAccountBoa(accountNumber, numEntity, productCode);
        Mockito.doReturn(m2mScheduleIds)
                .when(processor).fetchScheduleIdUsingAccountM2M(accountNumber, numEntity, productCode);

        List<String> result = processor.fetchScheduleIds(accountNumber, numEntity, productCode);

        Assert.assertNotNull(result);
        Assert.assertEquals(4, result.size());
        Assert.assertTrue(result.containsAll(boaScheduleIds));
        Assert.assertTrue(result.containsAll(m2mScheduleIds));
    }

    @Test
    public void testFetchScheduleIds_nullResults() {
        String accountNumber = "12345";
        String numEntity = "ENTITY1";
        String productCode = "PRODUCT1";

        Mockito.doReturn(null)
                .when(processor).fetchScheduleIdUsingAccountBoa(accountNumber, numEntity, productCode);
        Mockito.doReturn(null)
                .when(processor).fetchScheduleIdUsingAccountM2M(accountNumber, numEntity, productCode);

        List<String> result = processor.fetchScheduleIds(accountNumber, numEntity, productCode);

        Assert.assertNotNull(result);
        Assert.assertTrue(result.isEmpty());
    }

    @Test
    public void testFetchScheduleIdUsingAccountBoa_success() {
        String accountNumber = "12345";
        String numEntity = "ENTITY1";
        String productCode = "PRODUCT1";

        List<String> boaScheduleIds = Arrays.asList("BOA1", "BOA2");

        Mockito.when(mockJdbcTemplate.query(
                        Mockito.eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA),
                        Mockito.any(RowMapper.class),
                        Mockito.eq(accountNumber),
                        Mockito.eq(numEntity),
                        Mockito.eq(productCode)))
                .thenReturn(boaScheduleIds);

        List<String> result = processor.fetchScheduleIdUsingAccountBoa(accountNumber, numEntity, productCode);

        Assert.assertNotNull(result);
        Assert.assertEquals(boaScheduleIds, result);
    }

    @Test
    public void testFetchScheduleIdUsingAccountBoa_dataAccessException() {
        String accountNumber = "12345";
        String numEntity = "ENTITY1";
        String productCode = "PRODUCT1";

        Mockito.when(mockJdbcTemplate.query(
                        Mockito.eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA),
                        Mockito.any(RowMapper.class),
                        Mockito.eq(accountNumber),
                        Mockito.eq(numEntity),
                        Mockito.eq(productCode)))
                .thenThrow(new DataAccessException("Mocked Data Access Exception") {});

        List<String> result = processor.fetchScheduleIdUsingAccountBoa(accountNumber, numEntity, productCode);

        Assert.assertNull(result);
    }

    @Test
    public void testFetchScheduleIdUsingAccountBoa_genericException() {
        String accountNumber = "12345";
        String numEntity = "ENTITY1";
        String productCode = "PRODUCT1";

        Mockito.when(mockJdbcTemplate.query(
                        Mockito.eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA),
                        Mockito.any(RowMapper.class),
                        Mockito.eq(accountNumber),
                        Mockito.eq(numEntity),
                        Mockito.eq(productCode)))
                .thenThrow(new RuntimeException("Mocked Generic Exception"));

        List<String> result = processor.fetchScheduleIdUsingAccountBoa(accountNumber, numEntity, productCode);

        Assert.assertNull(result);
    }
}
