@ExceptionHandler(FileProcessingException.class)
public ResponseEntity<JobError> handleFileProcessingException(FileProcessingException exception) {
    log.error(LoggingUtil.logJobMessage(
            exception.getJobErrorEnum().getErrorCode(), 
            exception.getMessage()
    ));

    JobError jobError = new JobError(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getJobErrorEnum().getErrorDescription(),
            exception.getJobErrorEnum().getStatusCode()
    );

    return new ResponseEntity<>(jobError, HttpStatus.INTERNAL_SERVER_ERROR);
}


@Override
public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {
    log.info(LoggingUtil.logJobMessage("FileAggregatorTasklet ::: execute() ::: Started"));

    ExecutionContext context = stepContribution.getStepExecution().getJobExecution().getExecutionContext();

    try {
        String outputFlatFilePath = context.getString(BatchConstants.DIRECTORY_PATH);
        String fileExtension = context.getString(BatchConstants.EXTENSION);

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(BatchConstants.DATE_FORMAT);
        String currDate = simpleDateFormat.format(Calendar.getInstance().getTime());

        File outputFile = new File(outputFlatFilePath + "SDA_REQUEST_" + currDate + fileExtension);

        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.write(new String(addHeaderRecord().getBytes(BatchConstants.EBCDIC_ENCODING)));

            int totalRecords = 0;

            File[] tempFiles = new File(outputFlatFilePath).listFiles((dir, name) ->
                    name.contains(BatchConstants.SDA_INTERIM_FILE_PREFIX) &&
                            name.endsWith(BatchConstants.FILE_EXTENSION));

            if (tempFiles != null) {
                Arrays.sort(tempFiles, Comparator.comparing(File::getName));

                for (File tempFile : tempFiles) {
                    try {
                        List<String> lines = Files.readAllLines(tempFile.toPath());

                        for (String line : lines) {
                            StringBuffer sb = new StringBuffer();

                            try {
                                sb.append(TrXMiscUtilities.stringFromAsciiToEbcdic(line.substring(0, 2)));
                                sb.append(TrXMiscUtilities.stringToPackedSigned(line.substring(2, 11)));
                                sb.append(new String(TrXMiscUtilities.stringFromAsciiToEbcdic(line.substring(11, 84))));
                                sb.append(TrXMiscUtilities.stringToPackedSigned(line.substring(84, 99)));
                                sb.append(new String(TrXMiscUtilities.stringFromAsciiToEbcdic(line.substring(99, 109))));
                                sb.append(TrXMiscUtilities.stringToPackedSigned(line.substring(109, 124)));
                                sb.append(new String(TrXMiscUtilities.stringFromAsciiToEbcdic(line.substring(124, 168))));

                            } catch (Exception e) {
                                log.error(LoggingUtil.logJobMessage("Failed to process line", e.getMessage()));
                                throw new FileProcessingException(JobErrorEnum.FILE_PROCESSING_FAILED, e);
                            }

                            line = sb.toString();
                            writer.write(line + "\n");
                            totalRecords++;
                        }
                    } catch (IOException e) {
                        log.error(LoggingUtil.logJobMessage("Failed to read file", e.getMessage()));
                        throw new FileProcessingException(JobErrorEnum.FILE_READ_FAILED, e);
                    }

                    if (!tempFile.delete()) {
                        log.warn(LoggingUtil.logJobMessage("Failed to delete file", tempFile.getName()));
                        throw new FileProcessingException(JobErrorEnum.FILE_DELETION_FAILED);
                    }
                }
            }

            writer.write(new String(addTrailerRecord(totalRecords).getBytes(BatchConstants.EBCDIC_ENCODING)));

        } catch (IOException e) {
            log.error(LoggingUtil.logJobMessage("Failed to write to file", e.getMessage()));
            throw new FileProcessingException(JobErrorEnum.FILE_WRITE_FAILED, e);
        }

        log.info(LoggingUtil.logJobMessage("FileAggregatorTasklet ::: execute() ::: Completed"));

    } catch (Exception e) {
        log.error(LoggingUtil.logJobMessage("FileAggregatorTasklet ::: execute() ::: Failed", e.getMessage()));
        throw new FileProcessingException(JobErrorEnum.UNEXPECTED_ERROR, e);
    }

    return RepeatStatus.FINISHED;
}

package com.bofa.sst.batch.exception;

import com.bofa.sst.batch.util.JobErrorEnum;
import lombok.Getter;

@Getter
public class FileProcessingException extends RuntimeException {

    private final JobErrorEnum jobErrorEnum;

    public FileProcessingException(JobErrorEnum jobErrorEnum, Throwable err) {
        super(err);
        this.jobErrorEnum = jobErrorEnum;
    }

    public FileProcessingException(JobErrorEnum jobErrorEnum) {
        this.jobErrorEnum = jobErrorEnum;
    }
}

