package com.bofa.sst.batch.partition;

import lombok.extern.log4j.Log4j2;
import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

@Component
@Log4j2
public class CustagFilePartitioner implements Partitioner {

    @Value("${custag.input.file.path}") // Path to the input file from properties
    private String filePath;

    private static final int RECORD_SIZE = 28; // Adjusted record size based on file format

    @Override
    public Map<String, ExecutionContext> partition(int gridSize) {
        log.info("CustagFilePartitioner ::: Partitioning has started...");

        Map<String, ExecutionContext> partitions = new HashMap<>();

        try {
            File file = new File(filePath);
            if (!file.exists() || file.length() == 0) {
                log.warn("File does not exist or is empty at the provided path: {}", filePath);
                return partitions; // Return empty partitions map
            }

            long fileSize = file.length();
            log.info("File size: {} bytes", fileSize);

            int totalRecords = (int) (fileSize / RECORD_SIZE);
            if (totalRecords == 0) {
                log.warn("No records found in the file. Skipping partitioning.");
                return partitions;
            }

            int linesPerPartition = totalRecords / gridSize;
            int remainingLines = totalRecords % gridSize;

            log.info("CustagFilePartitioner ::: Total Records: {}, Lines Per Partition: {}, Remaining Lines: {}", 
                     totalRecords, linesPerPartition, remainingLines);

            int startPosition = 1;
            int endPosition = 0;

            for (int i = 0; i < gridSize; i++) {
                ExecutionContext context = new ExecutionContext();
                endPosition = startPosition + linesPerPartition - 1;

                if (i < remainingLines) {
                    endPosition += 1; // Distribute remaining lines evenly across partitions
                }

                log.info("CustagFilePartitioner ::: Partition FromLine: {}, ToLine: {}", startPosition, endPosition);

                context.putInt("fromLine", startPosition);
                context.putInt("toLine", endPosition);
                context.putInt("numberOfRecords", endPosition - startPosition + 1);

                partitions.put("partition" + i, context);
                startPosition = endPosition + 1;
            }

            log.info("CustagFilePartitioner ::: Total Partitions Created: {}", partitions.size());

        } catch (Exception ex) {
            log.error("CustagFilePartitioner ::: Exception occurred while partitioning: {}", ex.getMessage(), ex);
        }

        return partitions;
    }
}
