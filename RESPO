import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.*;

import org.apache.commons.lang3.reflect.FieldUtils;
import org.junit.*;
import org.junit.rules.TemporaryFolder;
import org.mockito.*;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.item.ExecutionContext;

public class UdapRequestAggregatorTaskletTest {

    @InjectMocks
    private UdapRequestAggregatorTasklet tasklet;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private StepExecution stepExecution;

    @Mock
    private JobExecution jobExecution;

    @Mock
    private ExecutionContext executionContext;

    @Mock
    private StepContext stepContext;

    @Rule
    public TemporaryFolder tempFolder = new TemporaryFolder();

    private String filePath;
    private String filePrefix = "testFile_";
    private String fileSuffix = ".txt";
    private String outputFileName = "aggregated_output";

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        filePath = tempFolder.getRoot().getAbsolutePath() + "/";
        when(stepContribution.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);
        FieldUtils.writeField(tasklet, "filePath", filePath, true);
        FieldUtils.writeField(tasklet, "filePrefix", filePrefix, true);
        FieldUtils.writeField(tasklet, "fileSuffix", fileSuffix, true);
        FieldUtils.writeField(tasklet, "outputFileName", outputFileName, true);
    }

    @Test
    public void testExecute_SuccessfulAggregation() throws Exception {
        createSampleFile("testFile_1.txt", Arrays.asList("HEADER", "Data1", "Data2", "TRAILER"));
        createSampleFile("testFile_2.txt", Arrays.asList("HEADER", "Data3", "Data4", "TRAILER"));
        createSampleFile("testFile_3.txt", Arrays.asList("HEADER", "Data5", "Data6", "TRAILER"));
        when(executionContext.getString(UdapRequestBatchConstants.DIRECTORY_PATH)).thenReturn(filePath);
        when(executionContext.getString(UdapRequestBatchConstants.EXTENSION)).thenReturn(fileSuffix);
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, status);
        File outputFile = new File(filePath, outputFileName + "_" + getCurrentDate() + fileSuffix);
        assertTrue(outputFile.exists());
        List<String> lines = Files.readAllLines(outputFile.toPath());
        assertEquals(Arrays.asList("HEADER", "Data1", "Data2", "Data3", "Data4", "Data5", "Data6", "TRAILER"), lines);
    }

    @Test
    public void testExecute_NoFiles() throws Exception {
        when(executionContext.getString(UdapRequestBatchConstants.DIRECTORY_PATH)).thenReturn(filePath);
        when(executionContext.getString(UdapRequestBatchConstants.EXTENSION)).thenReturn(fileSuffix);
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, status);
        File outputFile = new File(filePath, outputFileName + "_" + getCurrentDate() + fileSuffix);
        assertFalse(outputFile.exists());
    }

    @Test(expected = Exception.class)
    public void testExecute_FileWritingFailure() throws Exception {
        when(executionContext.getString(UdapRequestBatchConstants.DIRECTORY_PATH)).thenReturn(filePath);
        when(executionContext.getString(UdapRequestBatchConstants.EXTENSION)).thenReturn(fileSuffix);
        File outputFile = new File(filePath, outputFileName + "_" + getCurrentDate() + fileSuffix);
        outputFile.createNewFile();
        outputFile.setWritable(false);
        tasklet.execute(stepContribution, chunkContext);
    }

    private void createSampleFile(String fileName, List<String> lines) throws Exception {
        Path filePath = Paths.get(this.filePath + fileName);
        Files.write(filePath, lines);
    }

    private String getCurrentDate() {
        return new SimpleDateFormat("yyyyMMdd").format(new Date());
    }
}
