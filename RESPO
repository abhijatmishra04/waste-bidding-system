private void aggregateFilesForLetterType(String sourceDir, String letterType, StringBuilder finalAggregatedContent) throws IOException {
    Path sourcePath = Paths.get(sourceDir).toAbsolutePath();
    Log.debug("Resolved sourcePath: {}", sourcePath.toString());

    // Updated pattern to include underscore
    Pattern pattern = Pattern.compile(".*" + letterType + "_Letter\\.txt", Pattern.CASE_INSENSITIVE);
    Log.debug("Generated pattern for letter type {}: {}", letterType, pattern);

    try (Stream<Path> filesStream = Files.list(sourcePath)) {
        List<Path> matchingFiles = filesStream
            .filter(path -> pattern.matcher(path.getFileName().toString()).matches())
            .collect(Collectors.toList());

        if (matchingFiles.isEmpty()) {
            Log.warn("No files found for letter type: {}", letterType);
            return;
        }

        Log.debug("Matching files for letter type {}: {}", letterType, matchingFiles);

        // Process the matching files
        for (Path filePath : matchingFiles) {
            List<String> lines = Files.readAllLines(filePath);
            lines.forEach(line -> finalAggregatedContent.append(line).append(System.lineSeparator()));
        }
    }
}
