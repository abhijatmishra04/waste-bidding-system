@ExceptionHandler(DataWriteException.class)
public ResponseEntity<JobError> handleDataWriteException(DataWriteException exception) {
    log.error(LoggingUtil.logJobMessage(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getMessage()
    ));

    JobError jobError = new JobError(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getJobErrorEnum().getErrorDescription(),
            exception.getJobErrorEnum().getStatusCode()
    );

    return new ResponseEntity<>(jobError, HttpStatus.INTERNAL_SERVER_ERROR);
}

@StepScope
@Component
@Log4j2
public class SdaResponseItemWriter implements ItemWriter<PaymentInfoDTO> {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private SdaResponsePlanAuditService auditService;

    @Override
    public void write(List<? extends PaymentInfoDTO> items) throws Exception {
        try {
            log.info(LoggingUtil.logJobMessage(
                "DATA_WRITE",
                "PAYMENT_PROCESS",
                "Starting data write operation"
            ));

            for (PaymentInfoDTO paymentInfoDTO : items) {
                try {
                    log.info(LoggingUtil.logJobMessage(
                        "DATA_WRITE",
                        paymentInfoDTO.getConfirmationNbr(),
                        "Writing data: " + paymentInfoDTO
                    ));

                    Object[] params = new Object[]{
                        paymentInfoDTO.getPaymentAmount(),
                        paymentInfoDTO.getPaymentAmount(),
                        paymentInfoDTO.getTotalAmt(),
                        paymentInfoDTO.getPaymentAmount(),
                        paymentInfoDTO.getUpdDtBy(),
                        paymentInfoDTO.getConfirmationNbr()
                    };

                    int count = jdbcTemplate.update(SQLFactory.UPDATE_SCHEDULE_M2M_1, params);

                    log.info(LoggingUtil.logJobMessage(
                        "DATA_WRITE",
                        paymentInfoDTO.getConfirmationNbr(),
                        "Update query executed. Rows affected: " + count
                    ));

                    // Process audit logs
                    List<ScheduleM2mLogDto> logDtoList = auditService.process(paymentInfoDTO);
                    for (ScheduleM2mLogDto logDto : logDtoList) {
                        insertIntoScheduleM2mLog(logDto);
                    }

                } catch (Exception e) {
                    log.error(LoggingUtil.logJobMessage(
                        "DATA_WRITE",
                        paymentInfoDTO.getConfirmationNbr(),
                        "Failed to update payment data: " + e.getMessage()
                    ));
                    throw new DataWriteException(JobErrorEnum.DATA_WRITE_FAILED, e);
                }
            }

            log.info(LoggingUtil.logJobMessage(
                "DATA_WRITE",
                "PAYMENT_PROCESS",
                "Data write operation completed successfully"
            ));

        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage(
                "DATA_WRITE",
                "PAYMENT_PROCESS",
                "Failed to complete data write operation: " + e.getMessage()
            ));
            throw new DataWriteException(JobErrorEnum.DATA_WRITE_FAILED, e);
        }
    }

    private void insertIntoScheduleM2mLog(ScheduleM2mLogDto logDto) {
        try {
            log.info(LoggingUtil.logJobMessage(
                "DATA_WRITE",
                logDto.getConfirmNo(),
                "Inserting data into schedule_m2m_log"
            ));

            Object[] params = new Object[]{
                logDto.getSchdId(), logDto.getConfirmNo(), logDto.getTransferReferenceId(),
                logDto.getDrAccId(), logDto.getDrAccType(), logDto.getDrTranType(),
                logDto.getCustId(), logDto.getCrAccId(), logDto.getCrAccType(),
                logDto.getCrk(), logDto.getGuidFlag(), logDto.getGuid(), logDto.getSchdFrqCd(),
                logDto.getProcessCode(), logDto.getDyOfWk(), logDto.getNumOfOccur(),
                logDto.getTotAmFlag(), logDto.getTotAm(), logDto.getPmtAmFlag(),
                logDto.getPmtAm(), logDto.getFromAccount(), logDto.getCodeFlag(),
                logDto.getCode(), logDto.getRoutingNumber(), logDto.getRoutingType(),
                logDto.getSchdStatFlag(), logDto.getSchdStat(), logDto.getChnCd(),
                logDto.getFirstAm(), logDto.getFirstAmTypeFlag(), logDto.getFirstAmType(),
                logDto.getFirstAdditionalPrincipalFlag(), logDto.getMinorRecurAm(),
                logDto.getRecurAmTypeFlag(), logDto.getRecurAmType(), logDto.getAdditionalAmFlag(),
                logDto.getAdditionalAm(), logDto.getDateFlag(), logDto.getDaysBeforeDueDateFlag(),
                logDto.getDaysBeforeDueDate(), logDto.getAdditionalPrincipalFlag(),
                logDto.getAdditionalPrincipal(), logDto.getEscrowFlag(), logDto.getTransferMode(),
                logDto.getTransferPriorityFlag(), logDto.getSenderAccountId(), logDto.getSenderAddressFlag(),
                logDto.getSenderAddrLine1(), logDto.getSenderCity(), logDto.getSenderCountry(),
                logDto.getSenderAddrLine2(), logDto.getSenderState(), logDto.getOriginatorAddrLine1(),
                logDto.getOriginatorAddrLine2(), logDto.getOriginatorCity(), logDto.getOriginatorState(),
                logDto.getOriginatorZipCode(), logDto.getDisclosureId(), logDto.getCallerTraceId(),
                logDto.getSubChn(), logDto.getSubChnCd(), logDto.getToAccountFlag(),
                logDto.getToAccount(), logDto.getReturnCode(), logDto.getWarningCode(),
                logDto.getGraceDaysFlag(), logDto.getGraceDays(), logDto.getAcknowledgementId(),
                logDto.getChangeBy(), logDto.getXferType(), logDto.getAuthorizationId(),
                logDto.getAuthId(), logDto.getRespid(), logDto.getBalanceUpdateFlag(),
                logDto.getClosingDate(), logDto.getCallingApp(), logDto.getFeeType(),
                logDto.getFeeWaivedFlag(), logDto.getFrequencyFlag(), logDto.getIpAddress()
            };

            jdbcTemplate.update(SQLFactory.INSERT_SCHEDULE_M2M_LOG, params);

            log.info(LoggingUtil.logJobMessage(
                "DATA_WRITE",
                logDto.getConfirmNo(),
                "Inserted data into schedule_m2m_log successfully"
            ));

        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage(
                "DATA_WRITE",
                logDto.getConfirmNo(),
                "Failed to insert data into schedule_m2m_log: " + e.getMessage()
            ));
            throw new DataWriteException(JobErrorEnum.AUDIT_LOG_WRITE_FAILED, e);
        }
    }
}


DATA_WRITE_FAILED("1012", "Failed to write data to the database", "500"),
AUDIT_LOG_WRITE_FAILED("1013", "Failed to write to the audit log", "500");


@Getter
public class DataWriteException extends RuntimeException {

    private final JobErrorEnum jobErrorEnum;

    public DataWriteException(JobErrorEnum jobErrorEnum, Throwable err) {
        super(err);
        this.jobErrorEnum = jobErrorEnum;
    }
@Override
public void write(List<? extends PaymentInfoDTO> items) throws Exception {
    try {
        log.info(LoggingUtil.logJobMessage(
            "DATA_WRITE",
            "PAYMENT_PROCESS",
            "Starting data write operation"
        ));

        items.forEach(paymentInfoDTO -> {
            try {
                log.info(LoggingUtil.logJobMessage(
                    "DATA_WRITE",
                    paymentInfoDTO.getConfirmationNbr(),
                    "Writing data: " + paymentInfoDTO
                ));

                Object[] params = new Object[]{
                    paymentInfoDTO.getPaymentAmount(),
                    paymentInfoDTO.getPaymentAmount(),
                    paymentInfoDTO.getTotalAmt(),
                    paymentInfoDTO.getPaymentAmount(),
                    paymentInfoDTO.getUpdDtBy(),
                    paymentInfoDTO.getConfirmationNbr()
                };

                int count = jdbcTemplate.update(SQLFactory.UPDATE_SCHEDULE_M2M_1, params);

                log.info(LoggingUtil.logJobMessage(
                    "DATA_WRITE",
                    paymentInfoDTO.getConfirmationNbr(),
                    "Update query executed. Rows affected: " + count
                ));

                // Process audit logs
                List<ScheduleM2mLogDto> logDtoList = auditService.process(paymentInfoDTO);
                logDtoList.forEach(this::insertIntoScheduleM2mLog);

            } catch (Exception e) {
                log.error(LoggingUtil.logJobMessage(
                    "DATA_WRITE",
                    paymentInfoDTO.getConfirmationNbr(),
                    "Failed to update payment data: " + e.getMessage()
                ));
                throw new DataWriteException(JobErrorEnum.DATA_WRITE_FAILED, e);
            }
        });

        log.info(LoggingUtil.logJobMessage(
            "DATA_WRITE",
            "PAYMENT_PROCESS",
            "Data write operation completed successfully"
        ));

    } catch (Exception e) {
        log.error(LoggingUtil.logJobMessage(
            "DATA_WRITE",
            "PAYMENT_PROCESS",
            "Failed to complete data write operation: " + e.getMessage()
        ));
        throw new DataWriteException(JobErrorEnum.DATA_WRITE_FAILED, e);
    }
}


    public DataWriteException(JobErrorEnum jobErrorEnum) {
        this.jobErrorEnum = jobErrorEnum;
    }
}
