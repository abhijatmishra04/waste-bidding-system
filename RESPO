import static org.junit.Assert.*;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.RoundingMode;

import org.junit.Before;
import org.junit.Test;

public class SdaResponseCompFileItemReaderTest {

    private SdaResponseCompFileItemReader reader;

    @Before
    public void setUp() {
        reader = new SdaResponseCompFileItemReader();
    }

    @Test
    public void testCreateCommaDelimitedRecord1_HRecord() throws Exception {
        byte[] record = createFixedLengthRecord("H");
        PaymentInfoDTO dto = reader.createCommaDelimitedRecord1(record);

        assertNotNull(dto);
        assertEquals("H", dto.getDetailRecordId());
    }

    @Test
    public void testCreateCommaDelimitedRecord1_TRecord() throws Exception {
        byte[] record = createFixedLengthRecord("T");
        PaymentInfoDTO dto = reader.createCommaDelimitedRecord1(record);

        assertNotNull(dto);
        assertEquals("T", dto.getDetailRecordId());
    }

    @Test
    public void testCreateCommaDelimitedRecord1_DRecord() throws Exception {
        byte[] record = createDRecord();
        PaymentInfoDTO dto = reader.createCommaDelimitedRecord1(record);

        assertNotNull(dto);
        assertEquals("D", dto.getDetailRecordId());
        assertEquals("SYSID", dto.getSystemIdentifier());
        assertEquals(new BigDecimal("12345"), dto.getSstKey());
        assertEquals("CONF12345", dto.getConfirmationNbr());
        assertEquals("ACC001", dto.getAccount());
        assertEquals("ENTITY", dto.getEntity());
        assertEquals("PRD01", dto.getProductCode());
        assertEquals("SPR01", dto.getSubProductCode());
        assertEquals("20240218", dto.getNextTranDate());
        assertEquals(new BigDecimal("1500.50"), dto.getPaymentAmount());
        assertEquals("Y", dto.getChangeIndicator());
        assertEquals(new BigDecimal("500.00"), dto.getIalsBalance());
        assertEquals("A1", dto.getAcctStatus());
        assertEquals("L1", dto.getLegalStatus());
    }

    @Test
    public void testCreateCommaDelimitedRecord1_UnknownRecordType() throws Exception {
        byte[] record = createFixedLengthRecord("X");
        PaymentInfoDTO dto = reader.createCommaDelimitedRecord1(record);

        assertNull(dto);
    }

    @Test
    public void testCreateCommaDelimitedRecord1_CorruptData() throws Exception {
        byte[] record = new byte[50]; // Less than expected 152 bytes
        try {
            reader.createCommaDelimitedRecord1(record);
            fail("Expected UnsupportedEncodingException");
        } catch (UnsupportedEncodingException e) {
            assertTrue(e.getMessage().contains("UnsupportedEncodingException"));
        }
    }

    @Test
    public void testCreateCommaDelimitedRecord1_NullData() throws Exception {
        try {
            reader.createCommaDelimitedRecord1(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            assertNotNull(e);
        }
    }

    private byte[] createFixedLengthRecord(String type) {
        byte[] record = new byte[152];
        System.arraycopy(type.getBytes(), 0, record, 0, type.length());
        return record;
    }

    private byte[] createDRecord() {
        byte[] record = new byte[152];

        System.arraycopy("D".getBytes(), 0, record, 0, 1);
        System.arraycopy("SYSID".getBytes(), 0, record, 1, 5);
        System.arraycopy("12345".getBytes(), 0, record, 6, 5);
        System.arraycopy("CONF12345".getBytes(), 0, record, 11, 10);
        System.arraycopy("ACC001".getBytes(), 0, record, 21, 6);
        System.arraycopy("ENTITY".getBytes(), 0, record, 27, 6);
        System.arraycopy("PRD01".getBytes(), 0, record, 33, 5);
        System.arraycopy("SPR01".getBytes(), 0, record, 38, 5);
        System.arraycopy("20240218".getBytes(), 0, record, 43, 8);
        System.arraycopy("150050".getBytes(), 0, record, 51, 6); // 1500.50 (scaled)
        System.arraycopy("Y".getBytes(), 0, record, 57, 1);
        System.arraycopy("50000".getBytes(), 0, record, 58, 5); // 500.00 (scaled)
        System.arraycopy("A1".getBytes(), 0, record, 63, 2);
        System.arraycopy("L1".getBytes(), 0, record, 65, 2);

        return record;
    }
}
