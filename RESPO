package com.bofa.sst.batch.core.impl;

import com.bofa.sst.batch.model.CustaggRecordsDTO;
import org.junit.*;
import org.mockito.*;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStreamException;

import java.io.*;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class CustagCompFileReaderTest {

    private CustagCompFileReader fileReader;
    private ExecutionContext mockExecutionContext;
    private BufferedInputStream mockBufferedInputStream;
    private FileInputStream mockFileInputStream;
    private File mockFile;

    @Before
    public void setUp() throws Exception {
        fileReader = Mockito.spy(new CustagCompFileReader());
        mockExecutionContext = mock(ExecutionContext.class);
        mockBufferedInputStream = mock(BufferedInputStream.class);
        mockFileInputStream = mock(FileInputStream.class);
        mockFile = mock(File.class);

        // Inject mock values
        fileReader.inputFilePath = "test-file-path";
        Mockito.doReturn(mockBufferedInputStream).when(fileReader).createBufferedInputStream(any());
    }

    @Test
    public void testOpen_Success() throws Exception {
        // Arrange
        when(mockExecutionContext.getInt("fromLine")).thenReturn(1);
        when(mockExecutionContext.getInt("toLine")).thenReturn(2);
        when(mockFile.exists()).thenReturn(true);
        Mockito.doReturn(mockFile).when(fileReader).getFile(anyString());
        when(mockBufferedInputStream.skip(anyLong())).thenReturn(30L);

        // Act
        fileReader.open(mockExecutionContext);

        // Assert
        verify(mockExecutionContext).getInt("fromLine");
        verify(mockExecutionContext).getInt("toLine");
        verify(mockBufferedInputStream).skip(30L);
    }

    @Test(expected = RuntimeException.class)
    public void testOpen_FileNotFound() {
        // Arrange
        when(mockExecutionContext.getInt("fromLine")).thenReturn(1);
        when(mockExecutionContext.getInt("toLine")).thenReturn(2);
        Mockito.doReturn(mockFile).when(fileReader).getFile(anyString());
        when(mockFile.exists()).thenReturn(false);

        // Act
        fileReader.open(mockExecutionContext);
    }

    @Test(expected = RuntimeException.class)
    public void testOpen_SkipFails() throws Exception {
        // Arrange
        when(mockExecutionContext.getInt("fromLine")).thenReturn(1);
        when(mockExecutionContext.getInt("toLine")).thenReturn(2);
        when(mockFile.exists()).thenReturn(true);
        Mockito.doReturn(mockFile).when(fileReader).getFile(anyString());
        when(mockBufferedInputStream.skip(anyLong())).thenReturn(-1L);

        // Act
        fileReader.open(mockExecutionContext);
    }

    @Test
    public void testRead_Success() throws Exception {
        // Arrange
        byte[] recordBytes = new byte[30];
        when(mockBufferedInputStream.read(any(byte[].class))).thenReturn(30);
        fileReader.numberOfRecordsToRead = 2;
        fileReader.currentRecord = 0;

        // Act
        CustaggRecordsDTO result = fileReader.read();

        // Assert
        assertNotNull(result);
        verify(mockBufferedInputStream).read(any(byte[].class));
    }

    @Test
    public void testRead_EndOfFile() throws Exception {
        // Arrange
        when(mockBufferedInputStream.read(any(byte[].class))).thenReturn(-1);
        fileReader.numberOfRecordsToRead = 2;
        fileReader.currentRecord = 0;

        // Act
        CustaggRecordsDTO result = fileReader.read();

        // Assert
        assertNull(result);
        verify(mockBufferedInputStream).read(any(byte[].class));
    }

    @Test(expected = RuntimeException.class)
    public void testRead_IncompleteRecord() throws Exception {
        // Arrange
        when(mockBufferedInputStream.read(any(byte[].class))).thenReturn(25); // Less than RECORD_SIZE
        fileReader.numberOfRecordsToRead = 2;
        fileReader.currentRecord = 0;

        // Act
        fileReader.read();
    }

    @Test
    public void testClose_Success() throws Exception {
        // Arrange
        fileReader.bis = mockBufferedInputStream;

        // Act
        fileReader.close();

        // Assert
        verify(mockBufferedInputStream).close();
    }

    @Test
    public void testClose_NullStream() throws Exception {
        // Act
        fileReader.close();

        // Assert
        assertTrue("Closing a null stream should not throw an exception.", true);
    }

    @Test
    public void testUpdate() {
        // Arrange
        fileReader.currentRecord = 5;

        // Act
        fileReader.update(mockExecutionContext);

        // Assert
        verify(mockExecutionContext).putInt("counter", 5);
    }

    @After
    public void tearDown() throws Exception {
        fileReader.close();
    }
}
