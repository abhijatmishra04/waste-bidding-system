import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.item.ExecutionContext;

public class CustaggCustomJobListenerTest {

    @InjectMocks
    private CustaggCustomJobListener jobListener;

    @Mock
    private M2MDynamicConfigPropertiesRepository dynamicConfigPropRepository;

    @Mock
    private JobExecution jobExecution;

    @Mock
    private ExecutionContext executionContext;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);
    }

    @Test
    public void testBeforeJob() {
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName(anyString()))
                .thenReturn("mockValue");

        jobListener.beforeJob(jobExecution);

        verify(executionContext).put("DIRECTORY_PATH", "mockValue");
        verify(executionContext).putString("FILE_PREFIX_REFERDATA", "mockValue");
        verify(executionContext).putString("FILE_PREFIX_REFERENTRY", "mockValue");
    }

    @Test
    public void testAfterJob_Success() {
        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);

        jobListener.afterJob(jobExecution);

        verify(jobExecution).setExitStatus(any());
    }

    @Test
    public void testAfterJob_Failure() {
        when(jobExecution.getStatus()).thenReturn(BatchStatus.FAILED);
        when(jobExecution.getFailureExceptions()).thenReturn(new java.util.ArrayList<>());

        jobListener.afterJob(jobExecution);

        verify(jobExecution).setExitStatus(any());
    }
}
