import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.batch.item.ExecutionContext;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ FileUtils.class })  
public class SdaResponseCompFilePartitionerTest {

    @InjectMocks
    private SdaResponseCompFilePartitioner partitioner;

    @Mock
    private OraOdsDynamicConfigPropertiesRepository dynamicConfigPropRepository;

    private final String mockDirectoryPath = "/mock/directory";
    private final String mockFilePath = "/mock/directory/mockFile.lock";

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        partitioner = new SdaResponseCompFilePartitioner();

        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("sda.file.directory.path"))
                .thenReturn(mockDirectoryPath);

        partitioner.init();
    }

    @Test
    public void testPartition_Success() throws Exception {
        PowerMockito.mockStatic(FileUtils.class);
        PowerMockito.when(FileUtils.findTodaysFiles(mockDirectoryPath, "RESPONSE_FILE_PREFIX", ".lock"))
                .thenReturn(mockFilePath);

        byte[] mockFileContent = new byte[1000 * 152];
        BufferedInputStream mockInputStream = new BufferedInputStream(new ByteArrayInputStream(mockFileContent));

        PowerMockito.whenNew(BufferedInputStream.class)
                .withArguments(any(File.class))
                .thenReturn(mockInputStream);

        int gridSize = 5;
        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertEquals(gridSize, partitions.size());

        int expectedFromLine = 1;
        int totalRecords = 1000;
        int recordsPerPartition = totalRecords / gridSize;
        int remainder = totalRecords % gridSize;

        for (int i = 0; i < gridSize; i++) {
            ExecutionContext context = partitions.get("partition" + i);
            assertNotNull(context);

            int expectedToLine = expectedFromLine + recordsPerPartition - 1;
            if (i < remainder) expectedToLine++;

            assertEquals(expectedFromLine, context.getInt("fromLine"));
            assertEquals(expectedToLine, context.getInt("toLine"));

            expectedFromLine = expectedToLine + 1;
        }
    }

    @Test
    public void testPartition_FileNotFound() throws Exception {
        PowerMockito.mockStatic(FileUtils.class);
        PowerMockito.when(FileUtils.findTodaysFiles(anyString(), anyString(), anyString()))
                .thenThrow(new RuntimeException("File not found"));

        int gridSize = 5;
        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertTrue(partitions.isEmpty());
    }

    @Test
    public void testPartition_EmptyFile() throws Exception {
        PowerMockito.mockStatic(FileUtils.class);
        PowerMockito.when(FileUtils.findTodaysFiles(mockDirectoryPath, "RESPONSE_FILE_PREFIX", ".lock"))
                .thenReturn(mockFilePath);

        byte[] mockFileContent = new byte[0];
        BufferedInputStream mockInputStream = new BufferedInputStream(new ByteArrayInputStream(mockFileContent));

        PowerMockito.whenNew(BufferedInputStream.class)
                .withArguments(any(File.class))
                .thenReturn(mockInputStream);

        int gridSize = 5;
        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertTrue(partitions.isEmpty());
    }
}
