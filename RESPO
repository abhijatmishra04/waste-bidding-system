package com.bofa.sst.batch.core;

import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.item.ItemWriter;
import org.springframework.stereotype.Component;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

@Component
@Slf4j
public class TemporaryWriter implements ItemWriter<EnrichedRecordDTO> {

    @Override
    public void write(List<? extends EnrichedRecordDTO> items) throws Exception {
        // Define the temporary output file
        String tempOutputPath = "temp_output.txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempOutputPath))) {
            log.info("Writing to temporary file: {}", tempOutputPath);

            for (EnrichedRecordDTO item : items) {
                // Log each record
                log.info("Writing Enriched Record: {}", item);

                // Write to the file
                writer.write(item.toString());
                writer.newLine();
            }

            log.info("Finished writing all records to temporary file.");
        } catch (IOException e) {
            log.error("Error occurred while writing to temporary file.", e);
            throw new RuntimeException("Error writing to temporary file", e);
        }
    }
}


package com.bofa.sst.batch.core;

import lombok.extern.slf4j.Slf4j;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.stereotype.Component;

import java.util.HashMap;

@Component
@Slf4j
public class CustagProcessor implements ItemProcessor<CustomRecordDTO, EnrichedRecordDTO> {

    private final HashMap<String, String> entityMap;

    public CustagProcessor(HashMap<String, String> entityMap) {
        this.entityMap = entityMap;
    }

    @Override
    public EnrichedRecordDTO process(CustomRecordDTO item) throws Exception {
        log.info("Processing record with Entity: {}, AccountNumber: {}, ProductCode: {}", 
                 item.getEntity(), item.getAccountNumber(), item.getProductCode());

        // Match `entity` from 2nd file with `numEntity` from HashMap
        String alphaEntity = entityMap.get(item.getEntity());
        if (alphaEntity != null) {
            // Create an enriched DTO with all required fields
            EnrichedRecordDTO enrichedRecord = new EnrichedRecordDTO();
            enrichedRecord.setAlphaEntity(alphaEntity);
            enrichedRecord.setNumEntity(item.getEntity());
            enrichedRecord.setAccountNumber(item.getAccountNumber());
            enrichedRecord.setProductCode(item.getProductCode());

            log.info("Match found! Enriched Record: {}", enrichedRecord);
            return enrichedRecord;
        } else {
            log.warn("No match found for Entity: {}", item.getEntity());
            return null; // Skip unmatched records
        }
    }
}



import lombok.Data;

@Data
public class EnrichedRecordDTO {
    private String productCode;    // e.g., BUS or PER
    private String numEntity;      // Numeric entity from 2nd file
    private String alphaEntity;    // Matched alpha entity from 1st file
    private String accountNumber;  // Account number from 2nd file
}

