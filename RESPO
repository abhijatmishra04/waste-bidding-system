import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.Properties;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.quartz.*;
import org.springframework.scheduling.quartz.SchedulerFactoryBean;

import javax.naming.NamingException;

@RunWith(MockitoJUnitRunner.class)
public class CollectionLettersQuartzConfigurationTest {

    @InjectMocks
    private CollectionLettersQuartzConfiguration configuration;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private JobLocator jobLocator;

    @Mock
    private QuartzProperties quartzProperties;

    @Mock
    private M2MDynamicConfigPropertiesRepository dynamicConfigPropRepository;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInit_Success() {
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName(
                "collectionletters.sstBatch.collectionlettersJob.trigger.weekdayCronSchedule"))
                .thenReturn("0 0 12 * * ?");
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName(
                "collectionletters.sstBatch.collectionlettersJob.trigger.weekendCronSchedule"))
                .thenReturn("0 0 10 * * ?");

        configuration.init();

        assertEquals("0 0 12 * * ?", configuration.getWeekdayCronSchedule());
        assertEquals("0 0 10 * * ?", configuration.getWeekendCronSchedule());
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateProperties_WeekdayCronScheduleEmpty() {
        configuration.weekdayCronSchedule = "";
        configuration.weekendCronSchedule = "0 0 10 * * ?";
        configuration.validateProperties();
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateProperties_WeekendCronScheduleNull() {
        configuration.weekdayCronSchedule = "0 0 12 * * ?";
        configuration.weekendCronSchedule = null;
        configuration.validateProperties();
    }

    @Test
    public void testJobRegistryBeanPostProcessor() {
        JobRegistry mockJobRegistry = mock(JobRegistry.class);
        JobRegistryBeanPostProcessor postProcessor = configuration.jobRegistryBeanPostProcessor(mockJobRegistry);

        assertNotNull(postProcessor);
        assertEquals(mockJobRegistry, postProcessor.getJobRegistry());
    }

    @Test
    public void testCollectionLettersJobDetail() {
        JobDetail jobDetail = configuration.collectionLettersJobDetail();

        assertNotNull(jobDetail);
        assertEquals("collectionlettersJob", jobDetail.getJobDataMap().get("jobName"));
        assertEquals(jobLauncher, jobDetail.getJobDataMap().get("jobLauncher"));
        assertEquals(jobLocator, jobDetail.getJobDataMap().get("jobLocator"));
    }

    @Test
    public void testCollectionLettersJobDetailWeekend() {
        JobDetail jobDetail = configuration.collectionLettersJobDetailWeekend();

        assertNotNull(jobDetail);
        assertEquals("weekendJob", jobDetail.getJobDataMap().get("jobName"));
        assertEquals(jobLauncher, jobDetail.getJobDataMap().get("jobLauncher"));
        assertEquals(jobLocator, jobDetail.getJobDataMap().get("jobLocator"));
    }

    @Test
    public void testWeekdayJobTrigger() {
        configuration.weekdayCronSchedule = "0 0 12 * * ?";
        Trigger trigger = configuration.weekdayJobTrigger();

        assertNotNull(trigger);
        assertTrue(trigger instanceof CronTrigger);
        assertEquals("weekdayJob-trigger", trigger.getKey().getName());
        assertEquals("0 0 12 * * ?", ((CronTrigger) trigger).getCronExpression());
    }

    @Test
    public void testWeekendJobTrigger() {
        configuration.weekendCronSchedule = "0 0 10 * * ?";
        Trigger trigger = configuration.weekendJobTrigger();

        assertNotNull(trigger);
        assertTrue(trigger instanceof CronTrigger);
        assertEquals("weekendJob-trigger", trigger.getKey().getName());
        assertEquals("0 0 10 * * ?", ((CronTrigger) trigger).getCronExpression());
    }

    @Test
    public void testSchedulerFactoryBean() throws NamingException {
        Properties mockProperties = new Properties();
        when(quartzProperties.getProperties()).thenReturn(mockProperties);
        System.setProperty("jboss.server.name", "TestServer");

        SchedulerFactoryBean schedulerFactoryBean = configuration.schedulerFactoryBean();

        assertNotNull(schedulerFactoryBean);
        assertEquals(mockProperties, schedulerFactoryBean.getQuartzProperties());
        assertTrue(schedulerFactoryBean.isOverwriteExistingJobs());
        assertEquals("TestServer", schedulerFactoryBean.getQuartzProperties()
                .get("org.quartz.scheduler.instanceName"));
    }
}
