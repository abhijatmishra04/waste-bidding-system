@RunWith(MockitoJUnitRunner.class)
public class FileUtilsTest {

    @Mock
    private File mockDirectory;

    @Mock
    private File[] mockFiles;

    @Before
    public void setUp() {
        // Setup common mocks if needed
    }

    @Test
    public void testFindTodaysFiles_directoryNull() {
        String result = FileUtils.findTodaysFiles(null, "filePrefix", ".txt");
        Assert.assertNull(result);
    }

    @Test
    public void testFindTodaysFiles_directoryDoesNotExist() {
        Mockito.when(mockDirectory.exists()).thenReturn(false);

        String result = FileUtils.findTodaysFiles("invalidPath", "filePrefix", ".txt");
        Assert.assertNull(result);
    }

    @Test
    public void testFindTodaysFiles_noMatchingFiles() {
        Mockito.when(mockDirectory.exists()).thenReturn(true);
        Mockito.when(mockDirectory.listFiles(Mockito.any(FilenameFilter.class)))
                .thenReturn(new File[0]);

        String result = FileUtils.findTodaysFiles("validPath", "filePrefix", ".txt");
        Assert.assertNull(result);
    }

    @Test
    public void testFindTodaysFiles_matchingFiles() {
        Mockito.when(mockDirectory.exists()).thenReturn(true);

        File mockFile1 = Mockito.mock(File.class);
        File mockFile2 = Mockito.mock(File.class);

        Mockito.when(mockFile1.getName()).thenReturn("filePrefix_20250101.txt");
        Mockito.when(mockFile1.lastModified()).thenReturn(200L);

        Mockito.when(mockFile2.getName()).thenReturn("filePrefix_20250101.txt");
        Mockito.when(mockFile2.lastModified()).thenReturn(100L);

        Mockito.when(mockDirectory.listFiles(Mockito.any(FilenameFilter.class)))
                .thenReturn(new File[]{mockFile1, mockFile2});

        String result = FileUtils.findTodaysFiles("validPath", "filePrefix", ".txt");

        Assert.assertNotNull(result);
        Assert.assertEquals(mockFile1.getAbsolutePath(), result);
    }

    @Test
    public void testFindTodaysFiles_matchingFilesSorted() {
        Mockito.when(mockDirectory.exists()).thenReturn(true);

        File mockFile1 = Mockito.mock(File.class);
        File mockFile2 = Mockito.mock(File.class);

        Mockito.when(mockFile1.getName()).thenReturn("filePrefix_20250101.txt");
        Mockito.when(mockFile1.lastModified()).thenReturn(200L);
        Mockito.when(mockFile1.getAbsolutePath()).thenReturn("/path/to/file1.txt");

        Mockito.when(mockFile2.getName()).thenReturn("filePrefix_20250101.txt");
        Mockito.when(mockFile2.lastModified()).thenReturn(100L);
        Mockito.when(mockFile2.getAbsolutePath()).thenReturn("/path/to/file2.txt");

        Mockito.when(mockDirectory.listFiles(Mockito.any(FilenameFilter.class)))
                .thenReturn(new File[]{mockFile1, mockFile2});

        String result = FileUtils.findTodaysFiles("validPath", "filePrefix", ".txt");

        Assert.assertNotNull(result);
        Assert.assertEquals("/path/to/file1.txt", result); // File with latest modification date
    }
}
