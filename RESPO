@Override
public CustaggProcessedRecordsDTO process(CustaggRecordsDTO item) throws Exception {
    String entityFromFile = item.getEntity().trim();
    String accountNumber = item.getAccountNumber().trim();
    String productCode = item.getProductCode().trim();

    log.info("CustaggProcessor: Processing record - Entity: {}, AccountNumber: {}, ProductCode: {}",
             entityFromFile, accountNumber, productCode);

    if (entityMap.isEmpty()) {
        log.error("CustaggProcessor: The HashMap is empty! Ensure the EntityFileReader is correctly loading data.");
        throw new IllegalStateException("HashMap is empty. Check EntityFileReader.");
    }

    log.info("CustaggProcessor: HashMap contains {} entries.", entityMap.size());

    String mappedEntity = entityMap.get(entityFromFile);
    if (mappedEntity != null) {
        CustaggProcessedRecordsDTO enrichedRecord = new CustaggProcessedRecordsDTO();
        enrichedRecord.setMappedEntity(mappedEntity);
        enrichedRecord.setNumEntity(entityFromFile);
        enrichedRecord.setAccountNumber(accountNumber);
        enrichedRecord.setProductCode(productCode);

        log.info("CustaggProcessor: Match found - NumEntity: {}, MappedEntity: {}", entityFromFile, mappedEntity);

        List<String> scheduleIds = new ArrayList<>();

        // Fetch Schedule ID from Account_BOA
        String scheduleIdAccountBoa = fetchScheduleIdUsingAccountBoa(accountNumber, entityFromFile, productCode);
        if (scheduleIdAccountBoa != null) {
            scheduleIds.add(scheduleIdAccountBoa);
            log.info("CustaggProcessor: Fetched Schedule ID from Account_BOA: {}", scheduleIdAccountBoa);
        }

        // Fetch Schedule ID from Account_M2M
        String scheduleIdAccountM2M = fetchScheduleIdUsingAccountM2M(accountNumber, entityFromFile, productCode);
        if (scheduleIdAccountM2M != null) {
            scheduleIds.add(scheduleIdAccountM2M);
            log.info("CustaggProcessor: Fetched Schedule ID from Account_M2M: {}", scheduleIdAccountM2M);
        }

        enrichedRecord.setScheduleIds(scheduleIds);

        // Fetch xfer_exeq_m2m_id for each Schedule ID
        List<String> transferExecutionIds = new ArrayList<>();
        for (String scheduleId : scheduleIds) {
            String transferExecutionId = fetchTransferExecutionId(scheduleId);
            if (transferExecutionId != null) {
                transferExecutionIds.add(transferExecutionId);
                log.info("CustaggProcessor: Fetched Transfer Execution ID for Schedule ID {}: {}", scheduleId, transferExecutionId);
            } else {
                log.warn("CustaggProcessor: No Transfer Execution ID found for Schedule ID: {}", scheduleId);
            }
        }
        enrichedRecord.setTransferExecutionIds(transferExecutionIds);

        return enrichedRecord;
    } else {
        log.info("CustaggProcessor: No match found for Entity: {} in the HashMap.", entityFromFile);
    }

    return null; // Skip records with no match
}

private String fetchTransferExecutionId(String scheduleId) {
    try {
        log.info("Executing query to fetch Transfer Execution ID for Schedule ID: {}", scheduleId);
        return jdbcTemplate.queryForObject(
            CustaggSQLFactory.FETCH_TRANSFER_EXECUTION_ID,
            new Object[]{scheduleId},
            String.class
        );
    } catch (Exception e) {
        log.error("CustaggProcessor: Error fetching Transfer Execution ID for Schedule ID: {}", scheduleId, e);
        return null;
    }
}


public static final String FETCH_TRANSFER_EXECUTION_ID =
    "SELECT xfer_exeq_m2m_id " +
    "FROM sst_owner.transfer_execution_m2m temm " +
    "JOIN sst_owner.transfer_instruction_m2m timm " +
    "ON temm.xfer_instr_id = timm.xfer_instr_id " +
    "WHERE timm.schd_id = ? " +
    "AND timm.act_indct <> 'F'";
