@ExceptionHandler(FileValidationException.class)
public ResponseEntity<JobError> handleFileValidationException(FileValidationException exception) {
    log.error(LoggingUtil.logJobMessage(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getMessage()
    ));

    JobError jobError = new JobError(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getJobErrorEnum().getErrorDescription(),
            exception.getJobErrorEnum().getStatusCode()
    );

    return new ResponseEntity<>(jobError, HttpStatus.INTERNAL_SERVER_ERROR);
}

@StepScope
@Component
public class SdaResponseFileValidationTasklet implements Tasklet {

    @Override
    public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {
        ExecutionContext executionContext = stepContribution.getStepExecution().getJobExecution().getExecutionContext();

        String responseDirectoryPath = executionContext.getString(SdaResponseBatchConstants.RESPONSE_DIRECTORY_PATH);
        String responseInputFilePrefix = executionContext.getString(SdaResponseBatchConstants.RESPONSE_INPUT_FILE_PREFIX);
        String requestDirectoryPath = executionContext.getString(SdaResponseBatchConstants.REQUEST_DIRECTORY_PATH);
        String requestInputFilePrefix = executionContext.getString(SdaResponseBatchConstants.REQUEST_INPUT_FILE_PREFIX);

        log.debug(LoggingUtil.logJobMessage(
                "FILE_VALIDATION",
                responseInputFilePrefix,
                "Response Directory Path: " + responseDirectoryPath + ", Response Prefix: " + responseInputFilePrefix
        ));

        log.debug(LoggingUtil.logJobMessage(
                "FILE_VALIDATION",
                requestInputFilePrefix,
                "Request Directory Path: " + requestDirectoryPath + ", Request Prefix: " + requestInputFilePrefix
        ));

        String responseFilePath = "";
        String requestFilePath = "";

        try {
            responseFilePath = FileUtils.findTodaysFile(
                    responseDirectoryPath, 
                    responseInputFilePrefix, 
                    SdaResponseBatchConstants.INPUT_FILE_EXTENSION
            );

            log.info(LoggingUtil.logJobMessage(
                    "FILE_VALIDATION",
                    responseInputFilePrefix,
                    "Response File Path: " + responseFilePath
            ));

            try (BufferedInputStream bisResponse = new BufferedInputStream(new FileInputStream(new File(responseFilePath)))) {
                Long responseTotalRecords = (long) (bisResponse.readAllBytes().length);
                executionContext.put(SdaResponseBatchConstants.RESPONSE_COUNT, responseTotalRecords);

                log.info(LoggingUtil.logJobMessage(
                        "FILE_VALIDATION",
                        responseInputFilePrefix,
                        "Response Total Records: " + responseTotalRecords
                ));
            }
        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage(
                    "FILE_VALIDATION",
                    responseInputFilePrefix,
                    "Failed to read response file: " + e.getMessage()
            ));
            throw new FileValidationException(JobErrorEnum.FILE_READ_FAILED, e);
        }

        try {
            requestFilePath = FileUtils.findTodaysFile(
                    requestDirectoryPath, 
                    requestInputFilePrefix, 
                    SdaResponseBatchConstants.INPUT_FILE_EXTENSION
            );

            log.info(LoggingUtil.logJobMessage(
                    "FILE_VALIDATION",
                    requestInputFilePrefix,
                    "Request File Path: " + requestFilePath
            ));
        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage(
                    "FILE_VALIDATION",
                    requestInputFilePrefix,
                    "Failed to read request file: " + e.getMessage()
            ));
            throw new FileValidationException(JobErrorEnum.FILE_READ_FAILED, e);
        }

        // Check if both files exist
        if (responseFilePath == null || requestFilePath == null) {
            stepContribution.setExitStatus(ExitStatus.FAILED);
            return RepeatStatus.FINISHED;
        }

        try {
            log.info(LoggingUtil.logJobMessage(
                    "FILE_VALIDATION",
                    responseInputFilePrefix,
                    "Locking response file: " + responseFilePath
            ));

            FileUtils.lockFile(responseDirectoryPath, responseInputFilePrefix, SdaResponseBatchConstants.INPUT_FILE_EXTENSION);

            log.info(LoggingUtil.logJobMessage(
                    "FILE_VALIDATION",
                    requestInputFilePrefix,
                    "Locking request file: " + requestFilePath
            ));

            FileUtils.lockFile(requestDirectoryPath, requestInputFilePrefix, SdaResponseBatchConstants.INPUT_FILE_EXTENSION);
        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage(
                    "FILE_VALIDATION",
                    responseInputFilePrefix,
                    "Failed to lock files: " + e.getMessage()
            ));
            throw new FileValidationException(JobErrorEnum.FILE_LOCK_FAILED, e);
        }

        log.debug(LoggingUtil.logJobMessage(
                "FILE_VALIDATION",
                responseInputFilePrefix,
                "Trigger files exist, validated successfully"
        ));

        stepContribution.setExitStatus(ExitStatus.COMPLETED);
        return RepeatStatus.FINISHED;
    }
}
FILE_READ_FAILED("1010", "Failed to read the file", "500"),
FILE_LOCK_FAILED("1011", "Failed to lock the file", "500");
@Getter
public class FileValidationException extends RuntimeException {

    private final JobErrorEnum jobErrorEnum;

    public FileValidationException(JobErrorEnum jobErrorEnum, Throwable err) {
        super(err);
        this.jobErrorEnum = jobErrorEnum;
    }

    public FileValidationException(JobErrorEnum jobErrorEnum) {
        this.jobErrorEnum = jobErrorEnum;
    }
}
