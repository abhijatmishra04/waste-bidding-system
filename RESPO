import static org.junit.Assert.*;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.batch.item.ExecutionContext;

public class SdaResponseCompFilePartitionerTest {

    private SdaResponseCompFilePartitioner partitioner;
    private Path tempDirectory;
    private File testFile;

    @Before
    public void setUp() throws Exception {
        partitioner = new SdaResponseCompFilePartitioner();

        tempDirectory = Files.createTempDirectory("testDir");
        partitioner.directoryPath = tempDirectory.toString();

        testFile = new File(tempDirectory.toFile(), "testFile.lock");
        try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(testFile))) {
            byte[] record = new byte[152];
            for (int i = 0; i < 1000; i++) {
                bos.write(record);
            }
        }
    }

    @After
    public void tearDown() throws Exception {
        Files.deleteIfExists(testFile.toPath());
        Files.deleteIfExists(tempDirectory);
    }

    @Test
    public void testPartition_Success() throws Exception {
        int gridSize = 5;
        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertEquals(gridSize, partitions.size());

        int expectedFromLine = 1;
        int totalRecords = 1000;
        int recordsPerPartition = totalRecords / gridSize;
        int remainder = totalRecords % gridSize;

        for (int i = 0; i < gridSize; i++) {
            ExecutionContext context = partitions.get("partition" + i);
            assertNotNull(context);

            int expectedToLine = expectedFromLine + recordsPerPartition - 1;
            if (i < remainder) expectedToLine++;

            assertEquals(expectedFromLine, context.getInt("fromLine"));
            assertEquals(expectedToLine, context.getInt("toLine"));

            expectedFromLine = expectedToLine + 1;
        }
    }

    @Test
    public void testPartition_EmptyFile() throws Exception {
        Files.deleteIfExists(testFile.toPath());
        testFile.createNewFile();

        int gridSize = 5;
        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertTrue(partitions.isEmpty());
    }
}

            
