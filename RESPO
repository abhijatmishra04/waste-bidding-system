package com.bofa.sst.batch.core.impl;

import org.junit.*;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.*;
import java.nio.file.*;
import java.util.HashMap;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CustaggEntityFileReaderTest {

    private CustaggEntityFileReader fileReader;
    private Path testFilePath;

    @Before
    public void setUp() throws Exception {
        fileReader = new CustaggEntityFileReader();
        testFilePath = Files.createTempFile("test-entity-file", ".txt");
        ReflectionTestUtils.setField(fileReader, "filePath", testFilePath.toString());
    }

    @Test
    public void testLoadEntityMap_Success() throws Exception {
        // Valid file with correct lines
        Files.write(testFilePath, 
            ("ABCD1234\n" +
             "WXYZ5678\n").getBytes());

        HashMap<String, String> entityMap = fileReader.loadEntityMap();

        assertNotNull("Entity map should not be null", entityMap);
        assertEquals("Entity map should contain 2 entries", 2, entityMap.size());
        assertEquals("ABCD", entityMap.get("1234"));
        assertEquals("WXYZ", entityMap.get("5678"));
    }

    @Test
    public void testLoadEntityMap_SkipShortLines() throws Exception {
        // File with one valid line and one short line
        Files.write(testFilePath, 
            ("SHORT\n" +
             "ABCD1234\n").getBytes());

        HashMap<String, String> entityMap = fileReader.loadEntityMap();

        assertNotNull("Entity map should not be null", entityMap);
        assertEquals("Entity map should contain 1 entry", 1, entityMap.size());
        assertEquals("ABCD", entityMap.get("1234"));
    }

    @Test
    public void testLoadEntityMap_SkipLinesWithMissingValues() throws Exception {
        // File with missing values in one line
        Files.write(testFilePath, 
            ("    1234\n" + // Missing alphaEntity
             "ABCD    \n" + // Missing numEntity
             "WXYZ5678\n").getBytes());

        HashMap<String, String> entityMap = fileReader.loadEntityMap();

        assertNotNull("Entity map should not be null", entityMap);
        assertEquals("Entity map should contain 1 entry", 1, entityMap.size());
        assertEquals("WXYZ", entityMap.get("5678"));
    }

    @Test
    public void testLoadEntityMap_EmptyFile() throws Exception {
        // Empty file
        Files.write(testFilePath, "".getBytes());

        HashMap<String, String> entityMap = fileReader.loadEntityMap();

        assertNotNull("Entity map should not be null", entityMap);
        assertTrue("Entity map should be empty", entityMap.isEmpty());
    }

    @Test
    public void testLoadEntityMap_AllInvalidLines() throws Exception {
        // File with all invalid lines
        Files.write(testFilePath, 
            ("SHORT\n" +
             "    1234\n" +
             "ABCD    \n").getBytes());

        HashMap<String, String> entityMap = fileReader.loadEntityMap();

        assertNotNull("Entity map should not be null", entityMap);
        assertTrue("Entity map should be empty", entityMap.isEmpty());
    }

    @Test(expected = Exception.class)
    public void testLoadEntityMap_FileNotFound() throws Exception {
        // Set a non-existent file path
        ReflectionTestUtils.setField(fileReader, "filePath", "non-existent-file.txt");
        fileReader.loadEntityMap();
    }

    @Test
    public void testLoadEntityMap_ErrorReadingFile() throws Exception {
        // Mock BufferedReader to throw IOException
        CustaggEntityFileReader mockFileReader = Mockito.spy(fileReader);

        doThrow(new IOException("Simulated read error"))
                .when(mockFileReader)
                .loadEntityMap();

        try {
            mockFileReader.loadEntityMap();
            fail("Expected exception due to file read error");
        } catch (Exception e) {
            assertTrue("Exception message should contain 'Error reading file'", 
                e.getMessage().contains("Error reading file"));
        }
    }

    @After
    public void tearDown() throws Exception {
        if (Files.exists(testFilePath)) {
            Files.deleteIfExists(testFilePath);
        }
    }
}
