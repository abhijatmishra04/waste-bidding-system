import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Objects;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class FileUtilsTest {

    private Path tempDir;
    private File tempFile;
    private File tempFile2;

    @Before
    public void setUp() throws IOException {
        // Create a temporary directory
        tempDir = Files.createTempDirectory("testDir");

        // Create temporary files
        tempFile = Files.createTempFile(tempDir, "testFile_20240214", ".txt").toFile();
        tempFile2 = Files.createTempFile(tempDir, "testFile_20240213", ".txt").toFile();

        // Write some content to the files
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write("Sample content");
        }
        try (FileWriter writer = new FileWriter(tempFile2)) {
            writer.write("Old content");
        }
    }

    @After
    public void tearDown() {
        // Cleanup: Delete temp files and directory
        tempFile.delete();
        tempFile2.delete();
        tempDir.toFile().delete();
    }

    @Test
    public void testFindTodaysFiles() {
        String result = FileUtils.findTodaysFiles(tempDir.toString(), "testFile", ".txt");
        assertNotNull(result);
        assertTrue(result.endsWith(".txt"));
    }

    @Test
    public void testLockFile() {
        boolean result = FileUtils.lockFile(tempDir.toString(), "testFile", ".txt");
        assertTrue(result);

        File lockedFile = new File(tempFile.getAbsolutePath() + ".lock");
        assertTrue(lockedFile.exists());
        lockedFile.delete();  // Cleanup
    }

    @Test
    public void testUnlockFile() {
        // First, lock the file
        File lockedFile = new File(tempFile.getAbsolutePath() + ".lock");
        tempFile.renameTo(lockedFile);

        boolean result = FileUtils.unlockFile(tempDir.toString(), "testFile", ".txt");
        assertTrue(result);
        assertFalse(lockedFile.exists());  // It should be renamed back
    }

    @Test
    public void testArchiveFile() {
        boolean result = FileUtils.archiveFile(tempDir.toString(), "testFile", ".txt");
        assertTrue(result);

        File archiveFile = new File(tempDir.toFile(), "archive/testFile_20240214.txt");
        assertTrue(archiveFile.exists());
        archiveFile.delete();  // Cleanup
    }

    @Test
    public void testErrorFile() {
        boolean result = FileUtils.errorFile(tempDir.toString(), "testFile", ".txt");
        assertTrue(result);

        File errorFile = new File(tempDir.toFile(), "error/testFile_20240214.txt");
        assertTrue(errorFile.exists());
        errorFile.delete();  // Cleanup
    }

    @Test
    public void testIsTodayFilePresent_True() {
        boolean result = FileUtils.isTodayFilePresent(tempDir.toString(), "testFile", ".txt");
        assertTrue(result);
    }

    @Test
    public void testIsTodayFilePresent_False() {
        tempFile.delete();  // Remove file to simulate missing file
        boolean result = FileUtils.isTodayFilePresent(tempDir.toString(), "testFile", ".txt");
        assertFalse(result);
    }
}
