package com.bofa.sst.batch.core.impl;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;
import org.mockito.MockedStatic;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.scope.context.ExecutionContext;

@RunWith(MockitoJUnitRunner.class)
public class CustaggFileValidationTaskletTest {

    private CustaggFileValidationTasklet tasklet;

    @Mock
    private StepContribution stepContribution;
    
    @Mock
    private ChunkContext chunkContext;
    
    @Mock
    private StepExecution stepExecution;
    
    @Mock
    private JobExecution jobExecution;
    
    @Mock
    private ExecutionContext executionContext;
    
    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        tasklet = new CustaggFileValidationTasklet();
        
        when(stepContribution.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);
    }

    @Test
    public void testExecute_Success() throws Exception {
        // Mock directory paths
        when(executionContext.getString(CustaggBatchConstants.DIRECTORY_PATH)).thenReturn("C:\\SST\\");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERDATA)).thenReturn("REFERDATA");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERENTRY)).thenReturn("REFERENTRY");

        try (MockedStatic<FileUtils> fileUtilsMock = Mockito.mockStatic(FileUtils.class)) {
            // Define expected file paths
            String responseFilePath = "C:\\SST\\RESPONSE.FILE20231125.txt";
            String requestFilePath = "C:\\SST\\REQUEST.FILE20231125.txt";
            String trailerFilePath = "C:\\SST\\TRAILER.FILE20231125.txt";

            // Mock FileUtils behavior
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERDATA", CustaggBatchConstants.INPUT_FILE_EXTENSION))
                    .thenReturn(responseFilePath);
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERENTRY", CustaggBatchConstants.INPUT_FILE_EXTENSION))
                    .thenReturn(requestFilePath);
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERENTRY", CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenReturn(trailerFilePath);

            fileUtilsMock.when(() -> FileUtils.lockFile(anyString(), anyString(), anyString())).thenReturn(true);

            // Mock BufferedReader behavior
            BufferedReader mockReader = mock(BufferedReader.class);
            when(mockReader.readLine()).thenReturn("ABCD1234", null); // Mock valid line, then EOF

            // FIX: Use `PowerMockito.whenNew()` for constructor mocking
            try (MockedStatic<FileReader> fileReaderMock = mockStatic(FileReader.class);
                 MockedStatic<BufferedReader> bufferedReaderMock = mockStatic(BufferedReader.class)) {

                whenNew(FileReader.class).withArguments(trailerFilePath).thenReturn(mock(FileReader.class));
                whenNew(BufferedReader.class).withArguments(any(FileReader.class)).thenReturn(mockReader);

                // Execute tasklet
                RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
                assertEquals(RepeatStatus.FINISHED, status);
                verify(stepContribution).setExitStatus(ExitStatus.COMPLETED);
            }
        }
    }

    @Test(expected = FileNotFoundException.class)
    public void testExecute_FileNotFound() throws Exception {
        // Mock directory paths
        when(executionContext.getString(CustaggBatchConstants.DIRECTORY_PATH)).thenReturn("C:\\SST\\");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERDATA)).thenReturn("REFERDATA");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERENTRY)).thenReturn("REFERENTRY");

        try (MockedStatic<FileUtils> fileUtilsMock = Mockito.mockStatic(FileUtils.class)) {
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERDATA", CustaggBatchConstants.INPUT_FILE_EXTENSION))
                    .thenReturn(null);
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERENTRY", CustaggBatchConstants.INPUT_FILE_EXTENSION))
                    .thenReturn(null);

            tasklet.execute(stepContribution, chunkContext);
        }
    }

    @Test(expected = Exception.class)
    public void testExecute_IOExceptionHandling() throws Exception {
        // Mock directory paths
        when(executionContext.getString(CustaggBatchConstants.DIRECTORY_PATH)).thenReturn("C:\\SST\\");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERENTRY)).thenReturn("REFERENTRY");

        try (MockedStatic<FileUtils> fileUtilsMock = Mockito.mockStatic(FileUtils.class)) {
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERENTRY", CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenReturn("C:\\SST\\TRAILER.FILE20231125.txt");

            // FIX: Use `PowerMockito.whenNew()` for constructor mocking
            whenNew(FileReader.class).withArguments("C:\\SST\\TRAILER.FILE20231125.txt").thenThrow(new IOException());

            tasklet.execute(stepContribution, chunkContext);
        }
    }

    @Test
    public void testExecute_LockFileExceptionHandling() throws Exception {
        // Mock directory paths
        when(executionContext.getString(CustaggBatchConstants.DIRECTORY_PATH)).thenReturn("C:\\SST\\");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERDATA)).thenReturn("REFERDATA");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERENTRY)).thenReturn("REFERENTRY");

        try (MockedStatic<FileUtils> fileUtilsMock = Mockito.mockStatic(FileUtils.class)) {
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERDATA", CustaggBatchConstants.INPUT_FILE_EXTENSION))
                    .thenReturn("C:\\SST\\RESPONSE.FILE20231125.txt");
            fileUtilsMock.when(() -> FileUtils.findTodaysFiles("C:\\SST\\", "REFERENTRY", CustaggBatchConstants.INPUT_FILE_EXTENSION))
                    .thenReturn("C:\\SST\\REQUEST.FILE20231125.txt");

            fileUtilsMock.when(() -> FileUtils.lockFile(anyString(), anyString(), anyString()))
                    .thenThrow(new RuntimeException("Lock failed"));

            try {
                tasklet.execute(stepContribution, chunkContext);
            } catch (Exception e) {
                assertTrue(e.getMessage().contains("Lock failed"));
            }
        }
    }
}
