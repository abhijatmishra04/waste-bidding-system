package com.bofa.sst.batch.core.impl;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.scope.context.ExecutionContext;
import org.springframework.batch.repeat.RepeatStatus;

@RunWith(MockitoJUnitRunner.class)
public class CustaggFileValidationTaskletTest {

    @InjectMocks
    private CustaggFileValidationTasklet tasklet;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private StepContext stepContext;

    @Mock
    private StepExecution stepExecution;

    @Mock
    private JobExecution jobExecution;

    @Mock
    private ExecutionContext executionContext;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);

        when(chunkContext.getStepContext()).thenReturn(stepContext);
        when(stepContext.getStepExecution()).thenReturn(stepExecution);
        when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);

        when(executionContext.getString(CustaggBatchConstants.DIRECTORY_PATH)).thenReturn("/mock/directory");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERDATA)).thenReturn("FilePrefixReferData");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERENTRY)).thenReturn("FilePrefixReferEnty");

        when(executionContext.get(anyString())).thenReturn(new HashMap<>());

        doNothing().when(stepContribution).setExitStatus(any());
    }

    @Test
    public void testExecute_Success() throws Exception {
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, status);
    }

    @Test
    public void testExecute_FileNotFound() throws Exception {
        when(executionContext.getString(CustaggBatchConstants.DIRECTORY_PATH)).thenReturn(null);
        try {
            tasklet.execute(stepContribution, chunkContext);
            fail("Expected exception was not thrown");
        } catch (Exception e) {
            assertTrue(e instanceof FileNotFoundException);
        }
    }

    @Test
    public void testExecute_ExecutionContext_Null() throws Exception {
        when(jobExecution.getExecutionContext()).thenReturn(null);
        try {
            tasklet.execute(stepContribution, chunkContext);
        } catch (Exception e) {
            assertNotNull(e);
        }
    }

    @Test
    public void testExecute_LockFileException() throws Exception {
        doThrow(new RuntimeException("Lock file failed")).when(stepContribution).setExitStatus(any());
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, status);
    }
}
