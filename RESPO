import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class UdapRequestPaymentInfoProcessorTest {

    @InjectMocks
    private UdapRequestPaymentInfoProcessor processor;

    @Mock
    private UdapRequestPaymentInfoDTO dto;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    /** Test Case: REM_STMT_BAL **/
    @Test
    public void testProcess_RemStmtBal_Success() throws Exception {
        when(dto.getRecurAmtType()).thenReturn(UdapRequestBatchConstants.CASE_REM_STMT_BAL);
        when(dto.getPmtAmt()).thenReturn(100.00);

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals(UdapRequestBatchConstants.SST_REM_STMT_BAL_ONETIME, result.getPaymentType());
        assertEquals(Double.valueOf(100.00), result.getOrigPaymentAmt());
        assertEquals(UdapRequestBatchConstants.AMT_TYPE_RSB, result.getAmtType());
    }

    @Test
    public void testProcess_RemStmtBal_NullPmtAmt() throws Exception {
        when(dto.getRecurAmtType()).thenReturn(UdapRequestBatchConstants.CASE_REM_STMT_BAL);
        when(dto.getPmtAmt()).thenReturn(null);

        UdapRequestPaymentInfoDTO result = processor.process(dto);
        assertNull(result);
    }

    /** Test Case: ISB **/
    @Test
    public void testProcess_ISB_Success() throws Exception {
        when(dto.getRecurAmtType()).thenReturn(UdapRequestBatchConstants.CASE_ISB);
        when(dto.getProcessCode()).thenReturn(UdapRequestBatchConstants.PROCESS_CODE_P00);
        when(dto.getMinStmtCrtRegAmt()).thenReturn(200.00);

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals(UdapRequestBatchConstants.SST_ONETIME_ISB, result.getPaymentType());
        assertEquals(Double.valueOf(200.00), result.getOrigPaymentAmt());
        assertEquals(UdapRequestBatchConstants.AMT_TYPE_ISB, result.getAmtType());
    }

    @Test
    public void testProcess_ISB_NullProcessCode() throws Exception {
        when(dto.getRecurAmtType()).thenReturn(UdapRequestBatchConstants.CASE_ISB);
        when(dto.getProcessCode()).thenReturn(null);

        UdapRequestPaymentInfoDTO result = processor.process(dto);
        assertNull(result);
    }

    @Test
    public void testProcess_ISB_NullMinStmtCrtRegAmt() throws Exception {
        when(dto.getRecurAmtType()).thenReturn(UdapRequestBatchConstants.CASE_ISB);
        when(dto.getProcessCode()).thenReturn(UdapRequestBatchConstants.PROCESS_CODE_P00);
        when(dto.getMinStmtCrtRegAmt()).thenReturn(null);

        UdapRequestPaymentInfoDTO result = processor.process(dto);
        assertNull(result);
    }

    /** Test Case: REM_ISB **/
    @Test
    public void testProcess_RemIsb_Success() throws Exception {
        when(dto.getRecurAmtType()).thenReturn(UdapRequestBatchConstants.CASE_REM_ISB);
        when(dto.getPmtAmt()).thenReturn(300.00);

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals(UdapRequestBatchConstants.SST_REM_ISB, result.getPaymentType());
        assertEquals(Double.valueOf(300.00), result.getOrigPaymentAmt());
        assertEquals(UdapRequestBatchConstants.AMT_TYPE_RIS, result.getAmtType());
    }

    @Test
    public void testProcess_RemIsb_NullPmtAmt() throws Exception {
        when(dto.getRecurAmtType()).thenReturn(UdapRequestBatchConstants.CASE_REM_ISB);
        when(dto.getPmtAmt()).thenReturn(null);

        UdapRequestPaymentInfoDTO result = processor.process(dto);
        assertNull(result);
    }
}
