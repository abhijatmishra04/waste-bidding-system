@RunWith(MockitoJUnitRunner.class)
public class CustaggProcessorTest {

    @InjectMocks
    private CustaggProcessor processor;

    @Mock
    private StepExecution mockStepExecution;

    @Mock
    private ExecutionContext mockExecutionContext;

    @Before
    public void setUp() {
        Mockito.when(mockStepExecution.getExecutionContext()).thenReturn(mockExecutionContext);
    }

    @Test
    public void testBeforeStep_validEntityMap() {
        HashMap<String, String> mockEntityMap = new HashMap<>();
        mockEntityMap.put("key1", "value1");
        mockEntityMap.put("key2", "value2");

        Mockito.when(mockExecutionContext.get("entityMap")).thenReturn(mockEntityMap);

        processor.beforeStep(mockStepExecution);

        Assert.assertEquals(mockEntityMap, ReflectionTestUtils.getField(processor, "entityMap"));
    }

    @Test(expected = IllegalStateException.class)
    public void testBeforeStep_nullEntityMap() {
        Mockito.when(mockExecutionContext.get("entityMap")).thenReturn(null);
        processor.beforeStep(mockStepExecution);
    }

    @Test(expected = IllegalStateException.class)
    public void testBeforeStep_emptyEntityMap() {
        HashMap<String, String> mockEntityMap = new HashMap<>();
        Mockito.when(mockExecutionContext.get("entityMap")).thenReturn(mockEntityMap);
        processor.beforeStep(mockStepExecution);
    }

    @Test
    public void testBeforeStep_logInfo() {
        HashMap<String, String> mockEntityMap = new HashMap<>();
        mockEntityMap.put("key1", "value1");

        Mockito.when(mockExecutionContext.get("entityMap")).thenReturn(mockEntityMap);

        processor.beforeStep(mockStepExecution);
    }
}
