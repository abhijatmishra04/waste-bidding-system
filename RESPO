import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import java.math.BigDecimal;

public class UdapRequestPaymentInfoProcessorTest {

    private UdapRequestPaymentInfoProcessor processor;

    @Before
    public void setUp() {
        processor = new UdapRequestPaymentInfoProcessor();
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully123() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType(UdapRequestBatchConstants.CASE_CONST_RECUR);
        dto.setProcessCode(UdapRequestBatchConstants.PROCESS_CODE_P00);
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("FIX", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully716() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType(UdapRequestBatchConstants.CASE_OTHER);
        dto.setProcessCode(UdapRequestBatchConstants.PROCESS_CODE_P00);
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("CCA", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully722() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType(UdapRequestBatchConstants.CASE_CONST_RECUR);
        dto.setProcessCode(UdapRequestBatchConstants.PROCESS_CODE_P00);
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("FIX", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully983() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType(UdapRequestBatchConstants.CASE_OTHER);
        dto.setProcessCode(UdapRequestBatchConstants.PROCESS_CODE_P00);
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("FIX", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully896() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType(UdapRequestBatchConstants.CASE_CUR_BAL);
        dto.setProcessCode(UdapRequestBatchConstants.PROCESS_CODE_P00);
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("FIX", result.getAmtType());
    }
}
