public JdbcPagingItemReader<SdaInputDto> getPagingItemReader(
        @Value("#{stepExecutionContext['fromLine']}") Integer fromLine,
        @Value("#{stepExecutionContext['toLine']}") Integer toLine) throws Exception {

    JdbcPagingItemReader<SdaInputDto> reader = new JdbcPagingItemReader<>();

    try {
        reader.setDataSource(dataSource);
        reader.setFetchSize(fetchSize);
        reader.setRowMapper(rowMapper());
        reader.setPageSize(pageSize);

        log.info(LoggingUtil.logJobMessage(jobExecutionId, "OraclePagingQueryProvider started"));

        OraclePagingQueryProvider provider = new OraclePagingQueryProvider();
        provider.setSelectClause(SQLFactory.SELECT_CLAUSE);
        provider.setFromClause(SQLFactory.FROM_SCHEDULE_M2M_AND_ACCOUNT_M2M);
        provider.setWhereClause(SQLFactory.WHERE_CLAUSE_SEQUENCE_NUM + fromLine + SQLFactory.AND_PHRASE + toLine);

        Map<String, Order> orderById = new HashMap<>();
        orderById.put(SQLFactory.ORDER_BY_SEQUENCE_NUM, Order.ASCENDING);
        provider.setSortKeys(orderById);

        reader.setQueryProvider(provider);

        log.info(LoggingUtil.logJobMessage(jobExecutionId, "OraclePagingQueryProvider completed"));
    } catch (Exception e) {
        log.error(LoggingUtil.logJobMessage(jobExecutionId, "Failed to initialize OraclePagingQueryProvider"));
        throw new SdaRequestDatabaseException(JobErrorEnum.DATABASE_INITIALIZATION_FAILED, e);
    }

    return reader;
}

@Bean
public RowMapper<SdaInputDto> rowMapper() {
    return (rs, i) -> {
        log.info(LoggingUtil.logJobMessage(jobExecutionId, "RowMapper Started"));

        SdaInputDto input = new SdaInputDto();
        input.setSstKey(rs.getString("sst_key"));
        input.setConfirmationNumber(rs.getString("cnfrm_no"));
        input.setPaymentAmount(rs.getBigDecimal("pmt_am"));
        input.setNextTransactionDate(rs.getString("nxt_tran_dt"));
        input.setAccountNumber(rs.getString("acc_no"));
        input.setEntityCode(rs.getString("ent_cd"));
        input.setProductCode(rs.getString("prod_cd"));
        input.setSubProductCode(rs.getString("sub_prod_cd"));

        log.info(LoggingUtil.logJobMessage(jobExecutionId, "RowMapper Completed"));
        return input;
    };
}
@Value("#{jobExecutionContext['jobExecutionId']}")
private Long jobExecutionId;

@ExceptionHandler(SdaRequestDatabaseException.class)
public ResponseEntity<JobError> handleDatabaseException(SdaRequestDatabaseException exception) {
    log.error(LoggingUtil.logJobMessage(exception.getJobErrorEnum().getErrorCode(), exception.getMessage()));
    JobError jobError = new JobError(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getJobErrorEnum().getErrorDescription(),
            Integer.parseInt(exception.getJobErrorEnum().getStatusCode())
    );
    return new ResponseEntity<>(jobError, HttpStatus.BAD_REQUEST);
}

