package com.bofa.sst.batch.partition;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.powermock.api.mockito.PowerMockito.mockStatic;
import static org.powermock.api.mockito.PowerMockito.when;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.batch.item.ExecutionContext;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import com.bofa.sst.batch.constants.CustaggBatchConstants;
import com.bofa.sst.batch.util.FileUtils;

/**
 * JUnit4 test class for CustaggFilePartitioner with 100% code coverage.
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({FileUtils.class})
public class CustaggFilePartitionerTest {

    private CustaggFilePartitioner partitioner;

    // These are dummy values for the injected fields.
    private static final String DUMMY_DIRECTORY = "dummyDirectory";
    private static final String DUMMY_PREFIX = "dummyPrefix";
    private static final String DUMMY_FILEPATH = "dummyFilePath";

    @Before
    public void setUp() {
        // Create a new instance and set the required fields.
        partitioner = new CustaggFilePartitioner();
        partitioner.directoryPath = DUMMY_DIRECTORY;
        partitioner.filePrefixReferData = DUMMY_PREFIX;
        partitioner.filePath = DUMMY_FILEPATH;

        // Prepare FileUtils for static mocking.
        mockStatic(FileUtils.class);
    }

    @After
    public void tearDown() {
        // Clear any stubbing on FileUtils.
        // (Optional: PowerMockito.reset(FileUtils.class);)
    }

    /**
     * Test when FileUtils.findLatestSysFiles returns a path to a file that does not exist.
     */
    @Test
    public void testPartitionWhenFileDoesNotExist() {
        // Stub the static method to return a non-existent file path.
        String nonExistentPath = "nonexistent_file.txt";
        when(FileUtils.findLatestSysFiles(DUMMY_DIRECTORY, DUMMY_PREFIX, CustaggBatchConstants.LOCK_FILE_EXTENSION))
            .thenReturn(nonExistentPath);

        Map<String, ExecutionContext> partitions = partitioner.partition(1);
        assertNotNull(partitions);
        // Since the file does not exist, the partition map should be empty.
        assertTrue(partitions.isEmpty());
    }

    /**
     * Test when the file exists but is empty.
     */
    @Test
    public void testPartitionWhenFileIsEmpty() throws Exception {
        File tempFile = File.createTempFile("emptyFile", ".txt");
        tempFile.deleteOnExit();
        // Make sure the file is empty.
        assertEquals(0, tempFile.length());

        when(FileUtils.findLatestSysFiles(DUMMY_DIRECTORY, DUMMY_PREFIX, CustaggBatchConstants.LOCK_FILE_EXTENSION))
            .thenReturn(tempFile.getAbsolutePath());

        Map<String, ExecutionContext> partitions = partitioner.partition(1);
        assertNotNull(partitions);
        assertTrue(partitions.isEmpty());

        tempFile.delete();
    }

    /**
     * Test when the file exists but its length is less than RECORD_SIZE,
     * so no records can be read.
     */
    @Test
    public void testPartitionWhenFileSizeLessThanRecordSize() throws Exception {
        long recordSize = CustaggBatchConstants.RECORD_SIZE;
        // Create a file with fewer bytes than RECORD_SIZE (if possible).
        int fileSize = recordSize > 1 ? (int) recordSize - 1 : 0;
        File tempFile = File.createTempFile("smallFile", ".txt");
        tempFile.deleteOnExit();
        if (fileSize > 0) {
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                byte[] data = new byte[fileSize];
                fos.write(data);
            }
        }
        when(FileUtils.findLatestSysFiles(DUMMY_DIRECTORY, DUMMY_PREFIX, CustaggBatchConstants.LOCK_FILE_EXTENSION))
            .thenReturn(tempFile.getAbsolutePath());

        Map<String, ExecutionContext> partitions = partitioner.partition(1);
        assertNotNull(partitions);
        // Since totalRecords will be 0, no partitions should be created.
        assertTrue(partitions.isEmpty());

        tempFile.delete();
    }

    /**
     * Test valid partitioning when the total number of records divides evenly among partitions.
     * For example, with gridSize=2 and totalRecords=6.
     */
    @Test
    public void testEvenDivisionPartitioning() throws Exception {
        long recordSize = CustaggBatchConstants.RECORD_SIZE;
        int totalRecords = 6;
        int gridSize = 2;
        int fileSize = (int) (totalRecords * recordSize);

        File tempFile = File.createTempFile("evenFile", ".txt");
        tempFile.deleteOnExit();
        try (FileOutputStream fos = new FileOutputStream(tempFile)) {
            byte[] data = new byte[fileSize];
            fos.write(data);
        }
        when(FileUtils.findLatestSysFiles(DUMMY_DIRECTORY, DUMMY_PREFIX, CustaggBatchConstants.LOCK_FILE_EXTENSION))
            .thenReturn(tempFile.getAbsolutePath());

        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);
        assertNotNull(partitions);
        assertEquals(gridSize, partitions.size());

        // With 6 total records and 2 partitions:
        // linesPerPartition = 6 / 2 = 3; remainder = 0.
        // Partition 0 should have records 1-3 and partition 1 should have records 4-6.
        ExecutionContext context0 = partitions.get("partition0");
        assertNotNull(context0);
        assertEquals(1, context0.getInt("fromLine"));
        assertEquals(3, context0.getInt("toLine"));
        assertEquals(3, context0.getInt("numberOfRecords"));

        ExecutionContext context1 = partitions.get("partition1");
        assertNotNull(context1);
        assertEquals(4, context1.getInt("fromLine"));
        assertEquals(6, context1.getInt("toLine"));
        assertEquals(3, context1.getInt("numberOfRecords"));

        tempFile.delete();
    }

    /**
     * Test valid partitioning when the total number of records does not divide evenly among partitions.
     * For example, with gridSize=3 and totalRecords=10.
     */
    @Test
    public void testUnevenDivisionPartitioning() throws Exception {
        long recordSize = CustaggBatchConstants.RECORD_SIZE;
        int totalRecords = 10;
        int gridSize = 3;
        int fileSize = (int) (totalRecords * recordSize);

        File tempFile = File.createTempFile("unevenFile", ".txt");
        tempFile.deleteOnExit();
        try (FileOutputStream fos = new FileOutputStream(tempFile)) {
            byte[] data = new byte[fileSize];
            fos.write(data);
        }
        when(FileUtils.findLatestSysFiles(DUMMY_DIRECTORY, DUMMY_PREFIX, CustaggBatchConstants.LOCK_FILE_EXTENSION))
            .thenReturn(tempFile.getAbsolutePath());

        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);
        assertNotNull(partitions);
        assertEquals(gridSize, partitions.size());

        // With totalRecords=10 and gridSize=3:
        // linesPerPartition = 10 / 3 = 3 and remainder = 10 % 3 = 1.
        // Partition 0 gets an extra record.
        // Partition 0: fromLine=1, toLine=4 (4 records)
        // Partition 1: fromLine=5, toLine=7 (3 records)
        // Partition 2: fromLine=8, toLine=10 (3 records)
        ExecutionContext context0 = partitions.get("partition0");
        assertNotNull(context0);
        assertEquals(1, context0.getInt("fromLine"));
        assertEquals(4, context0.getInt("toLine"));
        assertEquals(4, context0.getInt("numberOfRecords"));

        ExecutionContext context1 = partitions.get("partition1");
        assertNotNull(context1);
        assertEquals(5, context1.getInt("fromLine"));
        assertEquals(7, context1.getInt("toLine"));
        assertEquals(3, context1.getInt("numberOfRecords"));

        ExecutionContext context2 = partitions.get("partition2");
        assertNotNull(context2);
        assertEquals(8, context2.getInt("fromLine"));
        assertEquals(10, context2.getInt("toLine"));
        assertEquals(3, context2.getInt("numberOfRecords"));

        tempFile.delete();
    }

    /**
     * Test the exception handling path: if FileUtils.findLatestSysFiles returns null,
     * new File(null) will throw an exception which is caught.
     */
    @Test
    public void testPartitionExceptionHandling() {
        // Stub the static method to return null.
        when(FileUtils.findLatestSysFiles(DUMMY_DIRECTORY, DUMMY_PREFIX, CustaggBatchConstants.LOCK_FILE_EXTENSION))
            .thenReturn(null);

        Map<String, ExecutionContext> partitions = partitioner.partition(1);
        assertNotNull(partitions);
        // Even though an exception was thrown, the partitioner returns an empty map.
        assertTrue(partitions.isEmpty());
    }
}
