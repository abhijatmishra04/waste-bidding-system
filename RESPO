package com.bofa.sst.batch.exception;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
public class CustaggGlobalExceptionHandlerTest {

    @InjectMocks
    private CustaggGlobalExceptionHandler exceptionHandler;

    @Mock
    private CustaggJobException jobException;

    @Mock
    private CustaggValidationException validationException;

    @Mock
    private CustaggDatabaseException databaseException;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    /**
     * Test JobException handler when the exception message is non-empty.
     */
    @Test
    public void testHandleJobException_WithMessage() {
        // Arrange
        when(jobException.getMessage()).thenReturn("Job error occurred");
        when(jobException.getJobErrorEnum()).thenReturn(JobErrorEnum.JOB_ERROR);

        // Act
        ResponseEntity<CustaggJobError> response = exceptionHandler.handleJobException(jobException);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Job error occurred", response.getBody().getDescription());
        verify(jobException, times(1)).getMessage();
    }

    /**
     * Test JobException handler when the exception message is empty.
     */
    @Test
    public void testHandleJobException_EmptyMessage() {
        // Arrange
        when(jobException.getMessage()).thenReturn("");
        when(jobException.getJobErrorEnum()).thenReturn(JobErrorEnum.JOB_ERROR);

        // Act
        ResponseEntity<CustaggJobError> response = exceptionHandler.handleJobException(jobException);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(JobErrorEnum.JOB_ERROR.getDescription(), response.getBody().getDescription());
    }

    /**
     * Test ValidationException handler when the exception message is non-empty.
     */
    @Test
    public void testHandleValidationException_WithMessage() {
        // Arrange
        when(validationException.getMessage()).thenReturn("Validation error occurred");
        when(validationException.getJobErrorEnum()).thenReturn(JobErrorEnum.VALIDATION_ERROR);

        // Act
        ResponseEntity<CustaggJobError> response = exceptionHandler.handleValidationException(validationException);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Validation error occurred", response.getBody().getDescription());
    }

    /**
     * Test ValidationException handler when the exception message is empty.
     */
    @Test
    public void testHandleValidationException_EmptyMessage() {
        // Arrange
        when(validationException.getMessage()).thenReturn("");
        when(validationException.getJobErrorEnum()).thenReturn(JobErrorEnum.VALIDATION_ERROR);

        // Act
        ResponseEntity<CustaggJobError> response = exceptionHandler.handleValidationException(validationException);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(JobErrorEnum.VALIDATION_ERROR.getDescription(), response.getBody().getDescription());
    }

    /**
     * Test generic Exception handler.
     */
    @Test
    public void testHandleException() {
        // Arrange
        Exception exception = new Exception("Internal server error");

        // Act
        ResponseEntity<CustaggJobError> response = exceptionHandler.handleException(exception);

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertEquals("Internal server error", response.getBody().getDescription());
    }

    /**
     * Test DatabaseException handler when the exception message is non-empty.
     */
    @Test
    public void testHandleDatabaseException_WithMessage() {
        // Arrange
        when(databaseException.getMessage()).thenReturn("Database error occurred");
        when(databaseException.getJobErrorEnum()).thenReturn(JobErrorEnum.DATABASE_ERROR);

        // Act
        ResponseEntity<CustaggJobError> response = exceptionHandler.handleDatabaseException(databaseException);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals("Database error occurred", response.getBody().getDescription());
    }

    /**
     * Test DatabaseException handler when the exception message is empty.
     */
    @Test
    public void testHandleDatabaseException_EmptyMessage() {
        // Arrange
        when(databaseException.getMessage()).thenReturn("");
        when(databaseException.getJobErrorEnum()).thenReturn(JobErrorEnum.DATABASE_ERROR);

        // Act
        ResponseEntity<CustaggJobError> response = exceptionHandler.handleDatabaseException(databaseException);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertEquals(JobErrorEnum.DATABASE_ERROR.getDescription(), response.getBody().getDescription());
    }
}
