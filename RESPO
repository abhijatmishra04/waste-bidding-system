package com.bofa.sst.batch.partition;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.MockedStatic;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.scope.context.ExecutionContext;

@RunWith(MockitoJUnitRunner.class)
public class CustaggFilePartitionerTest {

    private CustaggFilePartitioner partitioner;

    @Mock private OraOdsDynamicConfigPropertiesRepository dynamicConfigPropertiesRepository;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        partitioner = new CustaggFilePartitioner();
        partitioner.dynamicConfigPropertiesRepository = dynamicConfigPropertiesRepository;
    }

    @Test
    public void testPartition_FileExists() {
        try (MockedStatic<FileUtils> fileUtilsMock = mockStatic(FileUtils.class)) {

            String mockDirectoryPath = "mockDir";
            String mockFilePath = "mockDir/mockFile.txt";

            partitioner.directoryPath = mockDirectoryPath;
            partitioner.FilePrefixReferData = "mockPrefix";

            fileUtilsMock.when(() -> FileUtils.findTodaysFiles(mockDirectoryPath, "mockPrefix",
                            CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenReturn(mockFilePath);

            File mockFile = mock(File.class);
            when(mockFile.exists()).thenReturn(true);
            when(mockFile.length()).thenReturn(1024L);

            try (MockedStatic<File> fileMock = mockStatic(File.class)) {
                fileMock.when(() -> new File(mockFilePath)).thenReturn(mockFile);

                Map<String, ExecutionContext> partitions = partitioner.partition(3);

                assertNotNull(partitions);
                assertFalse(partitions.isEmpty());
                assertEquals(3, partitions.size());
            }
        }
    }

    @Test
    public void testPartition_FileNotFound() {
        try (MockedStatic<FileUtils> fileUtilsMock = mockStatic(FileUtils.class)) {

            String mockDirectoryPath = "mockDir";
            partitioner.directoryPath = mockDirectoryPath;
            partitioner.FilePrefixReferData = "mockPrefix";

            fileUtilsMock.when(() -> FileUtils.findTodaysFiles(mockDirectoryPath, "mockPrefix",
                            CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenReturn(null);

            Map<String, ExecutionContext> partitions = partitioner.partition(3);

            assertNotNull(partitions);
            assertTrue(partitions.isEmpty());
        }
    }

    @Test
    public void testPartition_EmptyFile() {
        try (MockedStatic<FileUtils> fileUtilsMock = mockStatic(FileUtils.class)) {

            String mockDirectoryPath = "mockDir";
            String mockFilePath = "mockDir/mockFile.txt";

            partitioner.directoryPath = mockDirectoryPath;
            partitioner.FilePrefixReferData = "mockPrefix";

            fileUtilsMock.when(() -> FileUtils.findTodaysFiles(mockDirectoryPath, "mockPrefix",
                            CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenReturn(mockFilePath);

            File mockFile = mock(File.class);
            when(mockFile.exists()).thenReturn(true);
            when(mockFile.length()).thenReturn(0L);

            try (MockedStatic<File> fileMock = mockStatic(File.class)) {
                fileMock.when(() -> new File(mockFilePath)).thenReturn(mockFile);

                Map<String, ExecutionContext> partitions = partitioner.partition(3);

                assertNotNull(partitions);
                assertTrue(partitions.isEmpty());
            }
        }
    }

    @Test
    public void testPartition_GridSizeZero() {
        try (MockedStatic<FileUtils> fileUtilsMock = mockStatic(FileUtils.class)) {

            String mockDirectoryPath = "mockDir";
            partitioner.directoryPath = mockDirectoryPath;
            partitioner.FilePrefixReferData = "mockPrefix";

            fileUtilsMock.when(() -> FileUtils.findTodaysFiles(mockDirectoryPath, "mockPrefix",
                            CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenReturn("mockDir/mockFile.txt");

            Map<String, ExecutionContext> partitions = partitioner.partition(0);

            assertNotNull(partitions);
            assertTrue(partitions.isEmpty());
        }
    }

    @Test
    public void testPartition_ExceptionHandling() {
        try (MockedStatic<FileUtils> fileUtilsMock = mockStatic(FileUtils.class)) {

            String mockDirectoryPath = "mockDir";
            partitioner.directoryPath = mockDirectoryPath;
            partitioner.FilePrefixReferData = "mockPrefix";

            fileUtilsMock.when(() -> FileUtils.findTodaysFiles(mockDirectoryPath, "mockPrefix",
                            CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenThrow(new RuntimeException("Mocked Exception"));

            try {
                partitioner.partition(3);
                fail("Exception expected");
            } catch (Exception e) {
                assertTrue(e.getMessage().contains("Mocked Exception"));
            }
        }
    }
}
