import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Test;
import org.mockito.Mockito;
import java.util.Arrays;
import java.util.List;

public class ProcessorTest {

    @Test
    public void testFetchAndUpdateTransferInstructionIds_noInstructionId() {
        List<String> scheduleIds = Arrays.asList("SCHED1", "SCHED2");

        Mockito.when(jdbcTemplate.queryForObject(
                anyString(), 
                eq(String.class), 
                any(Object[].class)))
            .thenReturn(null);

        processor.fetchAndUpdateTransferInstructionIds(scheduleIds);

        Mockito.verify(jdbcTemplate, Mockito.times(2)).queryForObject(
                anyString(),
                eq(String.class),
                any(Object[].class));
    }

    @Test
    public void testFetchAndUpdateTransferInstructionIds_exception() {
        List<String> scheduleIds = Arrays.asList("SCHED1");

        Mockito.when(jdbcTemplate.queryForObject(
                anyString(), 
                eq(String.class), 
                any(Object[].class)))
            .thenThrow(new RuntimeException("Mocked Exception"));

        processor.fetchAndUpdateTransferInstructionIds(scheduleIds);

        Mockito.verify(jdbcTemplate, Mockito.times(1)).queryForObject(
                anyString(),
                eq(String.class),
                any(Object[].class));
    }

    @Test
    public void testFetchAndUpdateTransferInstructionIds_success() {
        List<String> scheduleIds = Arrays.asList("SCHED1", "SCHED2");

        Mockito.when(jdbcTemplate.queryForObject(
                anyString(),
                eq(String.class),
                any(Object[].class)))
            .thenAnswer(invocation -> {
                Object[] args = invocation.getArgument(2);
                if ("SCHED1".equals(args[0])) {
                    return "INSTR1";
                } else if ("SCHED2".equals(args[0])) {
                    return "INSTR2";
                }
                return null;
            });

        processor.fetchAndUpdateTransferInstructionIds(scheduleIds);

        Mockito.verify(jdbcTemplate, Mockito.times(2)).queryForObject(
                anyString(),
                eq(String.class),
                any(Object[].class));
    }
}
