import static org.junit.Assert.*;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.batch.item.ExecutionContext;

public class SdaResponseCompFileItemReaderTest {

    private SdaResponseCompFileItemReader reader;
    private Path tempDirectory;
    private File testFile;

    @Before
    public void setUp() throws Exception {
        reader = new SdaResponseCompFileItemReader();

        tempDirectory = Files.createTempDirectory("testDir");
        reader.directoryPath = tempDirectory.toString();

        testFile = new File(tempDirectory.toFile(), "RESPONSE_FILE_PREFIX_testFile.lock");

        try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(testFile))) {
            byte[] recordH = createFixedLengthRecord("H"); 
            byte[] recordD = createFixedLengthRecord("D");
            byte[] recordT = createFixedLengthRecord("T");

            bos.write(recordH);
            bos.write(recordD);
            bos.write(recordT);
            bos.flush();
        }
    }

    private byte[] createFixedLengthRecord(String type) {
        byte[] record = new byte[152];
        System.arraycopy(type.getBytes(), 0, record, 0, type.length());
        return record;
    }

    @After
    public void tearDown() throws Exception {
        Files.deleteIfExists(testFile.toPath());
        Files.deleteIfExists(tempDirectory);
    }

    @Test
    public void testOpenAndRead_Success() throws Exception {
        ExecutionContext executionContext = new ExecutionContext();
        executionContext.putInt("fromLine", 1);
        executionContext.putInt("toLine", 3);

        reader.open(executionContext);

        PaymentInfoDTO dto1 = reader.read();
        assertNotNull(dto1);
        assertEquals("H", dto1.getDetailRecordId());

        PaymentInfoDTO dto2 = reader.read();
        assertNotNull(dto2);
        assertEquals("D", dto2.getDetailRecordId());

        PaymentInfoDTO dto3 = reader.read();
        assertNotNull(dto3);
        assertEquals("T", dto3.getDetailRecordId());

        PaymentInfoDTO dto4 = reader.read();
        assertNull(dto4);

        reader.close();
    }

    @Test
    public void testOpen_EmptyFile() throws Exception {
        Files.deleteIfExists(testFile.toPath());
        testFile.createNewFile();

        ExecutionContext executionContext = new ExecutionContext();
        executionContext.putInt("fromLine", 1);
        executionContext.putInt("toLine", 3);

        reader.open(executionContext);

        PaymentInfoDTO dto = reader.read();
        assertNull(dto);

        reader.close();
    }

    @Test
    public void testFileNotFound() {
        ExecutionContext executionContext = new ExecutionContext();
        executionContext.putInt("fromLine", 1);
        executionContext.putInt("toLine", 3);

        reader.directoryPath = "/invalid/path/";

        try {
            reader.open(executionContext);
            fail("Expected exception not thrown");
        } catch (Exception e) {
            assertTrue(e instanceof IOException);
        }
    }

    @Test
    public void testPartialRead() throws Exception {
        try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(testFile))) {
            byte[] recordH = createFixedLengthRecord("H");
            bos.write(recordH);
            bos.flush();
        }

        ExecutionContext executionContext = new ExecutionContext();
        executionContext.putInt("fromLine", 1);
        executionContext.putInt("toLine", 3);

        reader.open(executionContext);

        PaymentInfoDTO dto1 = reader.read();
        assertNotNull(dto1);
        assertEquals("H", dto1.getDetailRecordId());

        PaymentInfoDTO dto2 = reader.read();
        assertNull(dto2);

        reader.close();
    }

    @Test
    public void testCorruptRecord() throws Exception {
        try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(testFile))) {
            byte[] corruptRecord = new byte[100];
            bos.write(corruptRecord);
            bos.flush();
        }

        ExecutionContext executionContext = new ExecutionContext();
        executionContext.putInt("fromLine", 1);
        executionContext.putInt("toLine", 3);

        reader.open(executionContext);

        try {
            PaymentInfoDTO dto = reader.read();
            fail("Expected parsing exception");
        } catch (Exception e) {
            assertTrue(e instanceof UnsupportedEncodingException);
        }

        reader.close();
    }
}
