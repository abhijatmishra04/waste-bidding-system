import java.math.BigDecimal;
import java.util.List;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.item.ItemProcessor;

@Component
@Log4j2
public class PaymentInfoProcessor implements ItemProcessor<PaymentInfoDTO, PaymentInfoDTO> {

    private static final Logger log = LogManager.getLogger(PaymentInfoProcessor.class);

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    public PaymentInfoDTO process(PaymentInfoDTO sda) throws Exception {
        try {
            log.info("Processing PaymentInfoDTO: {}", sda);

            // Ignore Header and Trailer Records
            if ("H".equals(sda.getDetailRecordId()) || "T".equals(sda.getDetailRecordId())) {
                log.info("Skipping Header or Trailer Record: {}", sda.getDetailRecordId());
                return null;
            }

            // Fetch additional data from database
            List<PaymentInfoDTO> paymentInfoDTOs = fetchDataFromMainTables(sda);
            log.info("Fetched {} records from main table", paymentInfoDTOs.size());

            for (PaymentInfoDTO dataFromTable : paymentInfoDTOs) {
                sda.setPaidAmt(dataFromTable.getPaidAmt());
                sda.setTotalAmt(dataFromTable.getTotalAmt());

                // Check if payment amount is greater than zero
                if (sda.getPaymentAmount().compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal oldPaymentAmount = sda.getPaymentAmount();
                    sda.setOldPaymentAmount(oldPaymentAmount);
                    log.info("Stored old payment amount: {}", oldPaymentAmount);
                }

                // Account status checks
                if ("A".equals(sda.getAcctStatus()) || "P".equals(sda.getAcctStatus())) {
                    log.info("Processing Account Status: {}", sda.getAcctStatus());

                    if (sda.getPaymentAmount().compareTo(sda.getIalsBalance()) > 0) {
                        sda.setPaymentAmount(sda.getIalsBalance());
                        log.info("Payment Amount updated to IALS_BALANCE: {}", sda.getIalsBalance());
                    }

                    BigDecimal newTotalAmount = sda.getPaidAmt().add(sda.getPaymentAmount());
                    sda.setTotalAmt(newTotalAmount);
                    log.info("Updated Total Amount: {}", newTotalAmount);
                }

                if ("C".equals(sda.getAcctStatus())) {
                    log.info("Processing Account Status: C");

                    if (sda.getPaymentAmount().compareTo(BigDecimal.ZERO) == 0) {
                        BigDecimal newTotalAmount = sda.getPaidAmt().add(sda.getPaymentAmount());
                        sda.setTotalAmt(newTotalAmount);
                        log.info("Updated Total Amount for Status 'C': {}", newTotalAmount);
                    } else {
                        sda.setPaymentAmount(BigDecimal.ZERO);
                        log.info("Payment Amount set to zero for Status 'C'");
                    }
                }

                sda.setUpdtBy("SDARETN");
            }

            log.info("Final processed PaymentInfoDTO: {}", sda);
            return sda;

        } catch (Exception e) {
            log.error("Error processing PaymentInfoDTO: {}", sda, e);
            throw new Exception("Error processing PaymentInfoDTO: " + sda, e);
        }
    }

    public List<PaymentInfoDTO> fetchDataFromMainTables(PaymentInfoDTO sda) {
        try {
            log.info("Fetching data from main tables for Confirmation Number: {}", sda.getConfirmationNbr());

            RowMapper<PaymentInfoDTO> rowMapper = (rs, rowNum) -> {
                PaymentInfoDTO sdaProcessedData = new PaymentInfoDTO();
                sdaProcessedData.setTotalAmt(rs.getBigDecimal("TOT_AM"));
                sdaProcessedData.setPaidAmt(rs.getBigDecimal("PD_AM"));
                return sdaProcessedData;
            };

            Object[] params = new Object[]{sda.getConfirmationNbr()};
            List<PaymentInfoDTO> list = jdbcTemplate.query(SQLFactory.SELECT_SCHEDULE_M2M, rowMapper, params);

            log.info("Fetched {} records from database", list.size());
            return list;

        } catch (Exception e) {
            log.error("Error fetching data from main tables for: {}", sda.getConfirmationNbr(), e);
            return List.of(); // Return empty list to avoid null pointer exceptions
        }
    }
}
