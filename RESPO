@RunWith(MockitoJUnitRunner.class)
public class CustaggProcessorTest {

    @InjectMocks
    private CustaggProcessor processor;

    @Mock
    private JdbcTemplate mockJdbcTemplate;

    @Mock
    private StepExecution mockStepExecution;

    @Mock
    private ExecutionContext mockExecutionContext;

    @Before
    public void setUp() {
        Mockito.when(mockStepExecution.getExecutionContext()).thenReturn(mockExecutionContext);
    }

    @Test
    public void testProcess_successfullyMappedEntity() throws Exception {
        HashMap<String, String> mockEntityMap = new HashMap<>();
        mockEntityMap.put("entityFromFile", "mappedEntity");

        ReflectionTestUtils.setField(processor, "entityMap", mockEntityMap);

        CustaggRecordsDTO mockInput = new CustaggRecordsDTO();
        mockInput.setEntityFromFile("entityFromFile");
        mockInput.setAccountNumber("12345");
        mockInput.setProductCode("P001");

        List<String> scheduleIds = Arrays.asList("SCHED1", "SCHED2");
        List<String> transferExecutionIds = Arrays.asList("TRANS1", "TRANS2");

        Mockito.when(processor.fetchScheduleIds(Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
                .thenReturn(scheduleIds);
        Mockito.when(processor.fetchAndUpdateTransferExecutionIds(Mockito.anyList()))
                .thenReturn(transferExecutionIds);

        CustaggProcessedRecordsDTO result = processor.process(mockInput);

        Assert.assertNotNull(result);
        Assert.assertEquals("mappedEntity", result.getMappedEntity());
        Assert.assertEquals("entityFromFile", result.getNumEntity());
        Assert.assertEquals("12345", result.getAccountNumber());
        Assert.assertEquals("P001", result.getProductCode());
        Assert.assertEquals(scheduleIds, result.getScheduleIds());
        Assert.assertEquals(transferExecutionIds, result.getTransferExecutionIds());
    }

    @Test(expected = IllegalStateException.class)
    public void testProcess_emptyEntityMap() throws Exception {
        HashMap<String, String> emptyEntityMap = new HashMap<>();
        ReflectionTestUtils.setField(processor, "entityMap", emptyEntityMap);

        CustaggRecordsDTO mockInput = new CustaggRecordsDTO();
        mockInput.setEntityFromFile("entityFromFile");
        mockInput.setAccountNumber("12345");
        mockInput.setProductCode("P001");

        processor.process(mockInput);
    }

    @Test
    public void testProcess_entityNotFound() throws Exception {
        HashMap<String, String> mockEntityMap = new HashMap<>();
        mockEntityMap.put("differentEntity", "mappedEntity");

        ReflectionTestUtils.setField(processor, "entityMap", mockEntityMap);

        CustaggRecordsDTO mockInput = new CustaggRecordsDTO();
        mockInput.setEntityFromFile("entityFromFile");
        mockInput.setAccountNumber("12345");
        mockInput.setProductCode("P001");

        CustaggProcessedRecordsDTO result = processor.process(mockInput);

        Assert.assertNull(result);
    }

    @Test
    public void testProcess_emptyScheduleIds() throws Exception {
        HashMap<String, String> mockEntityMap = new HashMap<>();
        mockEntityMap.put("entityFromFile", "mappedEntity");

        ReflectionTestUtils.setField(processor, "entityMap", mockEntityMap);

        CustaggRecordsDTO mockInput = new CustaggRecordsDTO();
        mockInput.setEntityFromFile("entityFromFile");
        mockInput.setAccountNumber("12345");
        mockInput.setProductCode("P001");

        Mockito.when(processor.fetchScheduleIds(Mockito.anyString(), Mockito.anyString(), Mockito.anyString()))
                .thenReturn(Collections.emptyList());

        CustaggProcessedRecordsDTO result = processor.process(mockInput);

        Assert.assertNull(result);
    }
}
