@ExceptionHandler(PaymentProcessingException.class)
public ResponseEntity<JobError> handlePaymentProcessingException(PaymentProcessingException exception) {
    log.error(LoggingUtil.logJobMessage(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getMessage()
    ));

    JobError jobError = new JobError(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getJobErrorEnum().getErrorDescription(),
            exception.getJobErrorEnum().getStatusCode()
    );

    return new ResponseEntity<>(jobError, HttpStatus.INTERNAL_SERVER_ERROR);
}

PAYMENT_FETCH_FAILED("1008", "Failed to fetch payment details", "500"),
PAYMENT_PROCESS_FAILED("1009", "Failed to process payment info", "500");


@Component
@Log4j2
public class PaymentInfoProcessor implements ItemProcessor<PaymentInfoDTO, PaymentInfoDTO> {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    public PaymentInfoDTO process(PaymentInfoDTO sda) throws Exception {
        try {
            log.info(LoggingUtil.logJobMessage(
                "PAYMENT_PROCESS",
                sda.getConfirmationNbr(),
                "Processing PaymentInfoDTO: " + sda
            ));

            if ("H".equals(sda.getDetailRecordId()) || "T".equals(sda.getDetailRecordId())) {
                log.info(LoggingUtil.logJobMessage(
                    "PAYMENT_PROCESS",
                    sda.getConfirmationNbr(),
                    "Skipping Header or Trailer Record: " + sda.getDetailRecordId()
                ));
                return null;
            }

            List<PaymentInfoDTO> paymentInfoDTOs = fetchDataFromMainTables(sda);
            log.info(LoggingUtil.logJobMessage(
                "PAYMENT_PROCESS",
                sda.getConfirmationNbr(),
                "Fetched [" + paymentInfoDTOs.size() + "] records from main table"
            ));

            for (PaymentInfoDTO dataFromTable : paymentInfoDTOs) {
                sda.setPaidAmt(dataFromTable.getPaidAmt());
                sda.setTotalAmt(dataFromTable.getTotalAmt());
            }

            if (sda.getPaymentAmount().compareTo(BigDecimal.ZERO) > 0) {
                BigDecimal oldPaymentAmount = sda.getPaymentAmount();
                sda.setOldPaymentAmount(oldPaymentAmount);
                log.info(LoggingUtil.logJobMessage(
                    "PAYMENT_PROCESS",
                    sda.getConfirmationNbr(),
                    "Stored old payment amount: " + oldPaymentAmount
                ));
            }

            // Processing based on account status
            if ("A".equals(sda.getAcctStatus()) || "P".equals(sda.getAcctStatus())) {
                log.info(LoggingUtil.logJobMessage(
                    "PAYMENT_PROCESS",
                    sda.getConfirmationNbr(),
                    "Processing Account Status: " + sda.getAcctStatus()
                ));

                if (sda.getIalsBalance().compareTo(BigDecimal.ZERO) > 0) {
                    sda.setPaymentAmount(sda.getIalsBalance());
                    log.info(LoggingUtil.logJobMessage(
                        "PAYMENT_PROCESS",
                        sda.getConfirmationNbr(),
                        "Payment Amount updated to IALS_BALANCE: " + sda.getIalsBalance()
                    ));
                }

                BigDecimal newTotalAmount = sda.getPaidAmt().add(sda.getPaymentAmount());
                sda.setTotalAmt(newTotalAmount);
                log.info(LoggingUtil.logJobMessage(
                    "PAYMENT_PROCESS",
                    sda.getConfirmationNbr(),
                    "Updated Total Amount: " + newTotalAmount
                ));
            }

            if ("C".equals(sda.getAcctStatus())) {
                log.info(LoggingUtil.logJobMessage(
                    "PAYMENT_PROCESS",
                    sda.getConfirmationNbr(),
                    "Processing Account Status: C"
                ));

                if (sda.getPaymentAmount().compareTo(BigDecimal.ZERO) == 0) {
                    BigDecimal newTotalAmount = sda.getPaidAmt().add(sda.getPaymentAmount());
                    sda.setTotalAmt(newTotalAmount);
                    log.info(LoggingUtil.logJobMessage(
                        "PAYMENT_PROCESS",
                        sda.getConfirmationNbr(),
                        "Updated Total Amount for Status 'C': " + newTotalAmount
                    ));
                } else {
                    sda.setPaymentAmount(BigDecimal.ZERO);
                    log.info(LoggingUtil.logJobMessage(
                        "PAYMENT_PROCESS",
                        sda.getConfirmationNbr(),
                        "Payment Amount set to zero for Status 'C'"
                    ));
                }
            }

            sda.setUpdDtBy(SdaResponseBatchConstants.UPDT_BY_SDARETN);
            log.info(LoggingUtil.logJobMessage(
                "PAYMENT_PROCESS",
                sda.getConfirmationNbr(),
                "Final processed PaymentInfoDTO: " + sda
            ));

            return sda;
        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage(
                "PAYMENT_PROCESS",
                sda.getConfirmationNbr(),
                "Error processing PaymentInfoDTO: " + e.getMessage()
            ));
            throw new PaymentProcessingException(JobErrorEnum.PAYMENT_PROCESS_FAILED, e);
        }
    }

    public List<PaymentInfoDTO> fetchDataFromMainTables(PaymentInfoDTO sda) {
        try {
            log.info(LoggingUtil.logJobMessage(
                "PAYMENT_FETCH",
                sda.getConfirmationNbr(),
                "Fetching data from main tables"
            ));

            RowMapper<PaymentInfoDTO> rowMapper = (rs, rowNum) -> {
                PaymentInfoDTO sdaProcessedData = new PaymentInfoDTO();
                sdaProcessedData.setTotalAmt(rs.getBigDecimal("TOT_AM"));
                sdaProcessedData.setPaidAmt(rs.getBigDecimal("PD_AM"));
                return sdaProcessedData;
            };

            Object[] params = new Object[]{sda.getConfirmationNbr()};
            List<PaymentInfoDTO> list = jdbcTemplate.query(SQLFactory.SELECT_SCHEDULE_M2M, rowMapper, params);

            log.info(LoggingUtil.logJobMessage(
                "PAYMENT_FETCH",
                sda.getConfirmationNbr(),
                "Fetched [" + list.size() + "] records from database"
            ));

            return list;

        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage(
                "PAYMENT_FETCH",
                sda.getConfirmationNbr(),
                "Error fetching data from main tables: " + e.getMessage()
            ));
            throw new PaymentProcessingException(JobErrorEnum.PAYMENT_FETCH_FAILED, e);
        }
    }
}

@Getter
public class PaymentProcessingException extends RuntimeException {

    private final JobErrorEnum jobErrorEnum;

    public PaymentProcessingException(JobErrorEnum jobErrorEnum, Throwable err) {
        super(err);
        this.jobErrorEnum = jobErrorEnum;
    }

    public PaymentProcessingException(JobErrorEnum jobErrorEnum) {
        this.jobErrorEnum = jobErrorEnum;
    }
}
