package com.bofa.sst.batch.core;

import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

@Component
@Log4j2
public class EntityFileReader {

    @Value("${custag.input.file.path}") // File path injected from properties
    private String filePath;

    @Bean
    public HashMap<String, String> entityMap() throws Exception {
        HashMap<String, String> entityMap = new HashMap<>();
        log.info("Reading the first file to populate HashMap...");

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String alphaEntity = line.substring(0, 4).trim(); // First 4 characters
                String numEntity = line.substring(4, 8).trim();  // Next 4 characters

                entityMap.put(numEntity, alphaEntity);
                log.debug("Processed line - NUM-ENTITY: {}, ALPHA-ENTITY: {}", numEntity, alphaEntity);
            }
        } catch (IOException e) {
            log.error("Error reading file at path: {}", filePath, e);
            throw new Exception("Error reading file", e);
        }

        log.info("Successfully populated HashMap with {} entries.", entityMap.size());
        return entityMap;
    }
}






@Component
@Slf4j
public class CustagProcessor implements ItemProcessor<CustomRecordDTO, EnrichedRecordDTO> {

    private final HashMap<String, String> entityMap;

    // Constructor-based injection for the HashMap
    public CustagProcessor(HashMap<String, String> entityMap) {
        this.entityMap = entityMap;
    }

    @Override
    public EnrichedRecordDTO process(CustomRecordDTO item) throws Exception {
        log.info("Processing record with Entity: {}, AccountNumber: {}, ProductCode: {}",
                item.getEntity(), item.getAccountNumber(), item.getProductCode());

        // Match entity from 2nd file with numEntity from HashMap
        String mappedEntity = entityMap.get(item.getEntity());
        if (mappedEntity != null) {
            // Create an enriched DTO with all required fields
            EnrichedRecordDTO enrichedRecord = new EnrichedRecordDTO();
            enrichedRecord.setAlphaEntity(mappedEntity); // Rename this if needed
            enrichedRecord.setNumEntity(item.getEntity());
            enrichedRecord.setAccountNumber(item.getAccountNumber());
            enrichedRecord.setProductCode(item.getProductCode());

            log.info("Match found! Enriched Record: {}", enrichedRecord);
            return enrichedRecord;
        } else {
            log.info("No match found for Entity: {}", item.getEntity());
            return null;
        }
    }
}

