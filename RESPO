import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.web.servlet.ServletRegistrationBean;
import org.springframework.boot.web.servlet.FilterRegistrationBean;

@RunWith(MockitoJUnitRunner.class)
public class BatchApplicationTest {

    @InjectMocks
    private BatchApplication batchApplication;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // ðŸ”¹ Test: Ensure `commandOF()` returns a valid ObjectFactory bean
    @Test
    public void testCommandOF_ReturnsBean() {
        com.bac.baclws.ngen.command.ObjectFactory result = batchApplication.commandOF();
        assertNotNull("commandOF() should return a valid bean", result);
    }

    // ðŸ”¹ Test: Ensure `commonOF()` returns a valid ObjectFactory bean
    @Test
    public void testCommonOF_ReturnsBean() {
        com.bac.baclws.ngen.common.ObjectFactory result = batchApplication.commonOF();
        assertNotNull("commonOF() should return a valid bean", result);
    }

    // ðŸ”¹ Test: Ensure `ngenCommandObject()` returns a valid ObjectFactory bean
    @Test
    public void testNgenCommandObject_ReturnsBean() {
        com.bac.baclws.ngen2.command.ObjectFactory result = batchApplication.ngenCommandObject();
        assertNotNull("ngenCommandObject() should return a valid bean", result);
    }

    // ðŸ”¹ Test: Ensure `ngenCommunicationObject()` returns a valid ObjectFactory bean
    @Test
    public void testNgenCommunicationObject_ReturnsBean() {
        com.bac.baclws.ngen2.communication.ObjectFactory result = batchApplication.ngenCommunicationObject();
        assertNotNull("ngenCommunicationObject() should return a valid bean", result);
    }

    // ðŸ”¹ Test: Ensure `transactionOF()` returns a valid ObjectFactory bean
    @Test
    public void testTransactionOF_ReturnsBean() {
        com.bac.baclws.ngen.transaction.ObjectFactory result = batchApplication.transactionOF();
        assertNotNull("transactionOF() should return a valid bean", result);
    }

    // ðŸ”¹ Test: Ensure `getManifestDetails()` registers a servlet correctly
    @Test
    public void testGetManifestDetails_ReturnsServletRegistration() {
        ServletRegistrationBean<?> result = batchApplication.getManifestDetails();

        assertNotNull("getManifestDetails() should return a valid ServletRegistrationBean", result);
        assertEquals("HealthCheckServlet should be registered", "health/appHealth.do", 
                     result.getUrlMappings().iterator().next());
    }

    // ðŸ”¹ Test: Ensure `securityFilterRegistration()` registers `BasicAuthFilter` correctly
    @Test
    public void testSecurityFilterRegistration_ReturnsFilterBean() {
        FilterRegistrationBean<?> result = batchApplication.securityFilterRegistration();

        assertNotNull("securityFilterRegistration() should return a valid FilterRegistrationBean", result);
        assertEquals("Security filter should be mapped to /admin/*", "/admin/*", 
                     result.getUrlPatterns().iterator().next());
    }
}
