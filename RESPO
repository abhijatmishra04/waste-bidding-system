import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.boot.SpringApplication;

@RunWith(MockitoJUnitRunner.class)
public class BatchApplicationTest {

    @InjectMocks
    private BatchApplication batchApplication;

    @Mock
    private SpringApplicationBuilder mockApplicationBuilder;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // ðŸ”¹ Test: Ensure `xssFilterRegistration()` registers XSSFilter
    @Test
    public void testXssFilterRegistration_ReturnsFilterBean() {
        FilterRegistrationBean<?> result = batchApplication.xssFilterRegistration();

        assertNotNull("xssFilterRegistration() should return a valid FilterRegistrationBean", result);
        assertNotNull("Filter should not be null", result.getFilter());
        assertEquals("XSSFilter should be mapped to /*", "/*", 
                     result.getUrlPatterns().iterator().next());
    }

    // ðŸ”¹ Test: Ensure `configure()` correctly sets the application sources
    @Test
    public void testConfigure_SetsApplicationSources() {
        when(mockApplicationBuilder.sources(any())).thenReturn(mockApplicationBuilder);

        SpringApplicationBuilder result = batchApplication.configure(mockApplicationBuilder);

        assertNotNull("configure() should return a valid SpringApplicationBuilder", result);
        verify(mockApplicationBuilder).sources(BatchApplication.class);
    }

    // ðŸ”¹ Test: Ensure `main()` runs the Spring Boot application
    @Test
    public void testMain_RunsSpringApplication() {
        try (var mockedStatic = mockStatic(SpringApplication.class)) {
            mockedStatic.when(() -> SpringApplication.run(BatchApplication.class, new String[]{}))
                        .thenReturn(null);

            BatchApplication.main(new String[]{});

            mockedStatic.verify(() -> SpringApplication.run(BatchApplication.class, new String[]{}), times(1));
        }
    }
}
