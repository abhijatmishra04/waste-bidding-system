import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class FileUtilsTest {

    private Path tempDir;
    private File tempFile1;
    private File tempFile2;
    private String todayDate;

    @Before
    public void setUp() throws IOException {
        // Create a temporary directory
        tempDir = Files.createTempDirectory("testDir");

        // Get today's date in yyyyMMdd format
        todayDate = new SimpleDateFormat("yyyyMMdd").format(new Date());

        // Create matching files
        tempFile1 = Files.createTempFile(tempDir, "testFile_" + todayDate, ".txt").toFile();
        tempFile2 = Files.createTempFile(tempDir, "testFile_" + todayDate, ".txt").toFile();

        // Modify timestamps to test sorting
        tempFile1.setLastModified(1000L);
        tempFile2.setLastModified(2000L);

        // Write some content to the files
        try (FileWriter writer = new FileWriter(tempFile1)) {
            writer.write("Sample content 1");
        }
        try (FileWriter writer = new FileWriter(tempFile2)) {
            writer.write("Sample content 2");
        }
    }

    @After
    public void tearDown() {
        // Cleanup: Delete temp files and directory
        tempFile1.delete();
        tempFile2.delete();
        tempDir.toFile().delete();
    }

    @Test
    public void testFindTodaysFiles_Success() {
        String result = FileUtils.findTodaysFiles(tempDir.toString(), "testFile", ".txt");

        assertNotNull("Should return a file path", result);
        assertTrue("Should return the most recently modified file", result.endsWith(tempFile2.getName()));
    }

    @Test
    public void testFindTodaysFiles_NoMatchingFiles() {
        // Delete existing files to simulate no matching files
        tempFile1.delete();
        tempFile2.delete();

        String result = FileUtils.findTodaysFiles(tempDir.toString(), "testFile", ".txt");

        assertNull("Should return null if no matching files exist", result);
    }

    @Test
    public void testFindTodaysFiles_DirectoryDoesNotExist() {
        // Delete the temporary directory
        tempDir.toFile().delete();

        String result = FileUtils.findTodaysFiles(tempDir.toString(), "testFile", ".txt");

        assertNull("Should return null if the directory does not exist", result);
    }

    @Test
    public void testFindTodaysFiles_IgnoreOldFiles() throws IOException {
        // Create an older file with a different date
        File oldFile = Files.createTempFile(tempDir, "testFile_20230101", ".txt").toFile();

        String result = FileUtils.findTodaysFiles(tempDir.toString(), "testFile", ".txt");

        assertNotNull("Should still find today's files", result);
        assertFalse("Should not return an old file", result.endsWith(oldFile.getName()));

        oldFile.delete(); // Cleanup
    }
}
