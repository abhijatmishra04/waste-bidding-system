import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.MockedStatic;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;

@RunWith(MockitoJUnitRunner.class)
public class SdaResponseFileValidationTaskletTest {

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @InjectMocks
    private SdaResponseFileValidationTasklet tasklet;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testExecute_Success() throws Exception {
        try (MockedStatic<FileUtils> mockedFileUtils = mockStatic(FileUtils.class)) {
            mockedFileUtils.when(() -> FileUtils.findTodaysFiles(anyString(), anyString(), anyString()))
                           .thenReturn("mocked_response_file.txt");

            FileInputStream mockFileStream = spy(new FileInputStream(new ByteArrayInputStream("SampleData".getBytes())));
            doReturn(mockFileStream).whenNew(FileInputStream.class).withArguments(any(File.class));

            RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

            assertEquals(RepeatStatus.FINISHED, status);
            verify(stepContribution).setExitStatus(ExitStatus.COMPLETED);
        }
    }

    @Test
    public void testExecute_Failure_NoResponseFile() throws Exception {
        try (MockedStatic<FileUtils> mockedFileUtils = mockStatic(FileUtils.class)) {
            mockedFileUtils.when(() -> FileUtils.findTodaysFiles(anyString(), anyString(), anyString()))
                           .thenReturn(null);

            RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

            assertEquals(RepeatStatus.FINISHED, status);
            verify(stepContribution).setExitStatus(ExitStatus.FAILED);
        }
    }

    @Test
    public void testExecute_Failure_FileLockError() throws Exception {
        try (MockedStatic<FileUtils> mockedFileUtils = mockStatic(FileUtils.class)) {
            mockedFileUtils.when(() -> FileUtils.findTodaysFiles(anyString(), anyString(), anyString()))
                           .thenReturn("mocked_response_file.txt");

            doThrow(new RuntimeException("Lock file error")).when(FileUtils.class);
            FileUtils.lockFile(anyString(), anyString(), anyString());

            RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

            assertEquals(RepeatStatus.FINISHED, status);
            verify(stepContribution).setExitStatus(ExitStatus.COMPLETED);
        }
    }
}
