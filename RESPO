@Override
public RepeatStatus execute(StepContribution stepContribution, ChunkContext chunkContext) throws Exception {
    ExecutionContext context = stepContribution.getStepExecution().getJobExecution().getExecutionContext();

    String directoryPath = context.getString("sdpHanging.output.flat.file.path");
    if (directoryPath == null || directoryPath.isEmpty()) {
        Log.error("Hanging report file path is missing or empty in ExecutionContext.");
        throw new IllegalArgumentException("File path not available in ExecutionContext.");
    }

    // Define the substrings to search for in the filenames
    String dayPlusOneWriterKey = "dayPlusOneWriter.txt";
    String moreThan7DaysWriterKey = "moreThan7DaysWriter.txt";
    String moreThan25DaysWriterKey = "moreThan25DaysWriter.txt";

    String outputFilePath = directoryPath + SdpRespConstants.ATTACHMENT_FILE_NAME;

    Log.info("Aggregating files into: {}", outputFilePath);

    // Get all files in the directory
    try (Stream<Path> paths = Files.list(Paths.get(directoryPath))) {
        List<String> filesToAggregate = paths
            .filter(Files::isRegularFile)  // Ensure it's a file
            .map(Path::toString)           // Convert Path to String
            .filter(filePath -> filePath.contains(dayPlusOneWriterKey) || filePath.contains(moreThan7DaysWriterKey) || filePath.contains(moreThan25DaysWriterKey))  // Filter by key
            .collect(Collectors.toList()); // Collect matching files

        if (filesToAggregate.isEmpty()) {
            Log.warn("No files found that match the required file names.");
            return RepeatStatus.FINISHED;
        }

        // Append content from each matching file to the output file
        for (String filePath : filesToAggregate) {
            appendFileContent(filePath, outputFilePath);
        }

        Log.info("File aggregation complete. Output written to {}", outputFilePath);

        // After aggregation, send email
        hangingReportEmailNotificationService.sendMail(outputFilePath);
    } catch (IOException e) {
        Log.error("Error while aggregating files: {}", e.getMessage(), e);
        throw e;
    }

    return RepeatStatus.FINISHED;
}
