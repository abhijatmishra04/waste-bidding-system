    @PostConstruct
    public void initFileProperties() {
        try {
            custaggJobTrigger = dynamicConfigPropRepository
                    .findPropertyValueByPropertyName(CustaggBatchConstants.CUSTAGG_JOB_TRIGGER);
            validateProperties();
        } catch (Exception e) {
            log.error("Error initializing Custagg Quartz Configuration properties: {}", e.getMessage(), e);
            throw new ApplicationContextException("Failed to initialize Custagg Quartz Configuration properties", e);
        }
    }

    public void validateProperties() {
        if (custaggJobTrigger == null || custaggJobTrigger.trim().isEmpty()) {
            throw new IllegalStateException("custaggJobTrigger cronSchedule property must not be null or empty.");
        }
    }



package com.bofa.sst.batch.scheduler.config;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.quartz.*;
import org.springframework.boot.autoconfigure.quartz.QuartzProperties;
import org.springframework.context.ApplicationContextException;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Properties;

@RunWith(SpringRunner.class)
public class CustaggQuartzConfigurationTest {

    @InjectMocks
    private CustaggQuartzConfiguration configuration;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private JobLocator jobLocator;

    @Mock
    private QuartzProperties quartzProperties;

    @Mock
    private M2MDynamicConfigPropertiesRepository dynamicConfigPropRepository;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInitFileProperties_success() {
        // Arrange
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.job.trigger"))
                .thenReturn("0 0/1 * 1/1 * ? *");

        // Act
        configuration.initFileProperties();

        // Assert
        assertEquals("0 0/1 * 1/1 * ? *", configuration.custaggJobTriggerCronSchedule());
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateProperties_emptyTrigger() {
        // Arrange
        configuration.custaggJobTrigger = "";

        // Act
        configuration.validateProperties();
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateProperties_nullTrigger() {
        // Arrange
        configuration.custaggJobTrigger = null;

        // Act
        configuration.validateProperties();
    }

    @Test(expected = ApplicationContextException.class)
    public void testInitFileProperties_exceptionThrown() {
        // Arrange
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.job.trigger"))
                .thenThrow(new RuntimeException("Error fetching property"));

        // Act
        configuration.initFileProperties();
    }

    @Test
    public void testJobRegistryBeanPostProcessor() {
        // Arrange
        JobRegistry jobRegistry = mock(JobRegistry.class);

        // Act
        JobRegistryBeanPostProcessor result = configuration.jobRegistryBeanPostProcessor(jobRegistry);

        // Assert
        assertNotNull(result);
        assertEquals(jobRegistry, result.getJobRegistry());
    }

    @Test
    public void testCustaggJobDetail() {
        // Act
        JobDetail jobDetail = configuration.custaggJobDetail();

        // Assert
        assertNotNull(jobDetail);
        assertEquals("custaggJob-detail", jobDetail.getKey().getName());
        assertEquals("custaggJob", jobDetail.getJobDataMap().getString("jobName"));
        assertEquals(jobLauncher, jobDetail.getJobDataMap().get("jobLauncher"));
        assertEquals(jobLocator, jobDetail.getJobDataMap().get("jobLocator"));
    }

    @Test
    public void testCustaggJobTrigger() {
        // Arrange
        configuration.custaggJobTrigger = "0 0/5 * 1/1 * ? *";

        // Act
        Trigger trigger = configuration.custaggJobTrigger();

        // Assert
        assertNotNull(trigger);
        assertEquals("custaggJob-trigger", trigger.getKey().getName());
        assertEquals("0 0/5 * 1/1 * ? *", ((CronTrigger) trigger).getCronExpression());
    }

    @Test
    public void testSchedulerFactoryBean() throws Exception {
        // Arrange
        Properties properties = new Properties();
        properties.put("someQuartzProperty", "value");
        when(quartzProperties.getProperties()).thenReturn(properties);
        System.setProperty("JBOSS_SERVER_NAME", "testServer");

        configuration.custaggJobTrigger = "0 0/5 * 1/1 * ? *";

        // Act
        SchedulerFactoryBean schedulerFactoryBean = configuration.schedulerFactoryBean();

        // Assert
        assertNotNull(schedulerFactoryBean);
        assertEquals("testServer", schedulerFactoryBean.getQuartzProperties().get("org.quartz.scheduler.instanceName"));
        assertTrue(schedulerFactoryBean.isOverwriteExistingJobs());
    }

    @Test
    public void testCustaggJobTriggerCronSchedule() {
        // Arrange
        configuration.custaggJobTrigger = "0 0/5 * 1/1 * ? *";

        // Act
        String cronSchedule = configuration.custaggJobTriggerCronSchedule();

        // Assert
        assertEquals("0 0/5 * 1/1 * ? *", cronSchedule);
    }
}
