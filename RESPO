@Service
@RequiredArgsConstructor
public class BatchJobExecutionService {

    private static final Logger logger = LoggerFactory.getLogger(BatchJobExecutionService.class);

    @Autowired
    private JobLauncher jobLauncher;

    private final Job job;
    private final BatchUtil batchUtil;

    public BatchLauncherResponse startJob(BatchLauncherRequest batchLauncherRequest) {
        BatchLauncherResponse jobResponse = new BatchLauncherResponse();

        String jobName = batchLauncherRequest.getJobName();
        logger.debug("Executing Job for jobName: {}", jobName);

        // Validation for job status and enabled state
        if (!batchUtil.isJobEnabled(jobName)) {
            jobResponse.setJobName(jobName);
            jobResponse.setJobLaunchStatus(BatchCommonConstants.FAILURE_STATUS);
            jobResponse.setJobStausMessage("Job launch failed due to missing required parameters");
            jobResponse.setJobExecutionId(null);
            return jobResponse;
        }

        if (batchUtil.isJobRunning(jobName)) {
            jobResponse.setJobName(jobName);
            jobResponse.setJobLaunchStatus(BatchCommonConstants.FAILURE_STATUS);
            jobResponse.setJobStausMessage("Job launch failed, it's already running");
            jobResponse.setJobExecutionId(null);
            return jobResponse;
        }

        try {
            JobParameters jobParameters = new JobParametersBuilder()
                    .addLong("startAt", System.currentTimeMillis())
                    .toJobParameters();

            JobExecution jobExecution = jobLauncher.run(job, jobParameters);

            jobResponse.setJobName(jobExecution.getJobInstance().getJobName());
            jobResponse.setJobLaunchStatus(BatchCommonConstants.SST_BATCH_JOB_SUCCESS_STATUS);
            jobResponse.setJobStausMessage("Job Launched Successfully");
            jobResponse.setJobExecutionId(jobExecution.getId().toString());

            logger.info("Job Launched successfully with jobId: {} - jobName: {}", 
                        jobExecution.getId().toString(), jobName);

            return jobResponse;

        } catch (JobExecutionAlreadyRunningException |
                 JobRestartException |
                 JobInstanceAlreadyCompleteException |
                 JobParametersInvalidException exception) {

            // Multi-catch block for known job exceptions
            setJobErrorResponse(jobResponse, exception, BatchCommonConstants.FAILURE_STATUS);
            return jobResponse;

        } catch (Exception exception) {
            // Catch all remaining unexpected exceptions
            setJobErrorResponse(jobResponse, exception, BatchCommonConstants.GENERAL_EXCEPTION_OCCURRED);
            return jobResponse;
        }
    }

    // Centralized method for setting error response
    private BatchLauncherResponse setJobErrorResponse(BatchLauncherResponse jobErrorResponse, Exception exception, String errorStatus) {
        String errorMessage = exception.getMessage();
        jobErrorResponse.setJobLaunchStatus(errorStatus);
        jobErrorResponse.setJobStausMessage(errorMessage);
        logger.error("Job Execution Failed - {}", errorMessage, exception);
        return jobErrorResponse;
    }
}
