@Test
public void testRead_success() throws Exception {
    // Mock the BufferedInputStream to return valid data
    byte[] mockData = new byte[CustaggBatchConstants.RECORD_SIZE];
    ReflectionTestUtils.setField(reader, "bis", new ByteArrayInputStream(mockData));

    // Set the private fields for tracking record counts
    ReflectionTestUtils.setField(reader, "currentRecord", 0);
    ReflectionTestUtils.setField(reader, "numberOfRecordsToRead", 1);

    // Call the method under test
    CustaggRecordsDTO result = reader.read();

    // Verify the result is not null and record parsing was successful
    Assert.assertNotNull(result);
    Mockito.verifyNoInteractions(mockRepository); // Assuming repository isn't used here
}

@Test
public void testRead_endOfPartition() throws Exception {
    // Set the private fields to simulate the end of the partition
    ReflectionTestUtils.setField(reader, "currentRecord", 1);
    ReflectionTestUtils.setField(reader, "numberOfRecordsToRead", 1);

    // Call the method under test
    CustaggRecordsDTO result = reader.read();

    // Verify the method returns null when the partition ends
    Assert.assertNull(result);
}

@Test
public void testRead_endOfFile() throws Exception {
    // Mock the BufferedInputStream to simulate EOF by returning -1
    BufferedInputStream mockInputStream = Mockito.mock(BufferedInputStream.class);
    Mockito.when(mockInputStream.read(Mockito.any(byte[].class))).thenReturn(-1);
    ReflectionTestUtils.setField(reader, "bis", mockInputStream);

    // Set the private fields for tracking record counts
    ReflectionTestUtils.setField(reader, "currentRecord", 0);
    ReflectionTestUtils.setField(reader, "numberOfRecordsToRead", 1);

    // Call the method under test
    CustaggRecordsDTO result = reader.read();

    // Verify the method returns null at EOF
    Assert.assertNull(result);
}

@Test(expected = RuntimeException.class)
public void testRead_incompleteRecord() throws Exception {
    // Mock the BufferedInputStream to return fewer bytes than RECORD_SIZE
    byte[] mockData = new byte[CustaggBatchConstants.RECORD_SIZE - 1];
    BufferedInputStream mockInputStream = Mockito.mock(BufferedInputStream.class);
    Mockito.when(mockInputStream.read(Mockito.any(byte[].class))).thenReturn(mockData.length);
    ReflectionTestUtils.setField(reader, "bis", mockInputStream);

    // Set the private fields for tracking record counts
    ReflectionTestUtils.setField(reader, "currentRecord", 0);
    ReflectionTestUtils.setField(reader, "numberOfRecordsToRead", 1);

    // Call the method under test and expect an exception
    reader.read();
}

@Test
public void testRead_nullStream() throws Exception {
    // Set BufferedInputStream to null to test how it behaves
    ReflectionTestUtils.setField(reader, "bis", null);

    // Call the method under test
    try {
        reader.read();
        Assert.fail("Expected a NullPointerException to be thrown");
    } catch (NullPointerException e) {
        // Verify that NullPointerException is thrown
        Assert.assertNotNull(e);
    }
}
