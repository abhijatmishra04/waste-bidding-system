package com.bofa.sst.batch.service;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.launch.JobLauncher;

public class CustaggBatchJobExecutionServiceTest {

    @InjectMocks
    private CustaggBatchJobExecutionService service;

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private BatchUtil batchUtil;

    @Mock
    private JobRegistry jobRegistry;

    private BatchLauncherRequest batchLauncherRequest;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        batchLauncherRequest = new BatchLauncherRequest();
        batchLauncherRequest.setJobName("testJob");
    }

    @Test
    public void testStartJob_JobNotEnabled() {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(false);

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("testJob", response.getJobName());
        assertEquals("FAILURE", response.getJobLaunchStatus());
        assertEquals("Job launch failed due to missing required parameters", response.getJobStatusMessage());
        assertNull(response.getJobExecutionId());
    }

    @Test
    public void testStartJob_JobAlreadyRunning() {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(true);
        when(batchUtil.isJobRunning("testJob")).thenReturn(true);

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("testJob", response.getJobName());
        assertEquals("FAILURE", response.getJobLaunchStatus());
        assertEquals("Job launch failed, it's already running", response.getJobStatusMessage());
        assertNull(response.getJobExecutionId());
    }

    @Test
    public void testStartJob_JobSuccess() throws Exception {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(true);
        when(batchUtil.isJobRunning("testJob")).thenReturn(false);

        Job job = mock(Job.class);
        when(jobRegistry.getJob("testJob")).thenReturn(job);

        JobExecution jobExecution = mock(JobExecution.class);
        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);
        when(jobExecution.getJobInstance()).thenReturn(mock(JobInstance.class));
        when(jobExecution.getJobInstance().getJobName()).thenReturn("testJob");
        when(jobExecution.getId()).thenReturn(1L);

        when(jobLauncher.run(eq(job), any(JobParameters.class))).thenReturn(jobExecution);

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("testJob", response.getJobName());
        assertEquals("COMPLETED", response.getJobLaunchStatus());
        assertEquals("Job Launched Successfully.", response.getJobStatusMessage());
        assertEquals("1", response.getJobExecutionId());
    }

    @Test
    public void testStartJob_JobFailure() throws Exception {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(true);
        when(batchUtil.isJobRunning("testJob")).thenReturn(false);

        Job job = mock(Job.class);
        when(jobRegistry.getJob("testJob")).thenReturn(job);

        JobExecution jobExecution = mock(JobExecution.class);
        when(jobExecution.getStatus()).thenReturn(BatchStatus.FAILED);
        when(jobExecution.getFailureExceptions()).thenReturn(new RuntimeException("Failure").getSuppressed());
        when(jobExecution.getJobInstance()).thenReturn(mock(JobInstance.class));
        when(jobExecution.getJobInstance().getJobName()).thenReturn("testJob");
        when(jobExecution.getId()).thenReturn(1L);

        when(jobLauncher.run(eq(job), any(JobParameters.class))).thenReturn(jobExecution);

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("testJob", response.getJobName());
        assertEquals("FAILED", response.getJobLaunchStatus());
        assertNotNull(response.getJobStatusMessage());
        assertEquals("1", response.getJobExecutionId());
    }

    @Test
    public void testStartJob_JobExecutionAlreadyRunningException() throws Exception {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(true);
        when(batchUtil.isJobRunning("testJob")).thenReturn(false);

        Job job = mock(Job.class);
        when(jobRegistry.getJob("testJob")).thenReturn(job);

        when(jobLauncher.run(eq(job), any(JobParameters.class)))
                .thenThrow(new JobExecutionAlreadyRunningException("Already running"));

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("FAILURE", response.getJobLaunchStatus());
        assertTrue(response.getJobStatusMessage().contains("Already running"));
    }

    @Test
    public void testStartJob_JobRestartException() throws Exception {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(true);
        when(batchUtil.isJobRunning("testJob")).thenReturn(false);

        Job job = mock(Job.class);
        when(jobRegistry.getJob("testJob")).thenReturn(job);

        when(jobLauncher.run(eq(job), any(JobParameters.class)))
                .thenThrow(new JobRestartException("Cannot restart"));

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("FAILURE", response.getJobLaunchStatus());
        assertTrue(response.getJobStatusMessage().contains("Cannot restart"));
    }

    @Test
    public void testStartJob_JobInstanceAlreadyCompleteException() throws Exception {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(true);
        when(batchUtil.isJobRunning("testJob")).thenReturn(false);

        Job job = mock(Job.class);
        when(jobRegistry.getJob("testJob")).thenReturn(job);

        when(jobLauncher.run(eq(job), any(JobParameters.class)))
                .thenThrow(new JobInstanceAlreadyCompleteException("Already completed"));

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("FAILURE", response.getJobLaunchStatus());
        assertTrue(response.getJobStatusMessage().contains("Already completed"));
    }

    @Test
    public void testStartJob_JobParametersInvalidException() throws Exception {
        when(batchUtil.isJobEnabled("testJob")).thenReturn(true);
        when(batchUtil.isJobRunning("testJob")).thenReturn(false);

        Job job = mock(Job.class);
        when(jobRegistry.getJob("testJob")).thenReturn(job);

        when(jobLauncher.run(eq(job), any(JobParameters.class)))
                .thenThrow(new JobParametersInvalidException("Invalid parameters"));

        BatchLauncherResponse response = service.startJob(batchLauncherRequest);

        assertEquals("FAILURE", response.getJobLaunchStatus());
        assertTrue(response.getJobStatusMessage().contains("Invalid parameters"));
    }
}
