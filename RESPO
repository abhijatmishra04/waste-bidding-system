@Test
public void testFetchAndUpdateTransferInstructionIds_success() {
    List<String> scheduleIds = Arrays.asList("SCHED1", "SCHED2");

    Mockito.when(mockJdbcTemplate.queryForObject(
            Mockito.eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
            Mockito.eq(String.class),
            Mockito.any(Object[].class)))
        .thenAnswer(invocation -> {
            Object[] args = invocation.getArgument(2);
            if ("SCHED1".equals(args[0])) {
                return "INSTR1";
            } else if ("SCHED2".equals(args[0])) {
                return "INSTR2";
            }
            return null;
        });

    processor.fetchAndUpdateTransferInstructionIds(scheduleIds);

    Mockito.verify(mockJdbcTemplate, Mockito.times(2)).queryForObject(
            Mockito.eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
            Mockito.eq(String.class),
            Mockito.any(Object[].class));
}

@Test
public void testFetchAndUpdateTransferInstructionIds_noInstructionId() {
    List<String> scheduleIds = Arrays.asList("SCHED1", "SCHED2");

    Mockito.when(mockJdbcTemplate.queryForObject(
            Mockito.eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
            Mockito.eq(String.class),
            Mockito.any(Object[].class)))
        .thenReturn(null);

    processor.fetchAndUpdateTransferInstructionIds(scheduleIds);

    Mockito.verify(mockJdbcTemplate, Mockito.times(2)).queryForObject(
            Mockito.eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
            Mockito.eq(String.class),
            Mockito.any(Object[].class));
}

@Test
public void testFetchAndUpdateTransferInstructionIds_exception() {
    List<String> scheduleIds = Arrays.asList("SCHED1");

    Mockito.when(mockJdbcTemplate.queryForObject(
            Mockito.eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
            Mockito.eq(String.class),
            Mockito.any(Object[].class)))
        .thenThrow(new RuntimeException("Mocked Exception"));

    processor.fetchAndUpdateTransferInstructionIds(scheduleIds);

    Mockito.verify(mockJdbcTemplate, Mockito.times(1)).queryForObject(
            Mockito.eq(CustaggSQLFactory.FETCH_TRANSFER_INSTRUCTION_ID),
            Mockito.eq(String.class),
            Mockito.any(Object[].class));
}










@Test
public void testUpdateTransferInstruction_success() {
    String transferInstructionId = "INSTR1";

    Mockito.when(mockJdbcTemplate.update(
            Mockito.eq(CustaggSQLFactory.UPDATE_TRANSFER_INSTRUCTION_M2M),
            Mockito.any()))
        .thenReturn(1);

    processor.updateTransferInstruction(transferInstructionId);

    Mockito.verify(mockJdbcTemplate, Mockito.times(1)).update(
            Mockito.eq(CustaggSQLFactory.UPDATE_TRANSFER_INSTRUCTION_M2M),
            Mockito.any());
}

@Test
public void testUpdateTransferInstruction_dataAccessException() {
    String transferInstructionId = "INSTR1";

    Mockito.when(mockJdbcTemplate.update(
            Mockito.eq(CustaggSQLFactory.UPDATE_TRANSFER_INSTRUCTION_M2M),
            Mockito.any()))
        .thenThrow(new DataAccessException("Mocked Data Access Exception") {});

    try {
        processor.updateTransferInstruction(transferInstructionId);
        Assert.fail("Expected DataAccessException to be thrown");
    } catch (DataAccessException e) {
        Assert.assertEquals("Mocked Data Access Exception", e.getMessage());
    }

    Mockito.verify(mockJdbcTemplate, Mockito.times(1)).update(
            Mockito.eq(CustaggSQLFactory.UPDATE_TRANSFER_INSTRUCTION_M2M),
            Mockito.any());
}

@Test
public void testUpdateTransferInstruction_exception() {
    String transferInstructionId = "INSTR1";

    Mockito.when(mockJdbcTemplate.update(
            Mockito.eq(CustaggSQLFactory.UPDATE_TRANSFER_INSTRUCTION_M2M),
            Mockito.any()))
        .thenThrow(new RuntimeException("Mocked Generic Exception"));

    try {
        processor.updateTransferInstruction(transferInstructionId);
        Assert.fail("Expected RuntimeException to be thrown");
    } catch (RuntimeException e) {
        Assert.assertEquals("Mocked Generic Exception", e.getMessage());
    }

    Mockito.verify(mockJdbcTemplate, Mockito.times(1)).update(
            Mockito.eq(CustaggSQLFactory.UPDATE_TRANSFER_INSTRUCTION_M2M),
            Mockito.any());
}
