import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import java.math.BigDecimal;

public class UdapRequestPaymentInfoProcessorTest {

    private UdapRequestPaymentInfoProcessor processor;

    @Before
    public void setUp() {
        processor = new UdapRequestPaymentInfoProcessor();
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType("OTHER");
        dto.setProcessCode("P00");
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("FIX", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully124() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType("CONST_RECUR");
        dto.setProcessCode("P00");
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("FIX", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully9891() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType("MIN");
        dto.setProcessCode("P01");
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("MIN", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully90800() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType("MIN_ADDL");
        dto.setProcessCode("P00");
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("MIN", result.getAmtType());
    }

    @Test
    public void whenAllRequiredFieldsAreNonNull_thenProcessSuccessfully9897() throws Exception {
        UdapRequestPaymentInfoDTO dto = new UdapRequestPaymentInfoDTO();
        dto.setRecurAmtType("STMT_BAL");
        dto.setProcessCode("P00");
        dto.setMinStmtCrtRegAmt(new BigDecimal("100.00"));
        dto.setAdditionalAmt(new BigDecimal("50.00"));
        dto.setMinOrRecurAmt(new BigDecimal("30.00"));
        dto.setPmtAmt(new BigDecimal("200.00"));
        dto.setTransRefId("ABC123");

        UdapRequestPaymentInfoDTO result = processor.process(dto);

        assertNotNull(result);
        assertEquals("BAL", result.getAmtType());
    }
}
