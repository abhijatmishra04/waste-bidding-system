import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.time.Clock;
import java.util.TimeZone;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.web.servlet.FilterRegistrationBean;

@RunWith(MockitoJUnitRunner.class)
public class BatchApplicationTest {

    @InjectMocks
    private BatchApplication batchApplication;

    @Mock
    private ToolkitListener mockToolkitListener;

    @Mock
    private ToolkitFilter mockToolkitFilter;

    @Mock
    private SplunkLoggingFilter mockSplunkLoggingFilter;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    // ðŸ”¹ Test: Ensure `started()` sets default timezone
    @Test
    public void testStarted_SetsDefaultTimeZone() {
        batchApplication.started();
        assertEquals("America/New_York", TimeZone.getDefault().getID());
    }

    // ðŸ”¹ Test: Ensure `getClock()` returns system clock
    @Test
    public void testGetClock_ReturnsSystemClock() {
        Clock clock = batchApplication.getClock();
        assertNotNull(clock);
        assertEquals(Clock.systemDefaultZone(), clock);
    }

    // ðŸ”¹ Test: Ensure `toolkitListener()` returns a valid `ToolkitListener` bean
    @Test
    public void testToolkitListener_ReturnsBean() {
        ToolkitListener listener = batchApplication.toolkitListener();
        assertNotNull(listener);
    }

    // ðŸ”¹ Test: Ensure `toolkitFilterRegistration()` registers `ToolkitFilter`
    @Test
    public void testToolkitFilterRegistration_ReturnsFilterBean() {
        FilterRegistrationBean<ToolkitFilter> registration = batchApplication.toolkitFilterRegistration();

        assertNotNull(registration);
        assertNotNull(registration.getFilter());
        assertEquals("/*", registration.getUrlPatterns().iterator().next());
    }

    // ðŸ”¹ Test: Ensure `splunkLoggingFilterRegistration()` registers `SplunkLoggingFilter`
    @Test
    public void testSplunkLoggingFilterRegistration_ReturnsFilterBean() {
        FilterRegistrationBean<SplunkLoggingFilter> registration = batchApplication.splunkLoggingFilterRegistration();

        assertNotNull(registration);
        assertNotNull(registration.getFilter());
        assertEquals("/*", registration.getUrlPatterns().iterator().next());
    }
}
