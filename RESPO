package com.bofa.sst.batch.core;

import com.bofa.sst.batch.constants.CustaggSQLFactory;
import com.bofa.sst.batch.core.impl.CustaggProcessor;
import com.bofa.sst.batch.dto.CustaggProcessedRecordsDTO;
import com.bofa.sst.batch.dto.CustaggRecordsDTO;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CustaggProcessorTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    private CustaggProcessor processor;

    private HashMap<String, String> entityMap;

    @Before
    public void setUp() {
        entityMap = new HashMap<>();
        entityMap.put("ENTITY1", "MAPPED_ENTITY1");
        processor = new CustaggProcessor(entityMap);
        MockitoAnnotations.initMocks(this);
        processor = Mockito.spy(new CustaggProcessor(entityMap));
        ReflectionTestUtils.setField(processor, "jdbcTemplate", jdbcTemplate);
    }

    @Test
    public void testProcess_SuccessfulProcessing() throws Exception {
        // Arrange
        CustaggRecordsDTO input = new CustaggRecordsDTO();
        input.setEntity("ENTITY1");
        input.setAccountNumber("ACC12345");
        input.setProductCode("PROD01");

        when(jdbcTemplate.queryForObject(eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA), eq(String.class), any()))
                .thenReturn("SCHED123");
        when(jdbcTemplate.queryForObject(eq(CustaggSQLFactory.FETCH_TRANSFER_EXECUTION_M2M_ID), eq(String.class), any()))
                .thenReturn("EXEC456");
        doNothing().when(jdbcTemplate).update(eq(CustaggSQLFactory.UPDATE_TRANSFER_EXECUTION_M2M), any());

        // Act
        CustaggProcessedRecordsDTO result = processor.process(input);

        // Assert
        assertNotNull(result);
        assertEquals("MAPPED_ENTITY1", result.getMappedEntity());
        assertEquals("ENTITY1", result.getNumEntity());
        assertEquals("ACC12345", result.getAccountNumber());
        assertEquals("PROD01", result.getProductCode());
        assertTrue(result.getScheduleIds().contains("SCHED123"));
        assertTrue(result.getTransferExecutionIds().contains("EXEC456"));

        verify(jdbcTemplate, times(1)).queryForObject(anyString(), eq(String.class), any());
        verify(jdbcTemplate, times(1)).update(eq(CustaggSQLFactory.UPDATE_TRANSFER_EXECUTION_M2M), any());
    }

    @Test(expected = IllegalStateException.class)
    public void testProcess_EmptyEntityMap() throws Exception {
        // Arrange
        entityMap.clear();
        processor = new CustaggProcessor(entityMap);
        CustaggRecordsDTO input = new CustaggRecordsDTO();
        input.setEntity("ENTITY1");

        // Act
        processor.process(input);
    }

    @Test
    public void testProcess_NoMatchInEntityMap() throws Exception {
        // Arrange
        CustaggRecordsDTO input = new CustaggRecordsDTO();
        input.setEntity("INVALID_ENTITY");

        // Act
        CustaggProcessedRecordsDTO result = processor.process(input);

        // Assert
        assertNull(result);
    }

    @Test
    public void testProcess_FetchScheduledFails() throws Exception {
        // Arrange
        CustaggRecordsDTO input = new CustaggRecordsDTO();
        input.setEntity("ENTITY1");
        input.setAccountNumber("ACC12345");
        input.setProductCode("PROD01");

        when(jdbcTemplate.queryForObject(anyString(), eq(String.class), any()))
                .thenThrow(new RuntimeException("Fetch error"));

        // Act
        CustaggProcessedRecordsDTO result = processor.process(input);

        // Assert
        assertNotNull(result);
        assertTrue(result.getScheduleIds().isEmpty());
    }

    @Test
    public void testProcess_FetchTransferExecutionIdFails() throws Exception {
        // Arrange
        CustaggRecordsDTO input = new CustaggRecordsDTO();
        input.setEntity("ENTITY1");
        input.setAccountNumber("ACC12345");
        input.setProductCode("PROD01");

        when(jdbcTemplate.queryForObject(eq(CustaggSQLFactory.FETCH_SCHEDULE_ID_ACCOUNT_BOA), eq(String.class), any()))
                .thenReturn("SCHED123");
        when(jdbcTemplate.queryForObject(eq(CustaggSQLFactory.FETCH_TRANSFER_EXECUTION_M2M_ID), eq(String.class), any()))
                .thenThrow(new RuntimeException("Transfer Execution Error"));

        // Act
        CustaggProcessedRecordsDTO result = processor.process(input);

        // Assert
        assertNotNull(result);
        assertEquals(0, result.getTransferExecutionIds().size());
    }
}
