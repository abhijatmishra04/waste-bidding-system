try (Stream<Path> paths = Files.list(Paths.get(directoryPath))) {
    List<String> filesToAggregate = paths
        .filter(Files::isRegularFile)
        .filter(path -> {
            try {
                FileTime fileTime = Files.getLastModifiedTime(path);
                LocalDate fileDate = fileTime.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                return fileDate.equals(LocalDate.now()); // Only include files modified today
            } catch (IOException e) {
                Log.error("Error checking file modification time for " + path, e);
                return false;
            }
        })
        .map(Path::toString)
        .filter(filePath -> filePath.contains(dayPlusOneWriterKey) 
                            || filePath.contains(moreThan7DaysWriterKey) 
                            || filePath.contains(moreThan25DaysWriterKey))
        .collect(Collectors.toList());
    
    if (filesToAggregate.isEmpty()) {
        Log.info("No files found that match the required file names and today's date.");
        return RepeatStatus.FINISHED;
    }

    for (String filePath : filesToAggregate) {
        appendFileContent(filePath, outputFilePath);
    }

    Log.info("File aggregation complete. Output written to {}", outputFilePath);
    hangingReportEmailNotificationService.sendMail();

} catch (IOException e) {
    Log.info("Error while aggregating files: {}", e.getMessage(), e);
    throw e;
}
