import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Value;

@RunWith(SpringRunner.class)
public class CustaggFilePartitionerTest {

    @InjectMocks
    private CustaggFilePartitioner partitioner;

    @Mock
    private OraOdsDynamicConfigPropertiesRepository mockConfigRepo;

    @Mock
    private File mockFile;

    @Value("${custag.input.file.path}")
    private String filePath;

    @Value("#{JobExecutionContext['FilePrefixReferData']}")
    private String filePrefixReferData;

    @Value("#{JobExecutionContext['directoryPath']}")
    private String directoryPath;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        partitioner.filePath = "/tmp/testfile.dat";
        partitioner.FilePrefixReferData = "testfile";
        partitioner.directoryPath = "/tmp";
    }

    @Test
    public void testPartition_FileDoesNotExist() {
        when(mockFile.exists()).thenReturn(false);

        Map<String, ExecutionContext> partitions = partitioner.partition(4);

        assertNotNull(partitions);
        assertTrue("Partitions should be empty when file does not exist", partitions.isEmpty());
    }

    @Test
    public void testPartition_FileIsEmpty() {
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(0L);

        Map<String, ExecutionContext> partitions = partitioner.partition(4);

        assertNotNull(partitions);
        assertTrue("Partitions should be empty for an empty file", partitions.isEmpty());
    }

    @Test
    public void testPartition_NoRecordsFound() {
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(10L); // Small file that has no valid records

        Map<String, ExecutionContext> partitions = partitioner.partition(4);

        assertNotNull(partitions);
        assertTrue("Partitions should be empty if no valid records are found", partitions.isEmpty());
    }

    @Test
    public void testPartition_SmallFile_LessThanPartitions() {
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(50L); // Simulating a small file

        int gridSize = 5;
        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertEquals("Partition count should not exceed available records", Math.min(gridSize, 1), partitions.size());
    }

    @Test
    public void testPartition_ValidPartitioning() {
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(1000L); // A valid file size

        int gridSize = 4;
        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertEquals(gridSize, partitions.size());

        for (int i = 0; i < gridSize; i++) {
            ExecutionContext context = partitions.get("partition" + i);
            assertNotNull(context);
            assertTrue(context.containsKey("fromLine"));
            assertTrue(context.containsKey("toLine"));
            assertTrue(context.containsKey("numberOfRecords"));

            int fromLine = context.getInt("fromLine");
            int toLine = context.getInt("toLine");
            int numberOfRecords = context.getInt("numberOfRecords");

            assertTrue(fromLine > 0);
            assertTrue(toLine >= fromLine);
            assertTrue(numberOfRecords > 0);
        }
    }

    @Test
    public void testPartition_GridSizeGreaterThanRecords() {
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(80L); // Small number of records
        int gridSize = 10; // More partitions than records

        Map<String, ExecutionContext> partitions = partitioner.partition(gridSize);

        assertNotNull(partitions);
        assertTrue("Partitions should not be more than available records", partitions.size() <= gridSize);
    }

    @Test
    public void testPartition_ExceptionHandling() {
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenThrow(new RuntimeException("Test Exception"));

        try {
            Map<String, ExecutionContext> partitions = partitioner.partition(4);
            assertNotNull(partitions);
            assertTrue("Partitions should be empty in case of exception", partitions.isEmpty());
        } catch (Exception e) {
            fail("Exception should have been handled gracefully");
        }
    }
}
