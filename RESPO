import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.scope.context.ExecutionContext;

@RunWith(MockitoJUnitRunner.class)
public class CollectionLettersCustomJobListenerTest {

    @InjectMocks
    private CollectionLettersCustomJobListener jobListener;

    @Mock
    private OraOdsDynamicConfigPropertiesRepository dynamicConfigPropRepository;

    @Mock
    private JobExecution jobExecution;

    @Mock
    private ExecutionContext executionContext;

    @Before
    public void setUp() {
        when(jobExecution.getExecutionContext()).thenReturn(executionContext);
    }

    @Test
    public void testBeforeJob() {
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("collectionletters.output.flat.file.path"))
                .thenReturn("/test/source/path");

        jobListener.beforeJob(jobExecution);

        verify(executionContext).putString(CollectionLettersBatchConstants.PROPERTY_COLLECTIONLETTERS_OUTPUT_FILE_PATH_KEY, "/test/source/path");
        verify(executionContext).putString(eq("destDir"), anyString());
    }

    @Test
    public void testAfterJob_Completed() {
        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);

        jobListener.afterJob(jobExecution);

        verify(jobExecution).setExitStatus(new ExitStatus(BatchStatus.COMPLETED.toString(), "Job Launched Successfully.."));
    }

    @Test
    public void testAfterJob_Failed() {
        when(jobExecution.getStatus()).thenReturn(BatchStatus.FAILED);
        when(jobExecution.getFailureExceptions()).thenReturn(new RuntimeException("Job Failed"));

        jobListener.afterJob(jobExecution);

        verify(jobExecution).setExitStatus(new ExitStatus(BatchStatus.FAILED.toString(), "Job Failed"));
    }
}
