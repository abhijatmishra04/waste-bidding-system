import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.jdbc.core.JdbcTemplate;

@RunWith(MockitoJUnitRunner.class)
public class PaymentInfoProcessorTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private PaymentInfoProcessor processor;

    private PaymentInfoDTO samplePaymentInfo;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);

        // Sample data for testing
        samplePaymentInfo = new PaymentInfoDTO();
        samplePaymentInfo.setDetailRecordId("D");
        samplePaymentInfo.setAcctStatus("A");
        samplePaymentInfo.setPaymentAmount(new BigDecimal("100.00"));
        samplePaymentInfo.setIalsBalance(new BigDecimal("50.00"));
        samplePaymentInfo.setPaidAmt(new BigDecimal("200.00"));
        samplePaymentInfo.setTotalAmt(new BigDecimal("300.00"));
        samplePaymentInfo.setConfirmationNbr("12345");
    }

    @Test
    public void testProcess_SkipHeaderRecord() throws Exception {
        samplePaymentInfo.setDetailRecordId("H");

        PaymentInfoDTO result = processor.process(samplePaymentInfo);
        assertNull("Header record should be skipped", result);
    }

    @Test
    public void testProcess_SkipTrailerRecord() throws Exception {
        samplePaymentInfo.setDetailRecordId("T");

        PaymentInfoDTO result = processor.process(samplePaymentInfo);
        assertNull("Trailer record should be skipped", result);
    }

    @Test
    public void testProcess_ValidPaymentInfo() throws Exception {
        // Mock database call
        PaymentInfoDTO dbRecord = new PaymentInfoDTO();
        dbRecord.setPaidAmt(new BigDecimal("50.00"));
        dbRecord.setTotalAmt(new BigDecimal("150.00"));

        when(jdbcTemplate.query(anyString(), any(RowMapper.class), any()))
                .thenReturn(Arrays.asList(dbRecord));

        PaymentInfoDTO result = processor.process(samplePaymentInfo);

        assertNotNull(result);
        assertEquals(new BigDecimal("50.00"), result.getPaidAmt());
        assertEquals(new BigDecimal("150.00"), result.getTotalAmt());
    }

    @Test
    public void testProcess_PaymentAmountGreaterThanIalsBalance() throws Exception {
        samplePaymentInfo.setPaymentAmount(new BigDecimal("100.00"));
        samplePaymentInfo.setIalsBalance(new BigDecimal("50.00"));

        when(jdbcTemplate.query(anyString(), any(RowMapper.class), any()))
                .thenReturn(Arrays.asList(samplePaymentInfo));

        PaymentInfoDTO result = processor.process(samplePaymentInfo);

        assertNotNull(result);
        assertEquals(new BigDecimal("50.00"), result.getPaymentAmount());
    }

    @Test
    public void testProcess_AccountStatusC() throws Exception {
        samplePaymentInfo.setAcctStatus("C");
        samplePaymentInfo.setPaymentAmount(new BigDecimal("10.00"));

        when(jdbcTemplate.query(anyString(), any(RowMapper.class), any()))
                .thenReturn(Arrays.asList(samplePaymentInfo));

        PaymentInfoDTO result = processor.process(samplePaymentInfo);

        assertNotNull(result);
        assertEquals(BigDecimal.ZERO, result.getPaymentAmount());
    }

    @Test
    public void testFetchDataFromMainTables() {
        // Mock data
        PaymentInfoDTO dbRecord = new PaymentInfoDTO();
        dbRecord.setPaidAmt(new BigDecimal("50.00"));
        dbRecord.setTotalAmt(new BigDecimal("200.00"));

        when(jdbcTemplate.query(anyString(), any(RowMapper.class), any()))
                .thenReturn(Arrays.asList(dbRecord));

        List<PaymentInfoDTO> result = processor.fetchDataFromMainTables(samplePaymentInfo);

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(new BigDecimal("50.00"), result.get(0).getPaidAmt());
    }

    @Test
    public void testFetchDataFromMainTables_EmptyResult() {
        when(jdbcTemplate.query(anyString(), any(RowMapper.class), any())).thenReturn(Arrays.asList());

        List<PaymentInfoDTO> result = processor.fetchDataFromMainTables(samplePaymentInfo);

        assertNotNull(result);
        assertTrue(result.isEmpty());
    }
}
