Log.info("Processing valid record #{}", currentCount);

LocalDate dueDate = LocalDate.parse(item.getDueDate(), DateTimeFormatter.ofPattern("yyyyMMdd"));
LocalDate currentDate = LocalDate.now();
DayOfWeek dayOfWeek = currentDate.getDayOfWeek();
long hangingDays;

if (dayOfWeek == DayOfWeek.SUNDAY) {
    hangingDays = ChronoUnit.DAYS.between(dueDate.minusDays(6), currentDate);
    Log.info("Hanging days for valid record #{} calculated as {} (Sunday adjustment)", currentCount, hangingDays);
} else {
    hangingDays = ChronoUnit.DAYS.between(dueDate.minusDays(5), currentDate);
    Log.info("Hanging days for valid record #{} calculated as {} (Weekday adjustment)", currentCount, hangingDays);
}

// Map the paymentType value (1, 2, 3) to the correct string value
String paymentType;
switch (item.getPaymentType()) {
    case "1":
        paymentType = "MIN";
        break;
    case "2":
        paymentType = "STMT_BAL";
        break;
    case "3":
        paymentType = "CONST_RECUR";
        break;
    default:
        paymentType = "UNKNOWN"; // Fallback for unexpected values
        Log.warn("Unexpected payment type {} found for record #{}", item.getPaymentType(), currentCount);
        break;
}

RetrievalIDTO reportDTO = new RetrievalIDTO();
reportDTO.setHangingDays(hangingDays);
reportDTO.setPaymentType(paymentType); // Set the mapped string value (MIN, STMT_BAL, CONST_RECUR)
reportDTO.setAccountNumber(item.getAccountNumber());
reportDTO.setConfirmationNumber(item.getConfirmationNumber());
reportDTO.setDueDate(item.getDueDate());
reportDTO.setMarketId(item.getMarketId());
reportDTO.setCreateTimestamp(item.getCreateTimestamp());

Log.info("Valid record #{} processed successfully", currentCount);

return reportDTO;
