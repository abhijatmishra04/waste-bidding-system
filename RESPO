import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepSynchronizationManager;
import org.springframework.batch.repeat.RepeatStatus;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class SdaResponseFileValidationTaskletTest {

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @InjectMocks
    private SdaResponseFileValidationTasklet tasklet;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);

        JobExecution jobExecution = new JobExecution(1L);
        StepExecution stepExecution = new StepExecution("Step1", jobExecution);

        jobExecution.getExecutionContext().putString("RESPONSE_DIRECTORY_PATH", "/mock/path/");
        jobExecution.getExecutionContext().putString("RESPONSE_INPUT_FILE_PREFIX", "mock_prefix");
        jobExecution.getExecutionContext().putString("REQUEST_DIRECTORY_PATH", "/mock/path/");
        jobExecution.getExecutionContext().putString("REQUEST_INPUT_FILE_PREFIX", "mock_prefix");

        when(stepContribution.getStepExecution()).thenReturn(stepExecution);
        StepSynchronizationManager.register(stepExecution);
    }

    @Test
    public void testExecute_ForCodeCoverage() throws Exception {
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertNotNull(status);
    }
}
