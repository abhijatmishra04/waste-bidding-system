import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.*;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.item.ExecutionContext;

import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

public class CollectionLettersAggregatorTaskletTest {

    @InjectMocks
    private CollectionLettersAggregatorTasklet tasklet;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private ExecutionContext executionContext;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        when(chunkContext.getStepContext().getStepExecution().getExecutionContext()).thenReturn(executionContext);
    }

    @Test
    public void testExecute_Success() throws Exception {
        // Arrange
        String sourceDir = "src/test/resources/letters";
        when(executionContext.getString(CollectionLettersBatchConstants.PROPERTY_COLLECTIONLETTERS_OUTPUT_FILE_PATH_KEY))
                .thenReturn(sourceDir);

        // Act
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

        // Assert
        assertEquals(RepeatStatus.FINISHED, status);
        Path outputPath = Paths.get(sourceDir, "Final_Aggregated_Letter.txt");
        assertTrue(Files.exists(outputPath));

        // Clean up
        Files.deleteIfExists(outputPath);
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateDirectoryPath_NullPath() {
        // Act
        tasklet.validateDirectoryPath(null);
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateDirectoryPath_EmptyPath() {
        // Act
        tasklet.validateDirectoryPath("  ");
    }

    @Test
    public void testAggregateFilesForLetterType_Success() throws IOException {
        // Arrange
        String sourceDir = "src/test/resources/letters";
        Path sourcePath = Paths.get(sourceDir);
        Files.createDirectories(sourcePath);

        List<String> filesContent = Arrays.asList("Header", "Line1", "Line2", "Trailer");
        for (String type : Arrays.asList("NN3", "NN5")) {
            Path filePath = sourcePath.resolve(type + "_file.txt");
            Files.write(filePath, filesContent);
        }

        StringBuilder finalAggregatedContent = new StringBuilder();

        // Act
        tasklet.aggregateFilesForLetterType(sourceDir, "NN3", finalAggregatedContent);

        // Assert
        Path outputFilePath = sourcePath.resolve("NN3_Letter.txt");
        assertTrue(Files.exists(outputFilePath));
        assertTrue(finalAggregatedContent.toString().contains("Line1"));

        // Clean up
        Files.deleteIfExists(outputFilePath);
        Files.deleteIfExists(sourcePath.resolve("NN3_file.txt"));
        Files.deleteIfExists(sourcePath.resolve("NN5_file.txt"));
        Files.deleteIfExists(sourcePath);
    }

    @Test
    public void testAggregateFilesForLetterType_NoMatchingFiles() throws IOException {
        // Arrange
        String sourceDir = "src/test/resources/empty";
        Path sourcePath = Paths.get(sourceDir);
        Files.createDirectories(sourcePath);

        StringBuilder finalAggregatedContent = new StringBuilder();

        // Act
        tasklet.aggregateFilesForLetterType(sourceDir, "NN3", finalAggregatedContent);

        // Assert
        Path outputFilePath = sourcePath.resolve("NN3_Letter.txt");
        assertFalse(Files.exists(outputFilePath));

        // Clean up
        Files.deleteIfExists(sourcePath);
    }

    @Test
    public void testExecute_NoFilesToAggregate() throws Exception {
        // Arrange
        String sourceDir = "src/test/resources/empty";
        when(executionContext.getString(CollectionLettersBatchConstants.PROPERTY_COLLECTIONLETTERS_OUTPUT_FILE_PATH_KEY))
                .thenReturn(sourceDir);

        Path sourcePath = Paths.get(sourceDir);
        Files.createDirectories(sourcePath);

        // Act
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);

        // Assert
        assertEquals(RepeatStatus.FINISHED, status);
        Path outputPath = sourcePath.resolve("Final_Aggregated_Letter.txt");
        assertFalse(Files.exists(outputPath));

        // Clean up
        Files.deleteIfExists(sourcePath);
    }
}
