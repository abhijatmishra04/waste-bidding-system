import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.partition.support.ExecutionContext;

@RunWith(MockitoJUnitRunner.class)  // No PowerMockRunner needed
public class CustaggFilePartitionerTest {

    @InjectMocks
    private CustaggFilePartitioner partitioner;

    @Mock
    private OraOdsDynamicConfigPropertiesRepository mockRepo;

    private final String directoryPath = "/dummy/path";
    private final String filePrefix = "testFile";
    private final String filePath = "/dummy/path/testFile.txt";

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        // Use Reflection to set private fields
        setPrivateField(partitioner, "directoryPath", directoryPath);
        setPrivateField(partitioner, "FilePrefixReferData", filePrefix);
    }

    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        java.lang.reflect.Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    @Test
    public void testPartition_FileDoesNotExist() throws Exception {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(false);

        try (var mockedStatic = mockStatic(File.class)) {
            mockedStatic.when(() -> new File(filePath)).thenReturn(mockFile);
            Map<String, ExecutionContext> partitions = partitioner.partition(5);
            assertTrue(partitions.isEmpty());
        }
    }

    @Test
    public void testPartition_EmptyFile() throws Exception {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(0L);

        try (var mockedStatic = mockStatic(File.class)) {
            mockedStatic.when(() -> new File(filePath)).thenReturn(mockFile);
            Map<String, ExecutionContext> partitions = partitioner.partition(5);
            assertTrue(partitions.isEmpty());
        }
    }

    @Test
    public void testPartition_NonEmptyFile() throws Exception {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(300L);

        try (var mockedStaticFile = mockStatic(File.class);
             var mockedStaticFileUtils = mockStatic(FileUtils.class)) {
            
            mockedStaticFile.when(() -> new File(filePath)).thenReturn(mockFile);
            mockedStaticFileUtils.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, CustaggBatchConstants.LOCK_FILE_EXTENSION))
                    .thenReturn(filePath);

            Map<String, ExecutionContext> partitions = partitioner.partition(5);
            assertFalse(partitions.isEmpty());
        }
    }
}
