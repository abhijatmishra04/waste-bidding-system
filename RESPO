import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

import org.junit.Before;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.Rule;
import org.mockito.Mockito;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStreamException;

public class CustaggCompFileReaderTest {

    private CustaggCompFileReader reader;
    private ExecutionContext executionContext;
    
    @Rule
    public TemporaryFolder tempFolder = new TemporaryFolder();

    @Before
    public void setUp() {
        reader = new CustaggCompFileReader();
        executionContext = mock(ExecutionContext.class);
    }

    @Test
    public void testOpen_SuccessfulFileRead() throws Exception {
        // Arrange
        File tempFile = tempFolder.newFile("testData.lock");
        Files.write(tempFile.toPath(), "Sample Data Line 1\nSample Data Line 2\n".getBytes(), StandardOpenOption.APPEND);
        
        when(executionContext.getInt("fromLine")).thenReturn(1);
        when(executionContext.getInt("toLine")).thenReturn(2);
        
        // Act
        try {
            reader.open(executionContext);
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    public void testOpen_FileNotFound() {
        // Arrange
        when(executionContext.getInt("fromLine")).thenReturn(1);
        when(executionContext.getInt("toLine")).thenReturn(2);

        // Act & Assert
        try {
            reader.open(executionContext);
            fail("Expected ItemStreamException");
        } catch (ItemStreamException e) {
            assertTrue(e.getMessage().contains("Error opening file"));
        }
    }

    @Test
    public void testOpen_ErrorSkippingBytes() throws Exception {
        // Arrange
        File tempFile = tempFolder.newFile("testData.lock");
        Files.write(tempFile.toPath(), "Short Line\n".getBytes(), StandardOpenOption.APPEND);

        when(executionContext.getInt("fromLine")).thenReturn(10); // Force a high skip
        when(executionContext.getInt("toLine")).thenReturn(11);

        // Act & Assert
        try {
            reader.open(executionContext);
            fail("Expected RuntimeException");
        } catch (RuntimeException e) {
            assertTrue(e.getMessage().contains("Error skipping to start line in file"));
        }
    }
}
