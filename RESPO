@ExceptionHandler(SdaRequestDatabaseException.class)
public ResponseEntity<JobError> handleDatabaseException(SdaRequestDatabaseException exception) {
    log.error(LoggingUtil.logJobMessage(
            exception.getJobErrorEnum().getErrorCode(), 
            exception.getMessage()
    ));

    JobError jobError = new JobError(
            exception.getJobErrorEnum().getErrorCode(),
            exception.getJobErrorEnum().getErrorDescription(),
            exception.getJobErrorEnum().getStatusCode()
    );

    return new ResponseEntity<>(jobError, HttpStatus.INTERNAL_SERVER_ERROR);
}
DATABASE_WRITER_FAILED("1007", "Error while initializing file writer", "500");
@Override
@Bean
@StepScope
public FlatFileItemWriter<SdaInputDto> flatFileItemWriter() {

    log.info(LoggingUtil.logJobMessage("SdaItemWriterImpl ::: flatFileItemWriter() ::: Started"));

    try {
        String threadParam = Thread.currentThread().getId() + "-" + Thread.currentThread().getName() + "-"
                + new Random().nextInt();

        FlatFileItemWriter<SdaInputDto> itemWriter = new FlatFileItemWriter<>();

        itemWriter.setName("SDA_Request_Writer");
        itemWriter.setResource(new FileSystemResource(
                outputFlatFilePath + BatchConstants.SDA_INTERIM_FILE_PREFIX + threadParam));

        FormatterLineAggregator<SdaInputDto> formatterAggregator = new FormatterLineAggregator<>();
        BeanWrapperFieldExtractor<SdaInputDto> extractor = new BeanWrapperFieldExtractor<>();

        extractor.setNames(SdaInputDto.outputFields());

        formatterAggregator.setFieldExtractor(extractor);

        // Format setting might fail if format is invalid or null
        try {
            formatterAggregator.setFormat(aggregatorFormat());
        } catch (Exception e) {
            log.error(LoggingUtil.logJobMessage("Error while setting format in flatFileItemWriter", e.getMessage()));
            throw new SdaRequestDatabaseException(JobErrorEnum.DATA_ACCESS_EXCEPTION, e);
        }

        itemWriter.setLineAggregator(formatterAggregator);

        log.info(LoggingUtil.logJobMessage("SdaItemWriterImpl ::: flatFileItemWriter() ::: Completed"));

        return itemWriter;

    } catch (Exception e) {
        log.error(LoggingUtil.logJobMessage("SdaItemWriterImpl ::: flatFileItemWriter() ::: Failed", e.getMessage()));
        throw new SdaRequestDatabaseException(JobErrorEnum.DATABASE_WRITER_FAILED, e);
    }
}
