package com.bofa.sst.batch.core.impl;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.batch.core.ExitStatus;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.core.scope.context.JobContext;
import org.springframework.batch.core.scope.context.ExecutionContext;
import org.springframework.batch.repeat.RepeatStatus;

import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ FileUtils.class })  // Required for mocking static methods
public class CustaggFileValidationTaskletTest {

    @InjectMocks
    private CustaggFileValidationTasklet tasklet;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private StepContext stepContext;

    @Mock
    private JobContext jobContext;

    @Mock
    private ExecutionContext executionContext;

    @Mock
    private BufferedReader bufferedReader;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);

        when(chunkContext.getStepContext()).thenReturn(stepContext);
        when(stepContext.getJobExecutionContext()).thenReturn(executionContext);

        when(executionContext.getString(CustaggBatchConstants.DIRECTORY_PATH)).thenReturn("/mock/directory");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERDATA)).thenReturn("FilePrefixReferData");
        when(executionContext.getString(CustaggBatchConstants.FILE_PREFIX_REFERENTRY)).thenReturn("FilePrefixReferEnty");

        PowerMockito.mockStatic(FileUtils.class);
        
        PowerMockito.when(FileUtils.findTodaysFiles("/mock/directory", "FilePrefixReferData", "txt"))
                .thenReturn("/mock/directory/FilePrefixReferData.txt");
        PowerMockito.when(FileUtils.findTodaysFiles("/mock/directory", "FilePrefixReferEnty", "txt"))
                .thenReturn("/mock/directory/FilePrefixReferEnty.txt");
        PowerMockito.when(FileUtils.findTodaysFiles("/mock/directory", "FilePrefixReferEnty", CustaggBatchConstants.LOCK_FILE_EXTENSION))
                .thenReturn("/mock/directory/FilePrefixReferEnty.lock");

        PowerMockito.doNothing().when(FileUtils.class);
        FileUtils.lockFile(anyString(), anyString(), anyString());

        when(bufferedReader.readLine()).thenReturn("ABCD1234", "WXYZ5678", null);
    }

    @Test
    public void testExecute_Success() throws Exception {
        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, status);
        verify(stepContribution).setExitStatus(ExitStatus.COMPLETED);
        verify(executionContext).put(eq("entityMap"), any(HashMap.class));
    }

    @Test(expected = FileNotFoundException.class)
    public void testExecute_FileNotFound() throws Exception {
        PowerMockito.when(FileUtils.findTodaysFiles("/mock/directory", "FilePrefixReferData", "txt")).thenReturn(null);
        tasklet.execute(stepContribution, chunkContext);
    }

    @Test
    public void testExecute_LockFileException() throws Exception {
        PowerMockito.doThrow(new IOException("Lock file failed")).when(FileUtils.class);
        FileUtils.lockFile(anyString(), anyString(), anyString());

        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, status);
    }

    @Test
    public void testExecute_EntityFileProcessing_SkipsShortLines() throws Exception {
        BufferedReader mockReader = mock(BufferedReader.class);
        when(mockReader.readLine()).thenReturn("Short", null);

        RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
        assertEquals(RepeatStatus.FINISHED, status);
    }

    @Test(expected = Exception.class)
    public void testExecute_EntityFileProcessing_ThrowsException() throws Exception {
        PowerMockito.whenNew(FileReader.class)
                .withArguments("/mock/directory/FilePrefixReferEnty.txt")
                .thenThrow(new IOException("File read error"));

        tasklet.execute(stepContribution, chunkContext);
    }
}
