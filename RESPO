@RunWith(MockitoJUnitRunner.class)
public class CollectionLettersPaymentInfoProcessorTest {

    @InjectMocks
    private CollectionLettersPaymentInfoProcessor processor;

    @Mock
    private JdbcTemplate jdbcTemplate;

    private CollectionLettersPaymentInfoDTO dto;

    @Before
    public void setUp() {
        // Initialize a DTO object with default values for testing
        dto = new CollectionLettersPaymentInfoDTO();
        dto.setRecurAmtType("MIN");
        dto.setToProductCode("CCA");
        dto.setToAccountNumber("1234567890");
        dto.setAdditionalAmt(BigDecimal.valueOf(100.00));
        dto.setSubChn("RET");
    }

    @Test
    public void testProcess_withValidRecurAmtType_MIN() throws Exception {
        dto.setRecurAmtType("MIN");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals("M", result.getPmtAm());
        Assert.assertEquals("Y", result.getCasgFlag());
    }

    @Test
    public void testProcess_withValidRecurAmtType_STMT_BAL() throws Exception {
        dto.setRecurAmtType("STMT_BAL");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals("S", result.getPmtAm());
        Assert.assertEquals("Y", result.getCasgFlag());
    }

    @Test
    public void testProcess_withRecurAmtType_NULL() throws Exception {
        dto.setRecurAmtType(null);

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNull(result);
    }

    @Test
    public void testProcess_withUnsupportedRecurAmtType() throws Exception {
        dto.setRecurAmtType("INVALID");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertNull(result.getPmtAm());
    }

    @Test
    public void testProcess_withToProductCode_NULL() throws Exception {
        dto.setToProductCode(null);

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNull(result);
    }

    @Test
    public void testProcess_withValidToProductCode_CCA() throws Exception {
        dto.setToProductCode("CCA");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals(CollectionLettersBatchConstants.DEFAULT_SPACE, result.getAccountDtype());
        Assert.assertEquals(CollectionLettersBatchConstants.DEFAULT_SPACE, result.getPhoneNumber());
        Assert.assertEquals(CollectionLettersBatchConstants.DEFAULT_SPACE, result.getBaccorRespCity());
    }

    @Test
    public void testProcess_withHostNumber_FetchedFromDatabase() throws Exception {
        dto.setToAccountNumber("123456789012");
        Mockito.when(jdbcTemplate.queryForObject(
                Mockito.eq(CollectionLettersSQLFactory.FETCH_HOST_NO_FROM_BIN),
                Mockito.eq(String.class),
                Mockito.any(Object[].class)
        )).thenReturn("0001");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals("Y", dto.getCasgFlag());
    }

    @Test
    public void testProcess_withHostNumber_FallbackToDefault() throws Exception {
        dto.setToAccountNumber("123456789012");
        Mockito.when(jdbcTemplate.queryForObject(
                Mockito.eq(CollectionLettersSQLFactory.FETCH_HOST_NO_FROM_BIN),
                Mockito.eq(String.class),
                Mockito.any(Object[].class)
        )).thenReturn("0003");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals(CollectionLettersBatchConstants.DEFAULT_SPACE, dto.getCasgFlag());
    }

    @Test
    public void testProcess_withDatabaseException() throws Exception {
        dto.setToAccountNumber("123456789012");
        Mockito.when(jdbcTemplate.queryForObject(
                Mockito.eq(CollectionLettersSQLFactory.FETCH_HOST_NO_FROM_BIN),
                Mockito.eq(String.class),
                Mockito.any(Object[].class)
        )).thenThrow(new DataAccessException("DB Error") {});

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertNull(result.getPmtAm()); // Ensure processing continues safely
    }

    @Test
    public void testProcess_withAdditionalAmtHandling() throws Exception {
        dto.setRecurAmtType("CONST_RECUR");
        dto.setAdditionalAmt(BigDecimal.valueOf(200.00));

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals("200.00", result.getPmtAm());
    }

    @Test
    public void testProcess_withNullAdditionalAmtForCONST_RECUR() throws Exception {
        dto.setRecurAmtType("CONST_RECUR");
        dto.setAdditionalAmt(null);

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals(BigDecimal.ZERO.toPlainString(), result.getPmtAm());
    }

    @Test
    public void testProcess_withShortToAccountNumber() throws Exception {
        dto.setToAccountNumber("12345");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertNull(result.getCasgFlag()); // No database query executed for short account number
    }

    @Test
    public void testProcess_withFinalFieldMapping() throws Exception {
        dto.setRecurAmtType("MIN");
        dto.setToProductCode("CCA");
        dto.setToAccountNumber("1234567890");

        CollectionLettersPaymentInfoDTO result = processor.process(dto);

        Assert.assertNotNull(result);
        Assert.assertEquals(dto.getToAccountNumber(), result.getToAccountNumber());
        Assert.assertEquals(dto.getRecurAmtType(), result.getRecurAmtType());
    }

    @After
    public void tearDown() {
        dto = null; // Clear the DTO after each test
    }
}
