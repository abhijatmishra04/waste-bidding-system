import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;

import javax.mail.internet.MimeMessage;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class HangingReportEmailNotificationServiceTest {

    @Mock
    private JavaMailSenderImpl javaMailSender;

    @Mock
    private M2MDynamicConfigPropertiesRepository dynamicConfigPropertiesRepository;

    @Mock
    private EmailConfig emailConfig;

    @Mock
    private MimeMessage mimeMessage;

    @InjectMocks
    private HangingReportEmailNotificationService emailNotificationService;

    @Before
    public void setUp() throws Exception {
        // Initialize any required setup before each test
    }

    @Test
    public void testSendMail_Success() throws Exception {
        // Mock dynamic config values for receiver, subject, etc.
        when(dynamicConfigPropertiesRepository.findPropertyValueByPropertyName("sdphanging.mail.receiver.email.address"))
                .thenReturn("testuser@example.com");
        when(dynamicConfigPropertiesRepository.findPropertyValueByPropertyName("sdphanging.mail.subject.name"))
                .thenReturn("Test Subject");

        // Mock JavaMailSender behavior
        when(emailConfig.javaMailSender()).thenReturn(javaMailSender);
        when(javaMailSender.createMimeMessage()).thenReturn(mimeMessage);

        // Ensure MimeMessageHelper and sending are properly invoked
        doAnswer(invocation -> {
            MimeMessagePreparator preparator = (MimeMessagePreparator) invocation.getArguments()[0];
            preparator.prepare(mimeMessage);  // Simulate preparation
            return null;
        }).when(javaMailSender).send(any(MimeMessagePreparator.class));

        // Call the method to test
        emailNotificationService.sendMail();

        // Verify interactions with mocked components
        verify(javaMailSender, times(1)).send(any(MimeMessagePreparator.class));
        verify(dynamicConfigPropertiesRepository, times(1)).findPropertyValueByPropertyName("sdphanging.mail.receiver.email.address");
        verify(dynamicConfigPropertiesRepository, times(1)).findPropertyValueByPropertyName("sdphanging.mail.subject.name");

        // We would also verify the logging, but it's harder to mock in this case. We assume it's logged based on code structure.
    }

    @Test
    public void testSendMail_ExceptionThrown() {
        // Mock dynamic config values for receiver, subject, etc.
        when(dynamicConfigPropertiesRepository.findPropertyValueByPropertyName("sdphanging.mail.receiver.email.address"))
                .thenReturn("testuser@example.com");
        when(dynamicConfigPropertiesRepository.findPropertyValueByPropertyName("sdphanging.mail.subject.name"))
                .thenReturn("Test Subject");

        // Mock JavaMailSender behavior to throw an exception during send
        when(emailConfig.javaMailSender()).thenReturn(javaMailSender);
        when(javaMailSender.createMimeMessage()).thenReturn(mimeMessage);
        doThrow(new RuntimeException("Mail sending failed")).when(javaMailSender).send(any(MimeMessagePreparator.class));

        // Call the method and catch the exception
        try {
            emailNotificationService.sendMail();
        } catch (Exception e) {
            // Exception handling isn't necessary here because we're testing how the service logs the error
        }

        // Verify that the mail send attempt was made and that the error handling was triggered
        verify(javaMailSender, times(1)).send(any(MimeMessagePreparator.class));
        verify(dynamicConfigPropertiesRepository, times(1)).findPropertyValueByPropertyName("sdphanging.mail.receiver.email.address");
        verify(dynamicConfigPropertiesRepository, times(1)).findPropertyValueByPropertyName("sdphanging.mail.subject.name");
    }
}




import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.mail.javamail.JavaMailSenderImpl;

import java.util.Properties;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class EmailConfigTest {

    @Mock
    private M2MDynamicConfigPropertiesRepository dynamicConfigPropertiesRepository;

    @InjectMocks
    private EmailConfig emailConfig;

    @Before
    public void setUp() {
        // Setup mock behavior for dynamicConfigPropertiesRepository
        when(dynamicConfigPropertiesRepository.findPropertyValueByPropertyName("sdphanging.mail.username"))
                .thenReturn("testUser");
        when(dynamicConfigPropertiesRepository.findPropertyValueByPropertyName("sdphanging.mail.password"))
                .thenReturn("testPassword");
    }

    @Test
    public void testJavaMailSenderConfiguration() {
        // Mock constants for host and port (assuming SdpRespConstants is a class containing these constants)
        SdpRespConstants.MAIL_HOST = "smtp.example.com";
        SdpRespConstants.MAIL_PORT = 587;

        // Call the method to configure the JavaMailSender
        JavaMailSenderImpl mailSender = emailConfig.javaMailSender();

        // Verify that the username and password are set correctly
        assertEquals("testUser", mailSender.getUsername());
        assertEquals("testPassword", mailSender.getPassword());

        // Verify the host and port
        assertEquals("smtp.example.com", mailSender.getHost());
        assertEquals(587, mailSender.getPort());

        // Verify the mail properties (SMTP authentication and STARTTLS)
        Properties mailProperties = mailSender.getJavaMailProperties();
        assertEquals("true", mailProperties.getProperty("mail.smtp.auth"));
        assertEquals("true", mailProperties.getProperty("smtp.starttls.enable"));
    }
}
