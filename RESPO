import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.batch.item.ExecutionContext;

@RunWith(MockitoJUnitRunner.class)
public class CustaggFilePartitionerTest {

    @InjectMocks
    private CustaggFilePartitioner partitioner;

    @Mock
    private OraOdsDynamicConfigPropertiesRepository mockRepository;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        
        // Directly setting values instead of ReflectionTestUtils
        partitioner.filePrefixReferData = "mockFilePrefix";
        partitioner.filePath = "/mock/path/input.txt";
        partitioner.directoryPath = "/mock/path/";
    }

    @Test
    public void testPartition_FileDoesNotExist() {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(false);

        Map<String, ExecutionContext> result = partitioner.partition(3);

        assertTrue("Partitions should be empty if file does not exist", result.isEmpty());
    }

    @Test
    public void testPartition_FileIsEmpty() {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(0L);

        Map<String, ExecutionContext> result = partitioner.partition(3);

        assertTrue("Partitions should be empty if file is empty", result.isEmpty());
    }

    @Test
    public void testPartition_FileWithRecords() {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(3000L); // Mock file size

        Map<String, ExecutionContext> result = partitioner.partition(3);

        assertEquals("Should create 3 partitions", 3, result.size());

        for (int i = 1; i <= 3; i++) {
            ExecutionContext context = result.get("partition" + i);
            assertNotNull("Partition context should not be null", context);
            assertTrue("Should have fromLine and toLine", context.containsKey("fromLine"));
        }
    }

    @Test
    public void testPartition_GridSizeGreaterThanRecords() {
        File mockFile = mock(File.class);
        when(mockFile.exists()).thenReturn(true);
        when(mockFile.length()).thenReturn(200L); 

        Map<String, ExecutionContext> result = partitioner.partition(5);

        assertEquals("Should create only as many partitions as records exist", 2, result.size());
    }
}
