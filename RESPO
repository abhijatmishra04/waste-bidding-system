package com.bofa.sst.batch.partition;

import org.junit.Before;
import org.junit.Test;
import org.springframework.batch.item.ExecutionContext;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class CustaggFilePartitionerTest {

    private CustaggFilePartitioner partitioner;

    private static final String TEST_FILE_PATH = "src/test/resources/test_input.txt";
    private static final int RECORD_SIZE = 30;

    @Before
    public void setUp() throws Exception {
        // Create the partitioner and set a test file path using reflection
        partitioner = new CustaggFilePartitioner();
        java.lang.reflect.Field filePathField = CustaggFilePartitioner.class.getDeclaredField("filePath");
        filePathField.setAccessible(true);
        filePathField.set(partitioner, TEST_FILE_PATH);

        // Prepare a test file
        File testFile = new File(TEST_FILE_PATH);
        if (!testFile.exists()) {
            String testData = generateTestData(300); // 300 bytes (10 records)
            Files.write(Paths.get(TEST_FILE_PATH), testData.getBytes());
        }
    }

    private String generateTestData(int size) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < size; i++) {
            builder.append("A");
        }
        return builder.toString();
    }

    @Test
    public void testPartition_FileDoesNotExist() throws Exception {
        // Set a non-existent file path
        java.lang.reflect.Field filePathField = CustaggFilePartitioner.class.getDeclaredField("filePath");
        filePathField.setAccessible(true);
        filePathField.set(partitioner, "invalid/path.txt");

        Map<String, ExecutionContext> partitions = partitioner.partition(5);

        assertTrue("Partitions should be empty when file does not exist", partitions.isEmpty());
    }

    @Test
    public void testPartition_EmptyFile() throws Exception {
        // Create an empty test file
        String emptyFilePath = "src/test/resources/empty_file.txt";
        Files.write(Paths.get(emptyFilePath), new byte[0]);

        java.lang.reflect.Field filePathField = CustaggFilePartitioner.class.getDeclaredField("filePath");
        filePathField.setAccessible(true);
        filePathField.set(partitioner, emptyFilePath);

        Map<String, ExecutionContext> partitions = partitioner.partition(5);

        assertTrue("Partitions should be empty when file is empty", partitions.isEmpty());
    }

    @Test
    public void testPartition_ValidFile() throws Exception {
        Map<String, ExecutionContext> partitions = partitioner.partition(5);

        assertNotNull("Partitions should not be null", partitions);
        assertEquals("Should create 5 partitions", 5, partitions.size());

        ExecutionContext context1 = partitions.get("partition0");
        assertNotNull(context1);
        assertEquals("fromLine should start at 1", 1, context1.getInt("fromLine"));
        assertEquals("toLine should calculate correctly", 3, context1.getInt("toLine")); // 10 records / 5 partitions

        ExecutionContext context5 = partitions.get("partition4");
        assertNotNull(context5);
    }

    @Test
    public void testPartition_ExceptionHandling() throws Exception {
        // Mock file creation to throw exception
        CustaggFilePartitioner spyPartitioner = spy(partitioner);
        when(spyPartitioner.partition(anyInt())).thenThrow(new RuntimeException("Test Exception"));

        try {
            spyPartitioner.partition(5);
            fail("Exception was expected but not thrown");
        } catch (Exception e) {
            assertEquals("Test Exception", e.getMessage());
        }
    }
}
