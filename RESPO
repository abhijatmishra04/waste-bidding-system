import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class FileUtilsTest {

    private Path tempDir;
    private File tempFile;
    private File tempFile2;

    @Before
    public void setUp() throws IOException {
        // Create a temporary directory
        tempDir = Files.createTempDirectory("testDir");

        // Create temporary files
        tempFile = Files.createTempFile(tempDir, "testFile_20240214", ".txt").toFile();
        tempFile2 = Files.createTempFile(tempDir, "testFile_20240213", ".txt").toFile();

        // Write some content to the files
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write("Sample content");
        }
        try (FileWriter writer = new FileWriter(tempFile2)) {
            writer.write("Old content");
        }
    }

    @After
    public void tearDown() {
        // Cleanup: Delete temp files and directory
        tempFile.delete();
        tempFile2.delete();
        tempDir.toFile().delete();
    }

    @Test
    public void testFindTodaysFiles() {
        assertTrue("File should exist before searching", tempFile.exists());

        String result = FileUtils.findTodaysFiles(tempDir.toString(), "testFile", ".txt");

        assertNotNull("findTodaysFiles() should return a file path", result);
        assertTrue("Returned path should be a .txt file", result.endsWith(".txt"));
    }

    @Test
    public void testLockFile() {
        assertTrue("File should exist before locking", tempFile.exists());

        boolean result = FileUtils.lockFile(tempDir.toString(), "testFile", ".txt");

        File lockedFile = new File(tempFile.getAbsolutePath() + ".lock");
        assertTrue("Lock file should be created", lockedFile.exists());
        assertTrue("Lock operation should return true", result);

        lockedFile.delete(); // Cleanup
    }

    @Test
    public void testUnlockFile() {
        File lockedFile = new File(tempFile.getAbsolutePath() + ".lock");
        assertTrue("Locking file for unlock test", tempFile.renameTo(lockedFile));

        boolean result = FileUtils.unlockFile(tempDir.toString(), "testFile", ".txt");

        assertFalse("Lock file should be removed", lockedFile.exists());
        assertTrue("Unlock operation should return true", result);
    }

    @Test
    public void testArchiveFile() {
        assertTrue("File should exist before archiving", tempFile.exists());

        boolean result = FileUtils.archiveFile(tempDir.toString(), "testFile", ".txt");

        File archiveFile = new File(tempDir.toFile(), "archive/testFile_20240214.txt");
        assertTrue("Archive file should be created", archiveFile.exists());
        assertTrue("Archive operation should return true", result);

        archiveFile.delete(); // Cleanup
    }

    @Test
    public void testErrorFile() {
        assertTrue("File should exist before marking as error", tempFile.exists());

        boolean result = FileUtils.errorFile(tempDir.toString(), "testFile", ".txt");

        File errorFile = new File(tempDir.toFile(), "error/testFile_20240214.txt");
        assertTrue("Error file should be created", errorFile.exists());
        assertTrue("Error operation should return true", result);

        errorFile.delete(); // Cleanup
    }

    @Test
    public void testIsTodayFilePresent_True() {
        assertTrue("File should exist before checking presence", tempFile.exists());

        boolean result = FileUtils.isTodayFilePresent(tempDir.toString(), "testFile", ".txt");

        assertTrue("File should be detected as present", result);
    }

    @Test
    public void testIsTodayFilePresent_False() {
        assertTrue("File should exist before deletion", tempFile.exists());
        tempFile.delete(); // Remove file to simulate missing file

        boolean result = FileUtils.isTodayFilePresent(tempDir.toString(), "testFile", ".txt");

        assertFalse("File should not be detected as present", result);
    }
}
