package com.bofa.sst.batch.util;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * This enum is used to store the error messages
 * @author Chandrasekar
 */
@Getter
@AllArgsConstructor
public enum JobErrorEnum {

    VALIDATION_FAILED("1000", "Validation is failed", "400"), // Occurs when input validation fails
    UNEXPECTED_ERROR("1001", "Unexpected Error has occurred", "400"), // Used for unknown/unexpected errors
    FILE_NOT_FOUND("1002", "File not found", "404"), // Used when file is missing
    JOBTYPE_ERROR("1003", "Job Type is not valid", "400"), // Occurs when an invalid job type is passed
    PARSE_EXCEPTION("1004", "Parse exception occurred", "400"), // Used for parsing errors
    DATA_ACCESS_EXCEPTION("1005", "Datasource must not be null", "500"), // Data source misconfiguration
    SQL_EXCEPTION("1006", "SQL Statement error occurred", "500"); // SQL statement failure

    private final String errorCode;
    private final String errorDescription;
    private final String statusCode;
}


@Bean
public RowMapper<SdaInputDto> rowMapper() {
    return (rs, i) -> {
        log.info(LoggingUtil.logJobMessage(jobExecutionId, "RowMapper Started"));

        SdaInputDto input = new SdaInputDto();
        input.setSstKey(rs.getString("sst_key"));
        input.setConfirmationNumber(rs.getString("cnfrm_no"));
        input.setPaymentAmount(rs.getBigDecimal("pmt_am"));
        input.setNextTransactionDate(rs.getString("nxt_tran_dt"));
        input.setAccountNumber(rs.getString("acc_no"));
        input.setEntityCode(rs.getString("ent_cd"));
        input.setProductCode(rs.getString("prod_cd"));
        input.setSubProductCode(rs.getString("sub_prod_cd"));

        log.info(LoggingUtil.logJobMessage(jobExecutionId, "RowMapper Completed"));
        return input;
    };
}
