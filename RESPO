import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class FileUtilsTest {

    private final String directoryPath = "/dummy/path";
    private final String filePrefix = "testFile";
    private final String extension = ".txt";

    @Before
    public void setUp() {
        // No setup required as we are mocking static methods
    }

    // ðŸ”¹ Test: Directory does not exist
    @Test
    public void testFindTodaysFiles_DirectoryDoesNotExist() {
        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenCallRealMethod();
            mockedStatic.when(() -> new File(directoryPath)).thenReturn(null);

            String result = FileUtils.findTodaysFiles(directoryPath, filePrefix, extension);
            assertNull(result);
        }
    }

    // ðŸ”¹ Test: No matching files found
    @Test
    public void testFindTodaysFiles_NoMatchingFiles() {
        File mockDir = mock(File.class);
        when(mockDir.exists()).thenReturn(true);
        when(mockDir.listFiles()).thenReturn(null);

        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenCallRealMethod();
            mockedStatic.when(() -> new File(directoryPath)).thenReturn(mockDir);

            String result = FileUtils.findTodaysFiles(directoryPath, filePrefix, extension);
            assertNull(result);
        }
    }

    // ðŸ”¹ Test: Matching files found (sorted by lastModified)
    @Test
    public void testFindTodaysFiles_MatchingFilesFound() {
        File mockDir = mock(File.class);
        File file1 = mock(File.class);
        File file2 = mock(File.class);
        
        when(mockDir.exists()).thenReturn(true);
        when(mockDir.listFiles(any())).thenReturn(new File[]{file1, file2});
        
        when(file1.getName()).thenReturn("testFile_20240213.txt");
        when(file2.getName()).thenReturn("testFile_20240214.txt");
        when(file1.lastModified()).thenReturn(1000L);
        when(file2.lastModified()).thenReturn(2000L);

        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenCallRealMethod();
            mockedStatic.when(() -> new File(directoryPath)).thenReturn(mockDir);

            String result = FileUtils.findTodaysFiles(directoryPath, filePrefix, extension);
            assertNotNull(result);
        }
    }

    // ðŸ”¹ Test: Lock file (Success case)
    @Test
    public void testLockFile_Success() {
        File mockInputFile = mock(File.class);
        File mockLockedFile = mock(File.class);
        
        when(mockInputFile.renameTo(mockLockedFile)).thenReturn(true);

        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenReturn("/dummy/path/testFile.txt");
            mockedStatic.when(() -> new File("/dummy/path/testFile.txt")).thenReturn(mockInputFile);
            mockedStatic.when(() -> new File("/dummy/path/testFile.txt.lock")).thenReturn(mockLockedFile);

            boolean result = FileUtils.lockFile(directoryPath, filePrefix, extension);
            assertTrue(result);
        }
    }

    // ðŸ”¹ Test: Lock file (Failure case)
    @Test
    public void testLockFile_Failure() {
        File mockInputFile = mock(File.class);
        File mockLockedFile = mock(File.class);
        
        when(mockInputFile.renameTo(mockLockedFile)).thenReturn(false);

        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenReturn("/dummy/path/testFile.txt");
            mockedStatic.when(() -> new File("/dummy/path/testFile.txt")).thenReturn(mockInputFile);
            mockedStatic.when(() -> new File("/dummy/path/testFile.txt.lock")).thenReturn(mockLockedFile);

            boolean result = FileUtils.lockFile(directoryPath, filePrefix, extension);
            assertFalse(result);
        }
    }

    // ðŸ”¹ Test: Archive file (Success case)
    @Test
    public void testArchiveFile_Success() {
        File mockInputFile = mock(File.class);
        File mockArchiveFile = mock(File.class);

        when(mockInputFile.renameTo(mockArchiveFile)).thenReturn(true);

        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenReturn("/dummy/path/testFile.txt");
            mockedStatic.when(() -> new File("/dummy/path/testFile.txt")).thenReturn(mockInputFile);
            mockedStatic.when(() -> new File("/dummy/path/archive/testFile.txt")).thenReturn(mockArchiveFile);

            boolean result = FileUtils.archiveFile(directoryPath, filePrefix, extension);
            assertTrue(result);
        }
    }

    // ðŸ”¹ Test: Archive file (Failure case)
    @Test
    public void testArchiveFile_Failure() {
        File mockInputFile = mock(File.class);
        File mockArchiveFile = mock(File.class);

        when(mockInputFile.renameTo(mockArchiveFile)).thenReturn(false);

        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenReturn("/dummy/path/testFile.txt");
            mockedStatic.when(() -> new File("/dummy/path/testFile.txt")).thenReturn(mockInputFile);
            mockedStatic.when(() -> new File("/dummy/path/archive/testFile.txt")).thenReturn(mockArchiveFile);

            boolean result = FileUtils.archiveFile(directoryPath, filePrefix, extension);
            assertFalse(result);
        }
    }

    // ðŸ”¹ Test: Is today's file present (True case)
    @Test
    public void testIsTodayFilePresent_Found() {
        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenReturn("/dummy/path/testFile.txt");

            boolean result = FileUtils.isTodayFilePresent(directoryPath, filePrefix, extension);
            assertTrue(result);
        }
    }

    // ðŸ”¹ Test: Is today's file present (False case)
    @Test
    public void testIsTodayFilePresent_NotFound() {
        try (var mockedStatic = Mockito.mockStatic(FileUtils.class)) {
            mockedStatic.when(() -> FileUtils.findTodaysFiles(directoryPath, filePrefix, extension)).thenReturn(null);

            boolean result = FileUtils.isTodayFilePresent(directoryPath, filePrefix, extension);
            assertFalse(result);
        }
    }
}
