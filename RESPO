import lombok.Data;

@Data
public class EntityRecordDTO {
    private String numEntity;   // NUM-ENTITY
    private String alphaEntity; // ALPHA-ENTITY
}


import org.springframework.batch.item.ItemReader;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import lombok.extern.slf4j.Slf4j;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

@Component
@Slf4j
public class EntityFileReader implements ItemReader<List<EntityRecordDTO>> {

    @Value("${custag.input.file.path}") // File path injected from application.properties
    private String filePath;

    private boolean isRead = false;

    @Override
    public List<EntityRecordDTO> read() throws Exception {
        if (isRead) {
            log.info("File already read, returning null.");
            return null; // End of file
        }

        List<EntityRecordDTO> entityRecords = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String alphaEntity = line.substring(0, 4).trim(); // First 4 characters
                String numEntity = line.substring(4, 8).trim();  // Next 4 characters

                // Create DTO and populate fields
                EntityRecordDTO record = new EntityRecordDTO();
                record.setAlphaEntity(alphaEntity);
                record.setNumEntity(numEntity);

                // Add DTO to the list
                entityRecords.add(record);

                log.debug("Processed line - {}", record);
            }
        } catch (IOException e) {
            log.error("Error reading file at path: {}", filePath, e);
            throw new Exception("Error reading file", e);
        }

        isRead = true; // Mark file as read
        log.info("Successfully read and processed the file: {}", filePath);
        return entityRecords;
    }
}
