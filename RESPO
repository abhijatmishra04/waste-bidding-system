
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.io.IOException;
import java.nio.file.*;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.StepContext;
import org.springframework.batch.core.scope.context.StepExecution;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.scope.context.StepExecutionContext;

@RunWith(MockitoJUnitRunner.class)
public class CollectionLettersAggregatorTaskletTest {

    @InjectMocks
    private CollectionLettersAggregatorTasklet tasklet;

    @Mock
    private StepContribution stepContribution;

    @Mock
    private ChunkContext chunkContext;

    @Mock
    private StepContext stepContext;

    @Mock
    private StepExecution stepExecution;

    @Mock
    private JobExecution jobExecution;

    @Mock
    private StepExecutionContext executionContext;

    private final String testSourceDir = "/test/source";

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);

        lenient().when(chunkContext.getStepContext()).thenReturn(stepContext);
        lenient().when(stepContext.getStepExecution()).thenReturn(stepExecution);
        lenient().when(stepExecution.getJobExecution()).thenReturn(jobExecution);
        lenient().when(jobExecution.getExecutionContext()).thenReturn(executionContext);
        lenient().when(executionContext.getString(anyString())).thenReturn(testSourceDir);
    }

    @Test
    public void testExecute_Success() throws Exception {
        try (MockedStatic<Paths> mockedPaths = mockStatic(Paths.class)) {
            Path mockPath = mock(Path.class);
            mockedPaths.when(() -> Paths.get(testSourceDir)).thenReturn(mockPath);

            RepeatStatus status = tasklet.execute(stepContribution, chunkContext);
            assertEquals(RepeatStatus.FINISHED, status);
        }
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateDirectoryPath_EmptyPath() {
        tasklet.validateDirectoryPath("");
    }

    @Test(expected = IllegalStateException.class)
    public void testValidateDirectoryPath_NullPath() {
        tasklet.validateDirectoryPath(null);
    }

    @Test
    public void testAggregateFilesForLetterType_WithFiles() throws Exception {
        try (MockedStatic<Files> mockedFiles = mockStatic(Files.class)) {
            Path mockSourcePath = mock(Path.class);
            Path mockFilePath1 = mock(Path.class);
            Path mockFilePath2 = mock(Path.class);

            List<Path> mockFileList = Arrays.asList(mockFilePath1, mockFilePath2);

            lenient().when(mockSourcePath.toAbsolutePath()).thenReturn(mockSourcePath);
            mockedFiles.when(() -> Files.list(mockSourcePath)).thenReturn(mockFileList.stream());
            lenient().when(mockFilePath1.getFileName()).thenReturn(Paths.get("NN3_sample.txt"));
            lenient().when(mockFilePath2.getFileName()).thenReturn(Paths.get("NN3_sample2.txt"));

            mockedFiles.when(() -> Files.readAllLines(mockFilePath1))
                    .thenReturn(Arrays.asList("Header", "Data1", "Data2"));
            mockedFiles.when(() -> Files.readAllLines(mockFilePath2))
                    .thenReturn(Arrays.asList("Header", "Data3", "Data4"));

            StringBuilder finalAggregatedContent = new StringBuilder();
            tasklet.aggregateFilesForLetterType(testSourceDir, "NN3", finalAggregatedContent);

            assertTrue(finalAggregatedContent.toString().contains("Data1"));
            assertTrue(finalAggregatedContent.toString().contains("Data4"));
        }
    }

    @Test
    public void testAggregateFilesForLetterType_NoMatchingFiles() throws Exception {
        try (MockedStatic<Files> mockedFiles = mockStatic(Files.class)) {
            Path mockSourcePath = mock(Path.class);
            lenient().when(mockSourcePath.toAbsolutePath()).thenReturn(mockSourcePath);
            mockedFiles.when(() -> Files.list(mockSourcePath)).thenReturn(Stream.empty());

            StringBuilder finalAggregatedContent = new StringBuilder();
            tasklet.aggregateFilesForLetterType(testSourceDir, "NN3", finalAggregatedContent);

            assertEquals(0, finalAggregatedContent.length());
        }
    }

    @Test
    public void testAggregateFilesForLetterType_FileReadFailure() throws Exception {
        try (MockedStatic<Files> mockedFiles = mockStatic(Files.class)) {
            Path mockSourcePath = mock(Path.class);
            Path mockFilePath = mock(Path.class);

            lenient().when(mockSourcePath.toAbsolutePath()).thenReturn(mockSourcePath);
            mockedFiles.when(() -> Files.list(mockSourcePath)).thenReturn(Stream.of(mockFilePath));
            lenient().when(mockFilePath.getFileName()).thenReturn(Paths.get("NN3_sample.txt"));

            mockedFiles.when(() -> Files.readAllLines(mockFilePath)).thenThrow(new IOException("Test I/O exception"));

            StringBuilder finalAggregatedContent = new StringBuilder();
            tasklet.aggregateFilesForLetterType(testSourceDir, "NN3", finalAggregatedContent);

            assertEquals(0, finalAggregatedContent.length());
        }
    }

    @Test
    public void testAggregateFilesForLetterType_FileDeletionFailure() throws Exception {
        try (MockedStatic<Files> mockedFiles = mockStatic(Files.class)) {
            Path mockSourcePath = mock(Path.class);
            Path mockFilePath = mock(Path.class);

            lenient().when(mockSourcePath.toAbsolutePath()).thenReturn(mockSourcePath);
            mockedFiles.when(() -> Files.list(mockSourcePath)).thenReturn(Stream.of(mockFilePath));
            lenient().when(mockFilePath.getFileName()).thenReturn(Paths.get("NN3_sample.txt"));

            mockedFiles.when(() -> Files.readAllLines(mockFilePath)).thenReturn(Arrays.asList("Header", "Data1"));

            mockedFiles.when(() -> Files.delete(mockFilePath)).thenThrow(new IOException("Delete error"));

            StringBuilder finalAggregatedContent = new StringBuilder();
            tasklet.aggregateFilesForLetterType(testSourceDir, "NN3", finalAggregatedContent);

            assertTrue(finalAggregatedContent.toString().contains("Data1"));
        }
    }
}
