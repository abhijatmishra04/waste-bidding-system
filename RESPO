package com.bofa.sst.batch.config;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.test.context.junit4.SpringRunner;

import com.bofa.sst.batch.reader.CustaggCompFileReader;
import com.bofa.sst.batch.processor.CustaggProcessor;
import com.bofa.sst.batch.writer.CustaggWriter;
import com.bofa.sst.batch.partition.CustaggFilePartitioner;
import com.bofa.sst.batch.listener.CustaggCustomJobListener;
import com.bofa.sst.batch.listener.CustaggCustomStepListener;
import com.bofa.sst.batch.policy.CustaggCustomSkipPolicy;
import com.bofa.sst.batch.repository.M2MDynamicConfigPropertiesRepository;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
public class CustaggBatchJobConfigurationTest {

    @InjectMocks
    private CustaggBatchJobConfiguration configuration;

    @Mock
    private JobBuilderFactory jobBuilderFactory;

    @Mock
    private StepBuilderFactory stepBuilderFactory;

    @Mock
    private CustaggCompFileReader custaggCompFileReader;

    @Mock
    private CustaggProcessor custaggProcessor;

    @Mock
    private CustaggWriter custaggWriter;

    @Mock
    private CustaggFilePartitioner custaggFilePartitioner;

    @Mock
    private CustaggCustomJobListener customJobListener;

    @Mock
    private CustaggCustomStepListener customStepListener;

    @Mock
    private CustaggCustomSkipPolicy customSkipPolicy;

    @Mock
    private M2MDynamicConfigPropertiesRepository dynamicConfigPropRepository;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.batch.chunk.size"))
                .thenReturn("10");
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.batch.partition.grid.size"))
                .thenReturn("5");
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.batch.thread.core.pool.size"))
                .thenReturn("2");
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.batch.thread.max.pool.size"))
                .thenReturn("4");
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.batch.queue.capacity"))
                .thenReturn("10");
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.batch.thread.prefix.name"))
                .thenReturn("TestThread-");
        when(dynamicConfigPropRepository.findPropertyValueByPropertyName("custagg.batch.partition.type"))
                .thenReturn("SIMPLE");

        configuration.init();
    }

    @Test
    public void testJobParameters() {
        assertNotNull(configuration.jobParameters());
    }

    @Test
    public void testCustaggJob() {
        Job job = configuration.custaggJob();
        assertNotNull(job);
    }

    @Test
    public void testCustaggStep() {
        Step step = configuration.custaggStep();
        assertNotNull(step);
    }

    @Test
    public void testProcessCustaggFileStep() {
        Step step = configuration.processCustaggFileStep();
        assertNotNull(step);
    }

    @Test
    public void testTaskExecutor() {
        ThreadPoolTaskExecutor taskExecutor = (ThreadPoolTaskExecutor) configuration.taskExecutor();
        assertNotNull(taskExecutor);
        assertEquals(2, taskExecutor.getCorePoolSize());
        assertEquals(4, taskExecutor.getMaxPoolSize());
        assertEquals(10, taskExecutor.getQueueCapacity());
        assertEquals("TestThread-", taskExecutor.getThreadNamePrefix());
    }

    @Test
    public void testCustaggFilePartitioner() {
        assertNotNull(configuration.custaggFilePartitioner());
    }

    @Test
    public void testCustomSkipPolicy() {
        assertNotNull(configuration.customSkipPolicy());
    }

    @Test
    public void testCustomStepListener() {
        assertNotNull(configuration.customStepListener());
    }

    @Test
    public void testCustomJobListener() {
        assertNotNull(configuration.customJobListener());
    }
}
